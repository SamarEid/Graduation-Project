/*
 * app.c
 *
 *  Created on: ??þ/??þ/????
 *      Author: ASHRY
 */
#include "stm32f4xx_hal.h"
#include "cmsis_os.h"
#include "../HAL/ultraSonic/ultraSonic.h"
#include "../../communication/communication.h"
#include "../../communication/sender/typesdefinition/typedefinitions.h"
#include "../../communication/sender/transmission/transmission.h"
#include "./app.h"

// Timer handles
TIM_HandleTypeDef htim3 = {0};
TIM_HandleTypeDef htim4 = {0};
TIM_HandleTypeDef htim5 = {0};

// Queue handle
osMessageQueueId_t sensorQueueHandle;
const osMessageQueueAttr_t sensorQueue_attr = {
    .name = "sensorQueue"
};

// Ultrasonic sensor config
ultraSonicInitTypeDef FRONT_ultraSonic = {
    .GPIOxTrigger = GPIOA,
    .GPIOxEcho = GPIOA,
    .GPIOxTriggerPin = GPIO_PIN_3,
    .GPIOxEchoPin = GPIO_PIN_6,
    .GPIOxEchoPinAF = GPIO_AF2_TIM3,
    .TIMxEcho = TIM3,
    .htimEcho = &htim3,
    .EchoIRQ = TIM3_IRQn,
};

ultraSonicInitTypeDef LHS_ultraSonic = {
    .GPIOxTrigger = GPIOB,
    .GPIOxEcho = GPIOB,
    .GPIOxTriggerPin = GPIO_PIN_3,
    .GPIOxEchoPin = GPIO_PIN_6,
    .GPIOxEchoPinAF = GPIO_AF2_TIM4,
    .TIMxEcho = TIM4,
    .htimEcho = &htim4,
    .EchoIRQ = TIM4_IRQn,
};

ultraSonicInitTypeDef RHS_ultraSonic = {
    .GPIOxTrigger = GPIOB,
    .GPIOxEcho = GPIOA,
    .GPIOxTriggerPin = GPIO_PIN_10,
    .GPIOxEchoPin = GPIO_PIN_0,
    .GPIOxEchoPinAF = GPIO_AF2_TIM5,
    .TIMxEcho = TIM5,
    .htimEcho = &htim5,
    .EchoIRQ = TIM5_IRQn,
};

// Internal state
volatile uint32_t FRONT_firstCap = 0, FRONT_secondCap = 0;
volatile uint32_t LHS_firstCap = 0, LHS_secondCap = 0;
volatile uint32_t RHS_firstCap = 0, RHS_secondCap = 0;
volatile uint8_t FRONT_flag = 0, LHS_flag= 0, RHS_flag= 0;

void sendDataToQueue(uint32_t sensorId, float distance){
    sensorTypeDef sensorData = { sensorId, distance };
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    osMessageQueuePut(sensorQueueHandle, &sensorData, 0, 0);
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
    if (htim->Instance == TIM3) {
    	ultraSonicVidInputCaptureHandler(htim, (uint32_t*)&FRONT_firstCap, (uint32_t*)&FRONT_secondCap, (uint8_t*)&FRONT_flag,1,sendDataToQueue);
    } else if (htim->Instance == TIM4) {
    	ultraSonicVidInputCaptureHandler(htim, (uint32_t*)&LHS_firstCap, (uint32_t*)&LHS_secondCap, (uint8_t*)&LHS_flag,2, sendDataToQueue);
    } else if (htim->Instance == TIM5) {
    	ultraSonicVidInputCaptureHandler(htim, (uint32_t*)&RHS_firstCap, (uint32_t*)&RHS_secondCap, (uint8_t*)&RHS_flag,3,sendDataToQueue );
    }
}
void perceptionVidTriggerSensorsTask(void* pvParameters){
	for(;;){
		//osDelay(100);
		ultraSonicVidTrig(&FRONT_ultraSonic);
		ultraSonicVidDelayMicroSeconds(10);
		ultraSonicVidHaltTrig(&FRONT_ultraSonic);
		osDelay(100);
		ultraSonicVidTrig(&LHS_ultraSonic);
		ultraSonicVidDelayMicroSeconds(10);
		ultraSonicVidHaltTrig(&LHS_ultraSonic);
		osDelay(100);
		ultraSonicVidTrig(&RHS_ultraSonic);
		ultraSonicVidDelayMicroSeconds(10);
		ultraSonicVidHaltTrig(&RHS_ultraSonic);
		osDelay(100);
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
	}
}
void perceptionVidSendSensorDataTask(void* pvParameters) {
	sensorTypeDef sensorToSend = {0};
    for (;;) {
    	osDelay(100);
        if (osMessageQueueGet(sensorQueueHandle, &sensorToSend , NULL, osWaitForever) == osOK) {
        	transmissionVidSendSensorData(&sensorToSend);
        }
    }
}
void perceptionVidInit(void) {
    sensorQueueHandle = osMessageQueueNew(10, sizeof(sensorTypeDef), &sensorQueue_attr);
    ultraSonicVidInit(&FRONT_ultraSonic);
    ultraSonicVidInit(&LHS_ultraSonic);
    ultraSonicVidInit(&RHS_ultraSonic);
    ultraSonicVidStart(&FRONT_ultraSonic);
    ultraSonicVidStart(&LHS_ultraSonic);
    ultraSonicVidStart(&RHS_ultraSonic);
}

void perceptionVidBegin(void) {
	const osThreadAttr_t sendDateTaskAttr = {
	    .name = "SendDataTask",
	    .priority = osPriorityLow,
	    .stack_size = 128 * 4
	};
	const osThreadAttr_t TrigSenorsTaskAttr = {
			.name = "TriggerSensors",
		    .priority = osPriorityNormal,
		    .stack_size = 128 * 4

	};
	osThreadNew(perceptionVidTriggerSensorsTask, NULL, &TrigSenorsTaskAttr);
    osThreadNew(perceptionVidSendSensorDataTask, NULL, &sendDateTaskAttr);
}
