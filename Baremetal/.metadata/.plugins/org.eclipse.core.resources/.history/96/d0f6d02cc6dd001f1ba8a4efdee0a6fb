/*
 * communication.c
 *
 *  Created on: ??þ/??þ/????
 *      Author: ASHRY
 */
#include <communication/communication.h>
#include "../../../Libraries/Device/STM32F4xx/Include/stm32f4xx.h"
#include "../../../Libraries/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_gpio.h"
#include "../../../Libraries/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_spi.h"
#include "../utils/utils.h"
#include "../typesDefinition/types.h"
#include "../utils/formatter/serialization.h"
void communicationVidInit(){
	    GPIO_InitTypeDef GPIO_InitStruct;
	    GPIO_InitStruct.GPIO_Pin = SCLK_PIN | MISO_PIN | MOSI_PIN;
	    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
	    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
	    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	    GPIO_Init(SPI_PORT, &GPIO_InitStruct);

	    GPIO_InitStruct.GPIO_Pin = SS_PIN;
	    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
	    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
	    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	    GPIO_Init(SPI_PORT, &GPIO_InitStruct);

	    // Set PB12 high (deselect slave by default)
	    GPIO_SetBits(SPI_PORT, SS_PIN);

	    // Alternate function mapping for SPI2
	    GPIO_PinAFConfig(SPI_PORT, PinSource(SCLK_PIN), SPI_ALTERNATE_FUNCTION);
	    GPIO_PinAFConfig(SPI_PORT, PinSource(MISO_PIN), SPI_ALTERNATE_FUNCTION);
	    GPIO_PinAFConfig(SPI_PORT, PinSource(MOSI_PIN), SPI_ALTERNATE_FUNCTION);

	    // Configure SPI2 as master
	    SPI_InitTypeDef SPI_InitStruct;
	    SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex; // Full duplex
	    SPI_InitStruct.SPI_Mode = SPI_Mode_Master;                     	// Master mode
	    SPI_InitStruct.SPI_DataSize = DATA_SIZE;                 		// 16-bit data frame
	    SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;                        	// Clock polarity low
	    SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;                      	// Clock phase 1st edge
	    SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;                         	// Software NSS management
	    SPI_InitStruct.SPI_BaudRatePrescaler = BAUD_RATE_PRESCALER; 	// Prescaler = 2
	    SPI_InitStruct.SPI_FirstBit = ENDIAN;                			// LSB first
	    SPI_Init(COMMUNICATION_SPI, &SPI_InitStruct);

	    // Enable SPI2
		SPI_Cmd(COMMUNICATION_SPI, ENABLE);
}
void communicationVidSendSensorData(sensorTypeDef*sensorData){
	uint16_t* serialData = serializeSensorData(sensorData);
	communicationVidSelectSlave();
	for(int i = 0 ; i < sizeof(sensorTypeDef)/sizeof(uint16_t) ; i++){
		SPI_I2S_SendData(SPI2 , *(serialData + i));
	}
	communicationVidDeselectSlave();
}
void communicationVidSelectSlave(){
	GPIO_ResetBits(SPI_PORT, SS_PIN);
}
void communicationVidDeselectSlave(){
	while (SPI_I2S_GetFlagStatus(COMMUNICATION_SPI, SPI_I2S_FLAG_BSY) == SET);
	GPIO_SetBits(SPI_PORT, SS_PIN);
}
