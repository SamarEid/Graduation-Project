/*
 * app.c
 *
 *  Created on: ??þ/??þ/????
 *      Author: ASHRY
 */
#include "stm32f4xx.h"
#include "FreeRTOS.h"
#include "task.h"
#include "../HAL/motor/motor.h"
#include "../communication/reception/reception.h"
#include "./app.h"
// structs to initialize motors with its associated inputs and enables
static motorInitTypeDef LHS_Motor = {
	GPIOB,
	GPIO_Pin_0,
	GPIOB,
	GPIO_Pin_1,
	GPIOA,
	GPIO_Pin_8,
	TIM1,
	TIM_Channel_1,
	GPIO_AF_TIM1
};
static motorInitTypeDef RHS_Motor = {
	GPIOB,
	GPIO_Pin_2,
	GPIOB,
	GPIO_Pin_4,
	GPIOA,
	GPIO_Pin_9,
	TIM1,
	TIM_Channel_2,
	GPIO_AF_TIM1
};
// initialize RCC clock for peripherals involved in actuating tasks
void actuatingVidRCCInit(void){
	RCC_AHB1PeriphClockCmd(RCC_AHB1ENR_GPIOAEN, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1ENR_GPIOBEN, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2ENR_TIM1EN, ENABLE);
}
// initialize motors from structs that defined above
void actuatingVidInit(void){
	actuatingVidRCCInit();
	motorVidinit(&LHS_Motor);
	motorVidinit(&RHS_Motor);
}
// receive command and execute it
void actuatingVidExecuteCommandTask(void*pvParameters){
	while(1){

		uint16_t command = receptionHalfWordReceiveCommand();
		switch(command){
			case START:
				motorVidStart(&LHS_Motor,INITIAL_SPEED,CW);
				motorVidStart(&RHS_Motor,INITIAL_SPEED,CW);
				break;
			case FORWARD:
				motorVidSetMotorDirection(&LHS_Motor,CW);
				motorVidSetMotorDirection(&RHS_Motor,CW);
				break;
			case REVERSE:
				motorVidSetMotorDirection(&LHS_Motor,CCW);
				motorVidSetMotorDirection(&RHS_Motor,CCW);
				break;
			case TURNRIGHT:
				motorVidSetMotorDirection(&LHS_Motor,CW);
				motorVidSetMotorDirection(&RHS_Motor,CCW);
				break;
			case TURNLEFT:
				motorVidSetMotorDirection(&LHS_Motor,CCW);
				motorVidSetMotorDirection(&RHS_Motor,CW);
				break;
			case STOP:
				motorVidStop(&LHS_Motor);
				motorVidStop(&RHS_Motor);
				break;
			default:
				break;

		}
	}
}
// create actuating task
void actuatingVidBegin(){
	TaskHandle_t receiveCommandTask = NULL;
	xTaskCreate(
			actuatingVidExecuteCommandTask,
			"receiveCommand",
			256,
			NULL,
			3,
			&receiveCommandTask
	);
}
