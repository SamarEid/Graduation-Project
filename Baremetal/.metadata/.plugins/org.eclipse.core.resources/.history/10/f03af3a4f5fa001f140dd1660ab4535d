/*
 * app.c
 *
 *  Created on: ??þ/??þ/????
 *      Author: ASHRY
 */
#include "stm32f4xx.h"
#include "FreeRTOS.h"
#include "task.h"
#include "../HAL/ultraSonic/ultraSonic.h"
#include "../typesDefinition/types.h"
#include "../communication/transmission/transmission.h"
#include "./app.h"

// ultraSonic structs to initialize sensors to its pins and timers
ultraSonicInitTypeDef FRONT_ultraSonic   = {
		GPIOA,
		GPIOA,
		TIM2,
		TIM3,
		GPIO_Pin_3,
		GPIO_Pin_6,
		GPIO_AF_TIM2,
		GPIO_AF_TIM3,
		TRIGGER_CHANNEL_4,
		TIM3_IRQn
};

ultraSonicInitTypeDef LHS_ultraSonic 	= {
		GPIOB,
		GPIOB,
		TIM2,
		TIM4,
		GPIO_Pin_3,
		GPIO_Pin_6,
		GPIO_AF_TIM2,
		GPIO_AF_TIM4,
		TRIGGER_CHANNEL_2,
		TIM4_IRQn
};

ultraSonicInitTypeDef RHS_ultraSonic 	= {
		GPIOB,
		GPIOA,
		TIM2,
		TIM5,
		GPIO_Pin_10,
		GPIO_Pin_0,
		GPIO_AF_TIM2,
		GPIO_AF_TIM5,
		TRIGGER_CHANNEL_3,
		TIM5_IRQn
};

// variables for ultraSonic capture unit handlers
uint32_t LHS_firstCap = 0	, LHS_secondCap = 0,
		 RHS_firstCap = 0	, RHS_secondCap = 0,
		 FRONT_firstCap = 0	, FRONT_secondCap = 0;
uint8_t  LHS_flag = 0, RHS_flag = 0, FRONT_flag = 0;
float x1=0,x2=0,x3=0;
//sensor data with its associated id
sensorTypeDef FRONT_sensorData 	= {1,4.00};
sensorTypeDef LHS_sensorData 	= {2,4.00};
sensorTypeDef RHS_sensorData 	= {3,4.00};
//input capture unit handlers
void TIM3_IRQHandler(void){
	ultraSonicInputCaptureHandler(
			TIM3,
			&FRONT_firstCap,
			&FRONT_secondCap,
			&x1,
			&FRONT_flag);
}

void TIM4_IRQHandler(void){
	ultraSonicInputCaptureHandler(
			TIM4,
			&LHS_firstCap,
			&LHS_secondCap,
			&x2,
			&LHS_flag);
}

void TIM5_IRQHandler(void){
	ultraSonicInputCaptureHandler(
			TIM5,
			&RHS_firstCap,
			&RHS_secondCap,
			&x3,
			&RHS_flag);
}
// initialize RCC clock
void perceptionVidRCCInit(void){
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4,ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5,ENABLE);
}
// check for input capture unit overFlow
void perceptionVidCheckOverFlowTask(void*pvParameters){
	while(1){
		ultraSonicCheckOverFlow(FRONT_ultraSonic.TIMxEcho,&FRONT_flag);
		ultraSonicCheckOverFlow(LHS_ultraSonic.TIMxEcho,&LHS_flag);
		ultraSonicCheckOverFlow(RHS_ultraSonic.TIMxEcho,&RHS_flag);
	}
}
// send data after measuring (50ms)
void perceptionVidSendSensorsDataTask(void*pvParameters){
	while(1){
		vTaskDelay(50);
		transmissionVidSendSensorData(&FRONT_sensorData);
		transmissionVidSendSensorData(&LHS_sensorData);
		transmissionVidSendSensorData(&RHS_sensorData);
	}
}
// initialize perception layer function
void perceptionVidInit(void){
	//init RCC
	perceptionVidRCCInit();
	//init sensors
	ultraSonicVidInit(&LHS_ultraSonic);
	ultraSonicVidInit(&RHS_ultraSonic);
	ultraSonicVidInit(&FRONT_ultraSonic);
	//start sensing
	ultraSonicVidStart(&LHS_ultraSonic);
	ultraSonicVidStart(&RHS_ultraSonic);
	ultraSonicVidStart(&FRONT_ultraSonic);
}
//create Tasks
void perceptionVidBegin(void){
	xTaskCreate(
			perceptionVidCheckOverFlowTask,
			"checkOVFTask",
			256,
			NULL,
			1,
			NULL
	);
	xTaskCreate(
			perceptionVidSendSensorsDataTask,
			"sendDataTask",
			256,
			NULL,
			2,
			NULL
	);
}


