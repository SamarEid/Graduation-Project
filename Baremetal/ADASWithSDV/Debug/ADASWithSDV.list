
ADASWithSDV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800678c  0800678c  0000778c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067e0  080067e0  00008158  2**0
                  CONTENTS
  4 .ARM          00000008  080067e0  080067e0  000077e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067e8  080067e8  00008158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067e8  080067e8  000077e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067ec  080067ec  000077ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  080067f0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d64  20000158  08006948  00008158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ebc  08006948  00008ebc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e6a  00000000  00000000  00008188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d9e  00000000  00000000  00020ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  00024d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001000  00000000  00000000  00026288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040e4  00000000  00000000  00027288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001adfc  00000000  00000000  0002b36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097872  00000000  00000000  00046168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd9da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058ac  00000000  00000000  000dda20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000e32cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000158 	.word	0x20000158
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006774 	.word	0x08006774

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000015c 	.word	0x2000015c
 80001dc:	08006774 	.word	0x08006774

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
void SystemClock_Config(void);
void SystemRCCInit(void);


int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 ff94 	bl	8001400 <HAL_Init>
  SystemClock_Config();
 80004d8:	f000 f812 	bl	8000500 <SystemClock_Config>
  SystemRCCInit();
 80004dc:	f000 f870 	bl	80005c0 <SystemRCCInit>

  communicationVidInit();
 80004e0:	f000 fc54 	bl	8000d8c <communicationVidInit>
  perceptionVidInit();
 80004e4:	f000 ff36 	bl	8001354 <perceptionVidInit>
  actuatingVidInit();
 80004e8:	f000 fbbc 	bl	8000c64 <actuatingVidInit>



  /* Init scheduler */
  osKernelInitialize();
 80004ec:	f003 feba 	bl	8004264 <osKernelInitialize>

  perceptionVidBegin();
 80004f0:	f000 ff4c 	bl	800138c <perceptionVidBegin>
  actuatingVidBegin();
 80004f4:	f000 fc2a 	bl	8000d4c <actuatingVidBegin>

  /* Start scheduler */
  osKernelStart();
 80004f8:	f003 fed8 	bl	80042ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */

  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <main+0x2c>

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	@ 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	@ 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f006 f848 	bl	80065a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b23      	ldr	r3, [pc, #140]	@ (80005b8 <SystemClock_Config+0xb8>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800052c:	4a22      	ldr	r2, [pc, #136]	@ (80005b8 <SystemClock_Config+0xb8>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	@ 0x40
 8000534:	4b20      	ldr	r3, [pc, #128]	@ (80005b8 <SystemClock_Config+0xb8>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b1d      	ldr	r3, [pc, #116]	@ (80005bc <SystemClock_Config+0xbc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800054c:	4a1b      	ldr	r2, [pc, #108]	@ (80005bc <SystemClock_Config+0xbc>)
 800054e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b19      	ldr	r3, [pc, #100]	@ (80005bc <SystemClock_Config+0xbc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000568:	2310      	movs	r3, #16
 800056a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056c:	2300      	movs	r3, #0
 800056e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0320 	add.w	r3, r7, #32
 8000574:	4618      	mov	r0, r3
 8000576:	f001 fa1d 	bl	80019b4 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000580:	f000 f8ac 	bl	80006dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fc80 	bl	8001ea4 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005aa:	f000 f897 	bl	80006dc <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3750      	adds	r7, #80	@ 0x50
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <SystemRCCInit>:
void SystemRCCInit(void){
 80005c0:	b480      	push	{r7}
 80005c2:	b089      	sub	sp, #36	@ 0x24
 80005c4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
 80005ca:	4b3a      	ldr	r3, [pc, #232]	@ (80006b4 <SystemRCCInit+0xf4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a39      	ldr	r2, [pc, #228]	@ (80006b4 <SystemRCCInit+0xf4>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b37      	ldr	r3, [pc, #220]	@ (80006b4 <SystemRCCInit+0xf4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	61fb      	str	r3, [r7, #28]
 80005e0:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
 80005e6:	4b33      	ldr	r3, [pc, #204]	@ (80006b4 <SystemRCCInit+0xf4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a32      	ldr	r2, [pc, #200]	@ (80006b4 <SystemRCCInit+0xf4>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b30      	ldr	r3, [pc, #192]	@ (80006b4 <SystemRCCInit+0xf4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	61bb      	str	r3, [r7, #24]
 80005fc:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_TIM2_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	4b2c      	ldr	r3, [pc, #176]	@ (80006b4 <SystemRCCInit+0xf4>)
 8000604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000606:	4a2b      	ldr	r2, [pc, #172]	@ (80006b4 <SystemRCCInit+0xf4>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6413      	str	r3, [r2, #64]	@ 0x40
 800060e:	4b29      	ldr	r3, [pc, #164]	@ (80006b4 <SystemRCCInit+0xf4>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_TIM3_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <SystemRCCInit+0xf4>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000622:	4a24      	ldr	r2, [pc, #144]	@ (80006b4 <SystemRCCInit+0xf4>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6413      	str	r3, [r2, #64]	@ 0x40
 800062a:	4b22      	ldr	r3, [pc, #136]	@ (80006b4 <SystemRCCInit+0xf4>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_TIM4_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	4b1e      	ldr	r3, [pc, #120]	@ (80006b4 <SystemRCCInit+0xf4>)
 800063c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063e:	4a1d      	ldr	r2, [pc, #116]	@ (80006b4 <SystemRCCInit+0xf4>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	6413      	str	r3, [r2, #64]	@ 0x40
 8000646:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <SystemRCCInit+0xf4>)
 8000648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_TIM5_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <SystemRCCInit+0xf4>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065a:	4a16      	ldr	r2, [pc, #88]	@ (80006b4 <SystemRCCInit+0xf4>)
 800065c:	f043 0308 	orr.w	r3, r3, #8
 8000660:	6413      	str	r3, [r2, #64]	@ 0x40
 8000662:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <SystemRCCInit+0xf4>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000666:	f003 0308 	and.w	r3, r3, #8
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_SPI2_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <SystemRCCInit+0xf4>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000676:	4a0f      	ldr	r2, [pc, #60]	@ (80006b4 <SystemRCCInit+0xf4>)
 8000678:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800067c:	6413      	str	r3, [r2, #64]	@ 0x40
 800067e:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <SystemRCCInit+0xf4>)
 8000680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_TIM1_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <SystemRCCInit+0xf4>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000692:	4a08      	ldr	r2, [pc, #32]	@ (80006b4 <SystemRCCInit+0xf4>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6453      	str	r3, [r2, #68]	@ 0x44
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <SystemRCCInit+0xf4>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]
}
 80006a6:	bf00      	nop
 80006a8:	3724      	adds	r7, #36	@ 0x24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM10) {
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a04      	ldr	r2, [pc, #16]	@ (80006d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d101      	bne.n	80006ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ca:	f000 febb 	bl	8001444 <HAL_IncTick>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40014400 	.word	0x40014400

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <Error_Handler+0x8>

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b12      	ldr	r3, [pc, #72]	@ (800073c <HAL_MspInit+0x54>)
 80006f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006f6:	4a11      	ldr	r2, [pc, #68]	@ (800073c <HAL_MspInit+0x54>)
 80006f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <HAL_MspInit+0x54>)
 8000700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <HAL_MspInit+0x54>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000712:	4a0a      	ldr	r2, [pc, #40]	@ (800073c <HAL_MspInit+0x54>)
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000718:	6413      	str	r3, [r2, #64]	@ 0x40
 800071a:	4b08      	ldr	r3, [pc, #32]	@ (800073c <HAL_MspInit+0x54>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	210f      	movs	r1, #15
 800072a:	f06f 0001 	mvn.w	r0, #1
 800072e:	f000 ff61 	bl	80015f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a19      	ldr	r2, [pc, #100]	@ (80007c4 <HAL_SPI_MspInit+0x84>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d12c      	bne.n	80007bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <HAL_SPI_MspInit+0x88>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076a:	4a17      	ldr	r2, [pc, #92]	@ (80007c8 <HAL_SPI_MspInit+0x88>)
 800076c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000770:	6413      	str	r3, [r2, #64]	@ 0x40
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <HAL_SPI_MspInit+0x88>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <HAL_SPI_MspInit+0x88>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a10      	ldr	r2, [pc, #64]	@ (80007c8 <HAL_SPI_MspInit+0x88>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <HAL_SPI_MspInit+0x88>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800079a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800079e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007ac:	2305      	movs	r3, #5
 80007ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <HAL_SPI_MspInit+0x8c>)
 80007b8:	f000 ff46 	bl	8001648 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80007bc:	bf00      	nop
 80007be:	3728      	adds	r7, #40	@ 0x28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40003800 	.word	0x40003800
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020400 	.word	0x40020400

080007d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	4b2e      	ldr	r3, [pc, #184]	@ (80008a0 <HAL_InitTick+0xd0>)
 80007e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e8:	4a2d      	ldr	r2, [pc, #180]	@ (80008a0 <HAL_InitTick+0xd0>)
 80007ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80007f0:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <HAL_InitTick+0xd0>)
 80007f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007fc:	f107 020c 	add.w	r2, r7, #12
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4611      	mov	r1, r2
 8000806:	4618      	mov	r0, r3
 8000808:	f001 fd18 	bl	800223c <HAL_RCC_GetClockConfig>
  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800080c:	f001 fd02 	bl	8002214 <HAL_RCC_GetPCLK2Freq>
 8000810:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000814:	4a23      	ldr	r2, [pc, #140]	@ (80008a4 <HAL_InitTick+0xd4>)
 8000816:	fba2 2303 	umull	r2, r3, r2, r3
 800081a:	0c9b      	lsrs	r3, r3, #18
 800081c:	3b01      	subs	r3, #1
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000820:	4b21      	ldr	r3, [pc, #132]	@ (80008a8 <HAL_InitTick+0xd8>)
 8000822:	4a22      	ldr	r2, [pc, #136]	@ (80008ac <HAL_InitTick+0xdc>)
 8000824:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000826:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <HAL_InitTick+0xd8>)
 8000828:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800082c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800082e:	4a1e      	ldr	r2, [pc, #120]	@ (80008a8 <HAL_InitTick+0xd8>)
 8000830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000832:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000834:	4b1c      	ldr	r3, [pc, #112]	@ (80008a8 <HAL_InitTick+0xd8>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083a:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <HAL_InitTick+0xd8>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	4b19      	ldr	r3, [pc, #100]	@ (80008a8 <HAL_InitTick+0xd8>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000846:	4818      	ldr	r0, [pc, #96]	@ (80008a8 <HAL_InitTick+0xd8>)
 8000848:	f002 fb0a 	bl	8002e60 <HAL_TIM_Base_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000852:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000856:	2b00      	cmp	r3, #0
 8000858:	d11b      	bne.n	8000892 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800085a:	4813      	ldr	r0, [pc, #76]	@ (80008a8 <HAL_InitTick+0xd8>)
 800085c:	f002 fb5a 	bl	8002f14 <HAL_TIM_Base_Start_IT>
 8000860:	4603      	mov	r3, r0
 8000862:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000866:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800086a:	2b00      	cmp	r3, #0
 800086c:	d111      	bne.n	8000892 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800086e:	2019      	movs	r0, #25
 8000870:	f000 fedc 	bl	800162c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b0f      	cmp	r3, #15
 8000878:	d808      	bhi.n	800088c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800087a:	2200      	movs	r2, #0
 800087c:	6879      	ldr	r1, [r7, #4]
 800087e:	2019      	movs	r0, #25
 8000880:	f000 feb8 	bl	80015f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000884:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <HAL_InitTick+0xe0>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6013      	str	r3, [r2, #0]
 800088a:	e002      	b.n	8000892 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000892:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000896:	4618      	mov	r0, r3
 8000898:	3730      	adds	r7, #48	@ 0x30
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	431bde83 	.word	0x431bde83
 80008a8:	20000174 	.word	0x20000174
 80008ac:	40014400 	.word	0x40014400
 80008b0:	200000fc 	.word	0x200000fc

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <NMI_Handler+0x4>

080008bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <MemManage_Handler+0x4>

080008cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <UsageFault_Handler+0x4>

080008dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80008f0:	4802      	ldr	r0, [pc, #8]	@ (80008fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80008f2:	f002 fe53 	bl	800359c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000174 	.word	0x20000174

08000900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <SystemInit+0x20>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090a:	4a05      	ldr	r2, [pc, #20]	@ (8000920 <SystemInit+0x20>)
 800090c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000924:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800095c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000928:	f7ff ffea 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	@ (8000960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	@ (8000964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	@ (8000970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000952:	f005 fe85 	bl	8006660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000956:	f7ff fdbb 	bl	80004d0 <main>
  bx  lr    
 800095a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800095c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000968:	080067f0 	.word	0x080067f0
  ldr r2, =_sbss
 800096c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000970:	20004ebc 	.word	0x20004ebc

08000974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC_IRQHandler>

08000976 <motorVidinit>:
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_gpio.h"
#include "stm32f4xx_hal_tim.h"
#include "./motor.h"

void motorVidinit(motorInitTypeDef*motor){
 8000976:	b580      	push	{r7, lr}
 8000978:	b08e      	sub	sp, #56	@ 0x38
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	619a      	str	r2, [r3, #24]
    /*
     * init GPIO PINS
     * IN1 PIN as output and reset it
    */
    GPIO_InitStruct.Pin = motor->in1GPIOxPin;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(motor->in1GPIOx, &GPIO_InitStruct);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80009bc:	4611      	mov	r1, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 fe42 	bl	8001648 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(motor->in1GPIOx,motor->in1GPIOxPin , GPIO_PIN_RESET);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6818      	ldr	r0, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	2200      	movs	r2, #0
 80009d0:	4619      	mov	r1, r3
 80009d2:	f000 ffd5 	bl	8001980 <HAL_GPIO_WritePin>
    // IN2 PIN as output and reset it
    GPIO_InitStruct.Pin = motor->in2GPIOxPin;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(motor->in2GPIOx, &GPIO_InitStruct);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80009e4:	4611      	mov	r1, r2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fe2e 	bl	8001648 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(motor->in2GPIOx,motor->in2GPIOxPin , GPIO_PIN_RESET);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6898      	ldr	r0, [r3, #8]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	2200      	movs	r2, #0
 80009f8:	4619      	mov	r1, r3
 80009fa:	f000 ffc1 	bl	8001980 <HAL_GPIO_WritePin>
    // EN pin to its alternate function
    GPIO_InitStruct.Pin = motor->enGPIOxPin;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = motor->GPIOEnPinAF;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(motor->enGPIOx, &GPIO_InitStruct);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	691b      	ldr	r3, [r3, #16]
 8000a16:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 fe13 	bl	8001648 <HAL_GPIO_Init>

    // Timer Base for PWM (enable)
    motor->htim->Instance = motor->TIMxEnable;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	69d2      	ldr	r2, [r2, #28]
 8000a2a:	601a      	str	r2, [r3, #0]
    motor->htim->Init.Prescaler = SET_PSC();
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	220f      	movs	r2, #15
 8000a32:	605a      	str	r2, [r3, #4]
    motor->htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
    motor->htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
    motor->htim->Init.CounterMode  = TIM_COUNTERMODE_UP;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
    motor->htim->Init.Period = RESET_VALUE;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	2263      	movs	r2, #99	@ 0x63
 8000a52:	60da      	str	r2, [r3, #12]
    HAL_TIM_PWM_Init(motor->htim);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 fabd 	bl	8002fd8 <HAL_TIM_PWM_Init>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a5e:	2360      	movs	r3, #96	@ 0x60
 8000a60:	60bb      	str	r3, [r7, #8]
    sConfigOC.Pulse = SET_ARR(HANDLE_FAULT_MOTOR_RPM_SPEED);
 8000a62:	2309      	movs	r3, #9
 8000a64:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61bb      	str	r3, [r7, #24]
    HAL_TIM_PWM_ConfigChannel(motor->htim, &sConfigOC, motor->TIMxEnableChannel);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6998      	ldr	r0, [r3, #24]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6a1a      	ldr	r2, [r3, #32]
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f002 ff1a 	bl	80038b4 <HAL_TIM_PWM_ConfigChannel>
}
 8000a80:	bf00      	nop
 8000a82:	3738      	adds	r7, #56	@ 0x38
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <motorVidStart>:
void motorVidStart(motorInitTypeDef*motor, uint8_t motorSpeed,direction motorDirection){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70fb      	strb	r3, [r7, #3]
 8000a94:	4613      	mov	r3, r2
 8000a96:	70bb      	strb	r3, [r7, #2]
	// set direction
	motorVidSetMotorDirection(motor, motorDirection);
 8000a98:	78bb      	ldrb	r3, [r7, #2]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 f85f 	bl	8000b60 <motorVidSetMotorDirection>
	//set speed
	motorVidSetSpeed(motor, motorSpeed);
 8000aa2:	78fb      	ldrb	r3, [r7, #3]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 f80c 	bl	8000ac4 <motorVidSetSpeed>
	// enable TIMER
	HAL_TIM_PWM_Start(motor->htim,motor->TIMxEnableChannel);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	699a      	ldr	r2, [r3, #24]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6a1b      	ldr	r3, [r3, #32]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	f002 fae8 	bl	800308c <HAL_TIM_PWM_Start>
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <motorVidSetSpeed>:
void motorVidSetSpeed(motorInitTypeDef*motor, uint8_t motorSpeed){
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	70fb      	strb	r3, [r7, #3]
	if(motorSpeed <= MAXIMUM_MOTOR_RPM_SPEED){
 8000ad0:	78fb      	ldrb	r3, [r7, #3]
 8000ad2:	2b61      	cmp	r3, #97	@ 0x61
 8000ad4:	d831      	bhi.n	8000b3a <motorVidSetSpeed+0x76>
		__HAL_TIM_SET_AUTORELOAD(motor->htim,SET_ARR(motorSpeed) );
 8000ad6:	78fb      	ldrb	r3, [r7, #3]
 8000ad8:	ee07 3a90 	vmov	s15, r3
 8000adc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ae0:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000b58 <motorVidSetSpeed+0x94>
 8000ae4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ae8:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8000b5c <motorVidSetSpeed+0x98>
 8000aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000af0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000af4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b02:	ee17 2a90 	vmov	r2, s15
 8000b06:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b08:	78fb      	ldrb	r3, [r7, #3]
 8000b0a:	ee07 3a90 	vmov	s15, r3
 8000b0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b12:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000b58 <motorVidSetSpeed+0x94>
 8000b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b1a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000b5c <motorVidSetSpeed+0x98>
 8000b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000b26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b32:	ee17 2a90 	vmov	r2, s15
 8000b36:	60da      	str	r2, [r3, #12]
	}else{
		__HAL_TIM_SET_AUTORELOAD(motor->htim,SET_ARR(HANDLE_FAULT_MOTOR_RPM_SPEED) );
	}
}
 8000b38:	e008      	b.n	8000b4c <motorVidSetSpeed+0x88>
		__HAL_TIM_SET_AUTORELOAD(motor->htim,SET_ARR(HANDLE_FAULT_MOTOR_RPM_SPEED) );
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2209      	movs	r2, #9
 8000b42:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	2209      	movs	r2, #9
 8000b4a:	60da      	str	r2, [r3, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	42c20000 	.word	0x42c20000
 8000b5c:	42c60000 	.word	0x42c60000

08000b60 <motorVidSetMotorDirection>:
void motorVidSetMotorDirection(motorInitTypeDef*motor,direction motorDirection){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	70fb      	strb	r3, [r7, #3]
	//reset bit first the control direction
	HAL_GPIO_WritePin(motor->in1GPIOx, motor->in1GPIOxPin, GPIO_PIN_RESET);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	2200      	movs	r2, #0
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f000 ff01 	bl	8001980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->in2GPIOx, motor->in2GPIOxPin, GPIO_PIN_RESET);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6898      	ldr	r0, [r3, #8]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f000 fef8 	bl	8001980 <HAL_GPIO_WritePin>

	while(HAL_GPIO_ReadPin(motor->in1GPIOx, motor->in1GPIOxPin) || HAL_GPIO_ReadPin(motor->in2GPIOx, motor->in2GPIOxPin));
 8000b90:	bf00      	nop
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4610      	mov	r0, r2
 8000ba0:	f000 fed6 	bl	8001950 <HAL_GPIO_ReadPin>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1f3      	bne.n	8000b92 <motorVidSetMotorDirection+0x32>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4610      	mov	r0, r2
 8000bb8:	f000 feca 	bl	8001950 <HAL_GPIO_ReadPin>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1e7      	bne.n	8000b92 <motorVidSetMotorDirection+0x32>
	if(motorDirection == CW){
 8000bc2:	78fb      	ldrb	r3, [r7, #3]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d112      	bne.n	8000bee <motorVidSetMotorDirection+0x8e>
		HAL_GPIO_WritePin(motor->in1GPIOx, motor->in1GPIOxPin, GPIO_PIN_SET);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6818      	ldr	r0, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f000 fed3 	bl	8001980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->in2GPIOx, motor->in2GPIOxPin, GPIO_PIN_RESET);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6898      	ldr	r0, [r3, #8]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	2200      	movs	r2, #0
 8000be6:	4619      	mov	r1, r3
 8000be8:	f000 feca 	bl	8001980 <HAL_GPIO_WritePin>
	}else if(motorDirection == CCW){
		HAL_GPIO_WritePin(motor->in1GPIOx, motor->in1GPIOxPin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(motor->in2GPIOx, motor->in2GPIOxPin, GPIO_PIN_SET);
	}
}
 8000bec:	e014      	b.n	8000c18 <motorVidSetMotorDirection+0xb8>
	}else if(motorDirection == CCW){
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d111      	bne.n	8000c18 <motorVidSetMotorDirection+0xb8>
		HAL_GPIO_WritePin(motor->in1GPIOx, motor->in1GPIOxPin, GPIO_PIN_RESET);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6818      	ldr	r0, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4619      	mov	r1, r3
 8000c02:	f000 febd 	bl	8001980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->in2GPIOx, motor->in2GPIOxPin, GPIO_PIN_SET);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6898      	ldr	r0, [r3, #8]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	2201      	movs	r2, #1
 8000c12:	4619      	mov	r1, r3
 8000c14:	f000 feb4 	bl	8001980 <HAL_GPIO_WritePin>
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <motorVidStop>:
void motorVidStop(motorInitTypeDef*motor){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->in1GPIOx, motor->in1GPIOxPin, GPIO_PIN_RESET);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	4619      	mov	r1, r3
 8000c36:	f000 fea3 	bl	8001980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->in2GPIOx, motor->in2GPIOxPin, GPIO_PIN_RESET);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6898      	ldr	r0, [r3, #8]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	2200      	movs	r2, #0
 8000c46:	4619      	mov	r1, r3
 8000c48:	f000 fe9a 	bl	8001980 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->htim, motor->TIMxEnableChannel);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	699a      	ldr	r2, [r3, #24]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a1b      	ldr	r3, [r3, #32]
 8000c54:	4619      	mov	r1, r3
 8000c56:	4610      	mov	r0, r2
 8000c58:	f002 fac8 	bl	80031ec <HAL_TIM_PWM_Stop>

}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <actuatingVidInit>:
	.TIMxEnableChannel = TIM_CHANNEL_2,
	.GPIOEnPinAF = GPIO_AF1_TIM1,
};

// initialize motors from structs that defined above
void actuatingVidInit(void){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	motorVidinit(&LHS_Motor);
 8000c68:	4803      	ldr	r0, [pc, #12]	@ (8000c78 <actuatingVidInit+0x14>)
 8000c6a:	f7ff fe84 	bl	8000976 <motorVidinit>
	motorVidinit(&RHS_Motor);
 8000c6e:	4803      	ldr	r0, [pc, #12]	@ (8000c7c <actuatingVidInit+0x18>)
 8000c70:	f7ff fe81 	bl	8000976 <motorVidinit>
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000004 	.word	0x20000004
 8000c7c:	2000002c 	.word	0x2000002c

08000c80 <actuatingVidExecuteCommandTask>:
// receive command and execute it
void actuatingVidExecuteCommandTask(void*pvParameters){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	uint8_t command = 0xff;
 8000c88:	23ff      	movs	r3, #255	@ 0xff
 8000c8a:	73fb      	strb	r3, [r7, #15]
	for(;;){
		osDelay(2);
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	f003 fbc5 	bl	800441c <osDelay>
		command = receptionCharReceiveCommand();
 8000c92:	f000 f91f 	bl	8000ed4 <receptionCharReceiveCommand>
 8000c96:	4603      	mov	r3, r0
 8000c98:	73fb      	strb	r3, [r7, #15]
		switch(command){
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	2b05      	cmp	r3, #5
 8000c9e:	dc13      	bgt.n	8000cc8 <actuatingVidExecuteCommandTask+0x48>
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db4a      	blt.n	8000d3a <actuatingVidExecuteCommandTask+0xba>
 8000ca4:	2b05      	cmp	r3, #5
 8000ca6:	d848      	bhi.n	8000d3a <actuatingVidExecuteCommandTask+0xba>
 8000ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8000cb0 <actuatingVidExecuteCommandTask+0x30>)
 8000caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cae:	bf00      	nop
 8000cb0:	08000ccf 	.word	0x08000ccf
 8000cb4:	08000ce5 	.word	0x08000ce5
 8000cb8:	08000cf7 	.word	0x08000cf7
 8000cbc:	08000d09 	.word	0x08000d09
 8000cc0:	08000d1b 	.word	0x08000d1b
 8000cc4:	08000d2d 	.word	0x08000d2d
 8000cc8:	2bff      	cmp	r3, #255	@ 0xff
 8000cca:	d038      	beq.n	8000d3e <actuatingVidExecuteCommandTask+0xbe>
				motorVidStop(&RHS_Motor);
				break;
			case 0xff:
				break;
			default:
				break;
 8000ccc:	e035      	b.n	8000d3a <actuatingVidExecuteCommandTask+0xba>
				motorVidStart(&LHS_Motor,INITIAL_SPEED,CW);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	211e      	movs	r1, #30
 8000cd2:	481c      	ldr	r0, [pc, #112]	@ (8000d44 <actuatingVidExecuteCommandTask+0xc4>)
 8000cd4:	f7ff fed8 	bl	8000a88 <motorVidStart>
				motorVidStart(&RHS_Motor,INITIAL_SPEED,CW);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	211e      	movs	r1, #30
 8000cdc:	481a      	ldr	r0, [pc, #104]	@ (8000d48 <actuatingVidExecuteCommandTask+0xc8>)
 8000cde:	f7ff fed3 	bl	8000a88 <motorVidStart>
				break;
 8000ce2:	e02d      	b.n	8000d40 <actuatingVidExecuteCommandTask+0xc0>
				motorVidSetMotorDirection(&LHS_Motor,CW);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4817      	ldr	r0, [pc, #92]	@ (8000d44 <actuatingVidExecuteCommandTask+0xc4>)
 8000ce8:	f7ff ff3a 	bl	8000b60 <motorVidSetMotorDirection>
				motorVidSetMotorDirection(&RHS_Motor,CW);
 8000cec:	2100      	movs	r1, #0
 8000cee:	4816      	ldr	r0, [pc, #88]	@ (8000d48 <actuatingVidExecuteCommandTask+0xc8>)
 8000cf0:	f7ff ff36 	bl	8000b60 <motorVidSetMotorDirection>
				break;
 8000cf4:	e024      	b.n	8000d40 <actuatingVidExecuteCommandTask+0xc0>
				motorVidSetMotorDirection(&LHS_Motor,CCW);
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	4812      	ldr	r0, [pc, #72]	@ (8000d44 <actuatingVidExecuteCommandTask+0xc4>)
 8000cfa:	f7ff ff31 	bl	8000b60 <motorVidSetMotorDirection>
				motorVidSetMotorDirection(&RHS_Motor,CCW);
 8000cfe:	2101      	movs	r1, #1
 8000d00:	4811      	ldr	r0, [pc, #68]	@ (8000d48 <actuatingVidExecuteCommandTask+0xc8>)
 8000d02:	f7ff ff2d 	bl	8000b60 <motorVidSetMotorDirection>
				break;
 8000d06:	e01b      	b.n	8000d40 <actuatingVidExecuteCommandTask+0xc0>
				motorVidSetMotorDirection(&LHS_Motor,CW);
 8000d08:	2100      	movs	r1, #0
 8000d0a:	480e      	ldr	r0, [pc, #56]	@ (8000d44 <actuatingVidExecuteCommandTask+0xc4>)
 8000d0c:	f7ff ff28 	bl	8000b60 <motorVidSetMotorDirection>
				motorVidSetMotorDirection(&RHS_Motor,CCW);
 8000d10:	2101      	movs	r1, #1
 8000d12:	480d      	ldr	r0, [pc, #52]	@ (8000d48 <actuatingVidExecuteCommandTask+0xc8>)
 8000d14:	f7ff ff24 	bl	8000b60 <motorVidSetMotorDirection>
				break;
 8000d18:	e012      	b.n	8000d40 <actuatingVidExecuteCommandTask+0xc0>
				motorVidSetMotorDirection(&LHS_Motor,CCW);
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	4809      	ldr	r0, [pc, #36]	@ (8000d44 <actuatingVidExecuteCommandTask+0xc4>)
 8000d1e:	f7ff ff1f 	bl	8000b60 <motorVidSetMotorDirection>
				motorVidSetMotorDirection(&RHS_Motor,CW);
 8000d22:	2100      	movs	r1, #0
 8000d24:	4808      	ldr	r0, [pc, #32]	@ (8000d48 <actuatingVidExecuteCommandTask+0xc8>)
 8000d26:	f7ff ff1b 	bl	8000b60 <motorVidSetMotorDirection>
				break;
 8000d2a:	e009      	b.n	8000d40 <actuatingVidExecuteCommandTask+0xc0>
				motorVidStop(&LHS_Motor);
 8000d2c:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <actuatingVidExecuteCommandTask+0xc4>)
 8000d2e:	f7ff ff77 	bl	8000c20 <motorVidStop>
				motorVidStop(&RHS_Motor);
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <actuatingVidExecuteCommandTask+0xc8>)
 8000d34:	f7ff ff74 	bl	8000c20 <motorVidStop>
				break;
 8000d38:	e002      	b.n	8000d40 <actuatingVidExecuteCommandTask+0xc0>
				break;
 8000d3a:	bf00      	nop
 8000d3c:	e7a6      	b.n	8000c8c <actuatingVidExecuteCommandTask+0xc>
				break;
 8000d3e:	bf00      	nop
		osDelay(2);
 8000d40:	e7a4      	b.n	8000c8c <actuatingVidExecuteCommandTask+0xc>
 8000d42:	bf00      	nop
 8000d44:	20000004 	.word	0x20000004
 8000d48:	2000002c 	.word	0x2000002c

08000d4c <actuatingVidBegin>:

		}
	}
}
// create actuating task
void actuatingVidBegin(){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	@ 0x28
 8000d50:	af00      	add	r7, sp, #0
	//define freeRTOS Tasks Parameters
	osThreadId_t executeCommandTaskHandle;
	const osThreadAttr_t executeCommandTask_attributes = {
 8000d52:	463b      	mov	r3, r7
 8000d54:	2224      	movs	r2, #36	@ 0x24
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f005 fc23 	bl	80065a4 <memset>
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <actuatingVidBegin+0x38>)
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	2328      	movs	r3, #40	@ 0x28
 8000d6a:	61bb      	str	r3, [r7, #24]
	  .name = "exeCommand",
	  .stack_size = 128 * 4,
	  .priority = (osPriority_t) osPriorityHigh,
	};
	executeCommandTaskHandle = osThreadNew(actuatingVidExecuteCommandTask, NULL, &executeCommandTask_attributes);
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	461a      	mov	r2, r3
 8000d70:	2100      	movs	r1, #0
 8000d72:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <actuatingVidBegin+0x3c>)
 8000d74:	f003 fac0 	bl	80042f8 <osThreadNew>
 8000d78:	6278      	str	r0, [r7, #36]	@ 0x24
}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	@ 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	0800678c 	.word	0x0800678c
 8000d88:	08000c81 	.word	0x08000c81

08000d8c <communicationVidInit>:
#include "stm32f4xx_hal_gpio.h"
#include "stm32f4xx_hal_spi.h"
#include "./communication.h"

SPI_HandleTypeDef hspi2 = {0};
void communicationVidInit(){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
	// initialize GPIO PINS to its alternate function
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = SCLK_PIN | MISO_PIN | MOSI_PIN;
 8000da0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000da4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = SPI_ALTERNATE_FUNCTION;
 8000db2:	2305      	movs	r3, #5
 8000db4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SPI_PORT, &GPIO_InitStruct);
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	4619      	mov	r1, r3
 8000dba:	482c      	ldr	r0, [pc, #176]	@ (8000e6c <communicationVidInit+0xe0>)
 8000dbc:	f000 fc44 	bl	8001648 <HAL_GPIO_Init>

	//initialize ss pin  as output and trigger pin as input
	GPIO_InitStruct.Pin = SS_PIN;
 8000dc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dc4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(SPI_PORT, &GPIO_InitStruct);
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4826      	ldr	r0, [pc, #152]	@ (8000e6c <communicationVidInit+0xe0>)
 8000dd4:	f000 fc38 	bl	8001648 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = TRIGGER_PIN;
 8000dd8:	2320      	movs	r3, #32
 8000dda:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(SPI_PORT, &GPIO_InitStruct);
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	4619      	mov	r1, r3
 8000de4:	4821      	ldr	r0, [pc, #132]	@ (8000e6c <communicationVidInit+0xe0>)
 8000de6:	f000 fc2f 	bl	8001648 <HAL_GPIO_Init>

	//deselect slave by dafult and pull trigger low
	HAL_GPIO_WritePin(SPI_PORT,TRIGGER_PIN, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2120      	movs	r1, #32
 8000dee:	481f      	ldr	r0, [pc, #124]	@ (8000e6c <communicationVidInit+0xe0>)
 8000df0:	f000 fdc6 	bl	8001980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_PORT, SS_PIN, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dfa:	481c      	ldr	r0, [pc, #112]	@ (8000e6c <communicationVidInit+0xe0>)
 8000dfc:	f000 fdc0 	bl	8001980 <HAL_GPIO_WritePin>

	//congigure spi as master
	hspi2.Instance = COMMUNICATION_SPI;
 8000e00:	4b1b      	ldr	r3, [pc, #108]	@ (8000e70 <communicationVidInit+0xe4>)
 8000e02:	4a1c      	ldr	r2, [pc, #112]	@ (8000e74 <communicationVidInit+0xe8>)
 8000e04:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e06:	4b1a      	ldr	r3, [pc, #104]	@ (8000e70 <communicationVidInit+0xe4>)
 8000e08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e0c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <communicationVidInit+0xe4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = DATA_SIZE;
 8000e14:	4b16      	ldr	r3, [pc, #88]	@ (8000e70 <communicationVidInit+0xe4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <communicationVidInit+0xe4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e20:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <communicationVidInit+0xe4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e26:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <communicationVidInit+0xe4>)
 8000e28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e2c:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = BAUD_RATE_PRESCALER;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <communicationVidInit+0xe4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = ENDIAN;
 8000e34:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <communicationVidInit+0xe4>)
 8000e36:	2280      	movs	r2, #128	@ 0x80
 8000e38:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e70 <communicationVidInit+0xe4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e40:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <communicationVidInit+0xe4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000e46:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <communicationVidInit+0xe4>)
 8000e48:	220a      	movs	r2, #10
 8000e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_SPI_Init(&hspi2);
 8000e4c:	4808      	ldr	r0, [pc, #32]	@ (8000e70 <communicationVidInit+0xe4>)
 8000e4e:	f001 fa27 	bl	80022a0 <HAL_SPI_Init>
	__HAL_SPI_ENABLE(&hspi2);
 8000e52:	4b07      	ldr	r3, [pc, #28]	@ (8000e70 <communicationVidInit+0xe4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <communicationVidInit+0xe4>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e60:	601a      	str	r2, [r3, #0]
}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40020400 	.word	0x40020400
 8000e70:	20000204 	.word	0x20000204
 8000e74:	40003800 	.word	0x40003800

08000e78 <communicationVidSelectSlave>:
void communicationVidSelectSlave(){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_PORT, SS_PIN, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e82:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <communicationVidSelectSlave+0x14>)
 8000e84:	f000 fd7c 	bl	8001980 <HAL_GPIO_WritePin>
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40020400 	.word	0x40020400

08000e90 <communicationVidDeselectSlave>:
void communicationVidDeselectSlave(){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000e94:	bf00      	nop
 8000e96:	4807      	ldr	r0, [pc, #28]	@ (8000eb4 <communicationVidDeselectSlave+0x24>)
 8000e98:	f001 fe91 	bl	8002bbe <HAL_SPI_GetState>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d1f9      	bne.n	8000e96 <communicationVidDeselectSlave+0x6>
	HAL_GPIO_WritePin(SPI_PORT, SS_PIN, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ea8:	4803      	ldr	r0, [pc, #12]	@ (8000eb8 <communicationVidDeselectSlave+0x28>)
 8000eaa:	f000 fd69 	bl	8001980 <HAL_GPIO_WritePin>
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000204 	.word	0x20000204
 8000eb8:	40020400 	.word	0x40020400

08000ebc <communicationCharGetTriggerPinValue>:
uint8_t communicationCharGetTriggerPinValue(){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(SPI_PORT, TRIGGER_PIN);
 8000ec0:	2120      	movs	r1, #32
 8000ec2:	4803      	ldr	r0, [pc, #12]	@ (8000ed0 <communicationCharGetTriggerPinValue+0x14>)
 8000ec4:	f000 fd44 	bl	8001950 <HAL_GPIO_ReadPin>
 8000ec8:	4603      	mov	r3, r0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40020400 	.word	0x40020400

08000ed4 <receptionCharReceiveCommand>:
#include "stm32f4xx_hal_spi.h"
#include "../../communication.h"
#include "./reception.h"
extern SPI_HandleTypeDef hspi2 ;

uint8_t receptionCharReceiveCommand(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
	uint8_t command;
	if(communicationCharGetTriggerPinValue() == RESET){
 8000eda:	f7ff ffef 	bl	8000ebc <communicationCharGetTriggerPinValue>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d101      	bne.n	8000ee8 <receptionCharReceiveCommand+0x14>
		  return 0xff;
 8000ee4:	23ff      	movs	r3, #255	@ 0xff
 8000ee6:	e013      	b.n	8000f10 <receptionCharReceiveCommand+0x3c>
	}
	communicationVidSelectSlave();
 8000ee8:	f7ff ffc6 	bl	8000e78 <communicationVidSelectSlave>
	while(__HAL_SPI_GET_FLAG(&hspi2, SPI_FLAG_RXNE) != SET);
 8000eec:	bf00      	nop
 8000eee:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <receptionCharReceiveCommand+0x44>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d1f8      	bne.n	8000eee <receptionCharReceiveCommand+0x1a>
	HAL_SPI_Receive(&hspi2, &command, 1, HAL_MAX_DELAY);
 8000efc:	1df9      	adds	r1, r7, #7
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	2201      	movs	r2, #1
 8000f04:	4804      	ldr	r0, [pc, #16]	@ (8000f18 <receptionCharReceiveCommand+0x44>)
 8000f06:	f001 fb98 	bl	800263a <HAL_SPI_Receive>
	communicationVidDeselectSlave();
 8000f0a:	f7ff ffc1 	bl	8000e90 <communicationVidDeselectSlave>
	return command;
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000204 	.word	0x20000204

08000f1c <serializeSensorData>:
 *      Author: ASHRY
 */
#include <stdint.h>
#include "../typesdefinition/typedefinitions.h"
#include "./serialization.h"
uint8_t* serializeSensorData(sensorTypeDef* sensorData){
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	uint8_t* serializedData = (uint8_t*) sensorData;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	60fb      	str	r3, [r7, #12]
	return serializedData;
 8000f28:	68fb      	ldr	r3, [r7, #12]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <transmissionVidSendSensorData>:
#include "stm32f4xx_hal_spi.h"
#include "../typesdefinition/typedefinitions.h"
#include "../formatter/serialization.h"
#include "./transmission.h"
extern SPI_HandleTypeDef hspi2;
void transmissionVidSendSensorData(sensorTypeDef*sensorData){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	uint8_t* serialData = serializeSensorData(sensorData);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ffeb 	bl	8000f1c <serializeSensorData>
 8000f46:	60f8      	str	r0, [r7, #12]
	HAL_SPI_Transmit(&hspi2, serialData, SENSOR_DATA_SIZE, HAL_MAX_DELAY);
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	68f9      	ldr	r1, [r7, #12]
 8000f50:	4803      	ldr	r0, [pc, #12]	@ (8000f60 <transmissionVidSendSensorData+0x28>)
 8000f52:	f001 fa2e 	bl	80023b2 <HAL_SPI_Transmit>
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000204 	.word	0x20000204

08000f64 <transmissionVidSendSingleValue>:
void transmissionVidSendSingleValue(uint8_t value){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
	uint8_t val = value;
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &val, 1 , HAL_MAX_DELAY);
 8000f72:	f107 010f 	add.w	r1, r7, #15
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4803      	ldr	r0, [pc, #12]	@ (8000f8c <transmissionVidSendSingleValue+0x28>)
 8000f7e:	f001 fa18 	bl	80023b2 <HAL_SPI_Transmit>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000204 	.word	0x20000204

08000f90 <transmissionVidSendStart>:
void transmissionVidSendStart(){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	transmissionVidSendSingleValue(START_FRAME);
 8000f94:	20a0      	movs	r0, #160	@ 0xa0
 8000f96:	f7ff ffe5 	bl	8000f64 <transmissionVidSendSingleValue>

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <transmissionVidSendEnd>:
void transmissionVidSendEnd(){
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
	transmissionVidSendSingleValue(END_FRAME);
 8000fa2:	20b0      	movs	r0, #176	@ 0xb0
 8000fa4:	f7ff ffde 	bl	8000f64 <transmissionVidSendSingleValue>

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <ultraSonicVidInit>:
 */
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_gpio.h"
#include "stm32f4xx_hal_tim.h"
#include "./ultraSonic.h"
void ultraSonicVidInit(ultraSonicInitTypeDef* sensor) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b092      	sub	sp, #72	@ 0x48
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc4:	f107 0318 	add.w	r3, r7, #24
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
 8000fd4:	615a      	str	r2, [r3, #20]
 8000fd6:	619a      	str	r2, [r3, #24]
    TIM_IC_InitTypeDef sConfigIC = {0};
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]

    // === Trigger Pin Init ===
    GPIO_InitStruct.Pin = sensor->GPIOxTriggerPin;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = sensor->GPIOxTriggerPinAF;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(sensor->GPIOxTrigger, &GPIO_InitStruct);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f000 fb1d 	bl	8001648 <HAL_GPIO_Init>

    // Timer Base for PWM (Trigger)
    sensor->htimTrigger->Instance = sensor->TIMxTrigger;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	6992      	ldr	r2, [r2, #24]
 8001016:	601a      	str	r2, [r3, #0]
    sensor->htimTrigger->Init.Prescaler = GET_PSC();
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	220f      	movs	r2, #15
 800101e:	605a      	str	r2, [r3, #4]
    sensor->htimTrigger->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
    sensor->htimTrigger->Init.ClockDivision = TIMER_CLOCK_DIVISON;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
    sensor->htimTrigger->Init.CounterMode  = TIMER_COUNTER_MODE;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
    sensor->htimTrigger->Init.Period = GET_RESET_VALUE();
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001040:	60da      	str	r2, [r3, #12]
    HAL_TIM_PWM_Init(sensor->htimTrigger);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	4618      	mov	r0, r3
 8001048:	f001 ffc6 	bl	8002fd8 <HAL_TIM_PWM_Init>

    sConfigOC.OCMode = TIMER_OUTPUTCOMPARE_MODE;
 800104c:	2360      	movs	r3, #96	@ 0x60
 800104e:	61bb      	str	r3, [r7, #24]
    sConfigOC.Pulse = GET_ARR();
 8001050:	2309      	movs	r3, #9
 8001052:	61fb      	str	r3, [r7, #28]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_TIM_PWM_ConfigChannel(sensor->htimTrigger, &sConfigOC, sensor->TIMxTrigger_Channel);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a18      	ldr	r0, [r3, #32]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001064:	f107 0318 	add.w	r3, r7, #24
 8001068:	4619      	mov	r1, r3
 800106a:	f002 fc23 	bl	80038b4 <HAL_TIM_PWM_ConfigChannel>

    // === Echo Pin Init ===
    GPIO_InitStruct.Pin = sensor->GPIOxEchoPin;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Alternate = sensor->GPIOxEchoPinAF;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(sensor->GPIOxEcho, &GPIO_InitStruct);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fadf 	bl	8001648 <HAL_GPIO_Init>

    // Timer Base for Echo Capture
    sensor->htimEcho->Instance = sensor->TIMxEcho;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	69d2      	ldr	r2, [r2, #28]
 8001092:	601a      	str	r2, [r3, #0]
    sensor->htimEcho->Channel = ECHO_CHANNEL;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001098:	2200      	movs	r2, #0
 800109a:	771a      	strb	r2, [r3, #28]
    sensor->htimEcho->Init.Prescaler = GET_PSC();
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a0:	220f      	movs	r2, #15
 80010a2:	605a      	str	r2, [r3, #4]
    sensor->htimEcho->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
    sensor->htimEcho->Init.ClockDivision = TIMER_CLOCK_DIVISON;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
    sensor->htimEcho->Init.CounterMode  = TIMER_COUNTER_MODE;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
    sensor->htimEcho->Init.Period =GET_RESET_VALUE();
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c0:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80010c4:	60da      	str	r2, [r3, #12]
    HAL_TIM_IC_Init(sensor->htimEcho);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 f8f2 	bl	80032b4 <HAL_TIM_IC_Init>

    // Input Capture Channel Config
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010d0:	230a      	movs	r3, #10
 80010d2:	60bb      	str	r3, [r7, #8]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010d4:	2301      	movs	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
    sConfigIC.ICFilter = DIGITAL_FILTER;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
    HAL_TIM_IC_ConfigChannel(sensor->htimEcho, &sConfigIC, ECHO_CHANNEL);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e4:	f107 0108 	add.w	r1, r7, #8
 80010e8:	2200      	movs	r2, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 fb46 	bl	800377c <HAL_TIM_IC_ConfigChannel>

    // Enable interrupts
    __HAL_TIM_ENABLE_IT(sensor->htimEcho, IT_CC_CHANNEL);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0202 	orr.w	r2, r2, #2
 8001102:	60da      	str	r2, [r3, #12]
    HAL_NVIC_SetPriority(sensor->EchoIRQ, ECHO_PRIORITY, 0);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 800110a:	2200      	movs	r2, #0
 800110c:	2105      	movs	r1, #5
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fa70 	bl	80015f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(sensor->EchoIRQ);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fa86 	bl	800162c <HAL_NVIC_EnableIRQ>
}
 8001120:	bf00      	nop
 8001122:	3748      	adds	r7, #72	@ 0x48
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <ultraSonicVidStart>:

void ultraSonicVidStart(ultraSonicInitTypeDef* sensor) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(sensor->htimTrigger, sensor->TIMxTrigger_Channel);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1a      	ldr	r2, [r3, #32]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001138:	4619      	mov	r1, r3
 800113a:	4610      	mov	r0, r2
 800113c:	f001 ffa6 	bl	800308c <HAL_TIM_PWM_Start>
    HAL_TIM_IC_Start_IT(sensor->htimEcho, ECHO_CHANNEL);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f002 f90e 	bl	8003368 <HAL_TIM_IC_Start_IT>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <ultraSonicFloatGetDistance>:

float ultraSonicFloatGetDistance(uint32_t* firstICVal, uint32_t* secondICVal) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
	uint32_t difference = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
	float distance = 0.00;
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
	difference = (*secondICVal) - (*firstICVal);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	60fb      	str	r3, [r7, #12]
	distance = ((SOUND_SPEED)*(difference*(1/TICK_FREQUENCY)))/2; // in meters
 8001174:	f04f 0300 	mov.w	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
	return distance;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	ee07 3a90 	vmov	s15, r3
}
 8001180:	eeb0 0a67 	vmov.f32	s0, s15
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <ultraSonicInputCaptureHandler>:

void ultraSonicInputCaptureHandler(TIM_HandleTypeDef* htim, uint32_t* firstICVal, uint32_t* secondICVal, float* distance, uint8_t* flag) {
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	603b      	str	r3, [r7, #0]
	uint32_t capturedValue = HAL_TIM_ReadCapturedValue(htim, ECHO_CHANNEL);
 800119c:	2100      	movs	r1, #0
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f002 fc4a 	bl	8003a38 <HAL_TIM_ReadCapturedValue>
 80011a4:	6178      	str	r0, [r7, #20]
    if (*flag == FIRST_CAPTURE) {
 80011a6:	6a3b      	ldr	r3, [r7, #32]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d106      	bne.n	80011bc <ultraSonicInputCaptureHandler+0x2e>
    	*firstICVal = capturedValue;
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	601a      	str	r2, [r3, #0]
        *flag = SECOND_CAPTURE;
 80011b4:	6a3b      	ldr	r3, [r7, #32]
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
        *flag = FIRST_CAPTURE;
        *distance = ultraSonicFloatGetDistance(firstICVal, secondICVal);
        *firstICVal =0;
        *secondICVal = 0;
    }
}
 80011ba:	e014      	b.n	80011e6 <ultraSonicInputCaptureHandler+0x58>
        *secondICVal = capturedValue;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	601a      	str	r2, [r3, #0]
        *flag = FIRST_CAPTURE;
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
        *distance = ultraSonicFloatGetDistance(firstICVal, secondICVal);
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	68b8      	ldr	r0, [r7, #8]
 80011cc:	f7ff ffc2 	bl	8001154 <ultraSonicFloatGetDistance>
 80011d0:	eef0 7a40 	vmov.f32	s15, s0
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	edc3 7a00 	vstr	s15, [r3]
        *firstICVal =0;
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
        *secondICVal = 0;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <ultraSonicCheckOverFlow>:
void ultraSonicCheckOverFlow(TIM_HandleTypeDef* htim, uint8_t* flag) {
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	6039      	str	r1, [r7, #0]
    if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET) {
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b01      	cmp	r3, #1
 8001204:	d107      	bne.n	8001216 <ultraSonicCheckOverFlow+0x28>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f06f 0201 	mvn.w	r2, #1
 800120e:	611a      	str	r2, [r3, #16]
        *flag = FIRST_CAPTURE;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
    }
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <HAL_TIM_IC_CaptureCallback>:
sensorTypeDef FRONT_sensorData 	= {1,4.00};
sensorTypeDef LHS_sensorData 	= {2,4.00};
sensorTypeDef RHS_sensorData 	= {3,4.00};
//input capture unit handlers
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af02      	add	r7, sp, #8
 800122a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a15      	ldr	r2, [pc, #84]	@ (8001288 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d108      	bne.n	8001248 <HAL_TIM_IC_CaptureCallback+0x24>
        ultraSonicInputCaptureHandler(&htim3,&FRONT_firstCap,&FRONT_secondCap,(float*)(&FRONT_sensorData.sensorData),&FRONT_flag);
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <HAL_TIM_IC_CaptureCallback+0x68>)
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <HAL_TIM_IC_CaptureCallback+0x6c>)
 800123c:	4a15      	ldr	r2, [pc, #84]	@ (8001294 <HAL_TIM_IC_CaptureCallback+0x70>)
 800123e:	4916      	ldr	r1, [pc, #88]	@ (8001298 <HAL_TIM_IC_CaptureCallback+0x74>)
 8001240:	4816      	ldr	r0, [pc, #88]	@ (800129c <HAL_TIM_IC_CaptureCallback+0x78>)
 8001242:	f7ff ffa4 	bl	800118e <ultraSonicInputCaptureHandler>
    }else if (htim->Instance == TIM4){
        ultraSonicInputCaptureHandler(&htim4,&LHS_firstCap,&LHS_secondCap,(float*)(&LHS_sensorData.sensorData),&LHS_flag);
    }else if (htim->Instance == TIM5){
        ultraSonicInputCaptureHandler(&htim5,&RHS_firstCap,&RHS_secondCap,(float*)(&RHS_sensorData.sensorData),&RHS_flag);
    }
}
 8001246:	e01a      	b.n	800127e <HAL_TIM_IC_CaptureCallback+0x5a>
    }else if (htim->Instance == TIM4){
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a14      	ldr	r2, [pc, #80]	@ (80012a0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d108      	bne.n	8001264 <HAL_TIM_IC_CaptureCallback+0x40>
        ultraSonicInputCaptureHandler(&htim4,&LHS_firstCap,&LHS_secondCap,(float*)(&LHS_sensorData.sensorData),&LHS_flag);
 8001252:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001258:	4a14      	ldr	r2, [pc, #80]	@ (80012ac <HAL_TIM_IC_CaptureCallback+0x88>)
 800125a:	4915      	ldr	r1, [pc, #84]	@ (80012b0 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800125c:	4815      	ldr	r0, [pc, #84]	@ (80012b4 <HAL_TIM_IC_CaptureCallback+0x90>)
 800125e:	f7ff ff96 	bl	800118e <ultraSonicInputCaptureHandler>
}
 8001262:	e00c      	b.n	800127e <HAL_TIM_IC_CaptureCallback+0x5a>
    }else if (htim->Instance == TIM5){
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a13      	ldr	r2, [pc, #76]	@ (80012b8 <HAL_TIM_IC_CaptureCallback+0x94>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d107      	bne.n	800127e <HAL_TIM_IC_CaptureCallback+0x5a>
        ultraSonicInputCaptureHandler(&htim5,&RHS_firstCap,&RHS_secondCap,(float*)(&RHS_sensorData.sensorData),&RHS_flag);
 800126e:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <HAL_TIM_IC_CaptureCallback+0x98>)
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001274:	4a13      	ldr	r2, [pc, #76]	@ (80012c4 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001276:	4914      	ldr	r1, [pc, #80]	@ (80012c8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001278:	4814      	ldr	r0, [pc, #80]	@ (80012cc <HAL_TIM_IC_CaptureCallback+0xa8>)
 800127a:	f7ff ff88 	bl	800118e <ultraSonicInputCaptureHandler>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40000400 	.word	0x40000400
 800128c:	20000396 	.word	0x20000396
 8001290:	200000e8 	.word	0x200000e8
 8001294:	20000390 	.word	0x20000390
 8001298:	2000038c 	.word	0x2000038c
 800129c:	200002a4 	.word	0x200002a4
 80012a0:	40000800 	.word	0x40000800
 80012a4:	20000394 	.word	0x20000394
 80012a8:	200000f0 	.word	0x200000f0
 80012ac:	20000380 	.word	0x20000380
 80012b0:	2000037c 	.word	0x2000037c
 80012b4:	200002ec 	.word	0x200002ec
 80012b8:	40000c00 	.word	0x40000c00
 80012bc:	20000395 	.word	0x20000395
 80012c0:	200000f8 	.word	0x200000f8
 80012c4:	20000388 	.word	0x20000388
 80012c8:	20000384 	.word	0x20000384
 80012cc:	20000334 	.word	0x20000334

080012d0 <perceptionVidCheckOverFlowTask>:
void perceptionVidCheckOverFlowTask(void*pvParameters){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	for(;;){
		osDelay(1);
 80012d8:	2001      	movs	r0, #1
 80012da:	f003 f89f 	bl	800441c <osDelay>
		ultraSonicCheckOverFlow(&htim3,&FRONT_flag);
 80012de:	4907      	ldr	r1, [pc, #28]	@ (80012fc <perceptionVidCheckOverFlowTask+0x2c>)
 80012e0:	4807      	ldr	r0, [pc, #28]	@ (8001300 <perceptionVidCheckOverFlowTask+0x30>)
 80012e2:	f7ff ff84 	bl	80011ee <ultraSonicCheckOverFlow>
		ultraSonicCheckOverFlow(&htim4,&LHS_flag);
 80012e6:	4907      	ldr	r1, [pc, #28]	@ (8001304 <perceptionVidCheckOverFlowTask+0x34>)
 80012e8:	4807      	ldr	r0, [pc, #28]	@ (8001308 <perceptionVidCheckOverFlowTask+0x38>)
 80012ea:	f7ff ff80 	bl	80011ee <ultraSonicCheckOverFlow>
		ultraSonicCheckOverFlow(&htim5,&RHS_flag);
 80012ee:	4907      	ldr	r1, [pc, #28]	@ (800130c <perceptionVidCheckOverFlowTask+0x3c>)
 80012f0:	4807      	ldr	r0, [pc, #28]	@ (8001310 <perceptionVidCheckOverFlowTask+0x40>)
 80012f2:	f7ff ff7c 	bl	80011ee <ultraSonicCheckOverFlow>
		osDelay(1);
 80012f6:	bf00      	nop
 80012f8:	e7ee      	b.n	80012d8 <perceptionVidCheckOverFlowTask+0x8>
 80012fa:	bf00      	nop
 80012fc:	20000396 	.word	0x20000396
 8001300:	200002a4 	.word	0x200002a4
 8001304:	20000394 	.word	0x20000394
 8001308:	200002ec 	.word	0x200002ec
 800130c:	20000395 	.word	0x20000395
 8001310:	20000334 	.word	0x20000334

08001314 <perceptionVidSendSensorsDataTask>:
	}
}
void perceptionVidSendSensorsDataTask(void*pvParameters){
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	for(;;){
		osDelay(50);
 800131c:	2032      	movs	r0, #50	@ 0x32
 800131e:	f003 f87d 	bl	800441c <osDelay>
		communicationVidSelectSlave();
 8001322:	f7ff fda9 	bl	8000e78 <communicationVidSelectSlave>
		transmissionVidSendStart();
 8001326:	f7ff fe33 	bl	8000f90 <transmissionVidSendStart>
		transmissionVidSendSensorData(&FRONT_sensorData);
 800132a:	4807      	ldr	r0, [pc, #28]	@ (8001348 <perceptionVidSendSensorsDataTask+0x34>)
 800132c:	f7ff fe04 	bl	8000f38 <transmissionVidSendSensorData>
		transmissionVidSendSensorData(&LHS_sensorData);
 8001330:	4806      	ldr	r0, [pc, #24]	@ (800134c <perceptionVidSendSensorsDataTask+0x38>)
 8001332:	f7ff fe01 	bl	8000f38 <transmissionVidSendSensorData>
		transmissionVidSendSensorData(&RHS_sensorData);
 8001336:	4806      	ldr	r0, [pc, #24]	@ (8001350 <perceptionVidSendSensorsDataTask+0x3c>)
 8001338:	f7ff fdfe 	bl	8000f38 <transmissionVidSendSensorData>
		transmissionVidSendEnd();
 800133c:	f7ff fe2f 	bl	8000f9e <transmissionVidSendEnd>
		communicationVidDeselectSlave();
 8001340:	f7ff fda6 	bl	8000e90 <communicationVidDeselectSlave>
		osDelay(50);
 8001344:	bf00      	nop
 8001346:	e7e9      	b.n	800131c <perceptionVidSendSensorsDataTask+0x8>
 8001348:	200000e4 	.word	0x200000e4
 800134c:	200000ec 	.word	0x200000ec
 8001350:	200000f4 	.word	0x200000f4

08001354 <perceptionVidInit>:
	}
}
void perceptionVidInit(void){
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	//init sensors
	ultraSonicVidInit(&LHS_ultraSonic);
 8001358:	4809      	ldr	r0, [pc, #36]	@ (8001380 <perceptionVidInit+0x2c>)
 800135a:	f7ff fe27 	bl	8000fac <ultraSonicVidInit>
	ultraSonicVidInit(&RHS_ultraSonic);
 800135e:	4809      	ldr	r0, [pc, #36]	@ (8001384 <perceptionVidInit+0x30>)
 8001360:	f7ff fe24 	bl	8000fac <ultraSonicVidInit>
	ultraSonicVidInit(&FRONT_ultraSonic);
 8001364:	4808      	ldr	r0, [pc, #32]	@ (8001388 <perceptionVidInit+0x34>)
 8001366:	f7ff fe21 	bl	8000fac <ultraSonicVidInit>
	//start sensing
	ultraSonicVidStart(&FRONT_ultraSonic);
 800136a:	4807      	ldr	r0, [pc, #28]	@ (8001388 <perceptionVidInit+0x34>)
 800136c:	f7ff fedc 	bl	8001128 <ultraSonicVidStart>
	ultraSonicVidStart(&LHS_ultraSonic);
 8001370:	4803      	ldr	r0, [pc, #12]	@ (8001380 <perceptionVidInit+0x2c>)
 8001372:	f7ff fed9 	bl	8001128 <ultraSonicVidStart>
	ultraSonicVidStart(&RHS_ultraSonic);
 8001376:	4803      	ldr	r0, [pc, #12]	@ (8001384 <perceptionVidInit+0x30>)
 8001378:	f7ff fed6 	bl	8001128 <ultraSonicVidStart>
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000084 	.word	0x20000084
 8001384:	200000b4 	.word	0x200000b4
 8001388:	20000054 	.word	0x20000054

0800138c <perceptionVidBegin>:
void perceptionVidBegin(void){
 800138c:	b580      	push	{r7, lr}
 800138e:	b094      	sub	sp, #80	@ 0x50
 8001390:	af00      	add	r7, sp, #0
	//define freeRTOS Tasks Parameters
	osThreadId_t checkOVFTaskHandle;
	const osThreadAttr_t checkOVFTask_attributes = {
 8001392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001396:	2224      	movs	r2, #36	@ 0x24
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f005 f902 	bl	80065a4 <memset>
 80013a0:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <perceptionVidBegin+0x64>)
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80013aa:	2318      	movs	r3, #24
 80013ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  .name = "OVFTask",
	  .stack_size = 128 * 4,
	  .priority = (osPriority_t) osPriorityNormal,
	};
	osThreadId_t sendDataTaskHandle;
	const osThreadAttr_t sendDataTask_attributes = {
 80013ae:	463b      	mov	r3, r7
 80013b0:	2224      	movs	r2, #36	@ 0x24
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f005 f8f5 	bl	80065a4 <memset>
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <perceptionVidBegin+0x68>)
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	2308      	movs	r3, #8
 80013c6:	61bb      	str	r3, [r7, #24]
	  .name = "sendDataTask",
	  .stack_size = 128 * 4,
	  .priority = (osPriority_t) osPriorityLow,
	};
	//create tasks
	checkOVFTaskHandle = osThreadNew(perceptionVidCheckOverFlowTask, NULL, &checkOVFTask_attributes);
 80013c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013cc:	461a      	mov	r2, r3
 80013ce:	2100      	movs	r1, #0
 80013d0:	4809      	ldr	r0, [pc, #36]	@ (80013f8 <perceptionVidBegin+0x6c>)
 80013d2:	f002 ff91 	bl	80042f8 <osThreadNew>
 80013d6:	64f8      	str	r0, [r7, #76]	@ 0x4c
	sendDataTaskHandle = osThreadNew(perceptionVidSendSensorsDataTask, NULL, &sendDataTask_attributes);
 80013d8:	463b      	mov	r3, r7
 80013da:	461a      	mov	r2, r3
 80013dc:	2100      	movs	r1, #0
 80013de:	4807      	ldr	r0, [pc, #28]	@ (80013fc <perceptionVidBegin+0x70>)
 80013e0:	f002 ff8a 	bl	80042f8 <osThreadNew>
 80013e4:	64b8      	str	r0, [r7, #72]	@ 0x48

}
 80013e6:	bf00      	nop
 80013e8:	3750      	adds	r7, #80	@ 0x50
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	08006798 	.word	0x08006798
 80013f4:	080067a0 	.word	0x080067a0
 80013f8:	080012d1 	.word	0x080012d1
 80013fc:	08001315 	.word	0x08001315

08001400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001404:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <HAL_Init+0x40>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0d      	ldr	r2, [pc, #52]	@ (8001440 <HAL_Init+0x40>)
 800140a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800140e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001410:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <HAL_Init+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0a      	ldr	r2, [pc, #40]	@ (8001440 <HAL_Init+0x40>)
 8001416:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800141a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800141c:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a07      	ldr	r2, [pc, #28]	@ (8001440 <HAL_Init+0x40>)
 8001422:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001426:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001428:	2003      	movs	r0, #3
 800142a:	f000 f8d8 	bl	80015de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142e:	200f      	movs	r0, #15
 8001430:	f7ff f9ce 	bl	80007d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001434:	f7ff f958 	bl	80006e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023c00 	.word	0x40023c00

08001444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <HAL_IncTick+0x20>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <HAL_IncTick+0x24>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	4a04      	ldr	r2, [pc, #16]	@ (8001468 <HAL_IncTick+0x24>)
 8001456:	6013      	str	r3, [r2, #0]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000100 	.word	0x20000100
 8001468:	20000398 	.word	0x20000398

0800146c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b03      	ldr	r3, [pc, #12]	@ (8001480 <HAL_GetTick+0x14>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000398 	.word	0x20000398

08001484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014a0:	4013      	ands	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b6:	4a04      	ldr	r2, [pc, #16]	@ (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <__NVIC_GetPriorityGrouping+0x18>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	f003 0307 	and.w	r3, r3, #7
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db0b      	blt.n	8001512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	f003 021f 	and.w	r2, r3, #31
 8001500:	4907      	ldr	r1, [pc, #28]	@ (8001520 <__NVIC_EnableIRQ+0x38>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	2001      	movs	r0, #1
 800150a:	fa00 f202 	lsl.w	r2, r0, r2
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000e100 	.word	0xe000e100

08001524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	db0a      	blt.n	800154e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	490c      	ldr	r1, [pc, #48]	@ (8001570 <__NVIC_SetPriority+0x4c>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	440b      	add	r3, r1
 8001548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800154c:	e00a      	b.n	8001564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4908      	ldr	r1, [pc, #32]	@ (8001574 <__NVIC_SetPriority+0x50>)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	3b04      	subs	r3, #4
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	440b      	add	r3, r1
 8001562:	761a      	strb	r2, [r3, #24]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000e100 	.word	0xe000e100
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	@ 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf28      	it	cs
 8001596:	2304      	movcs	r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d902      	bls.n	80015a8 <NVIC_EncodePriority+0x30>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3b03      	subs	r3, #3
 80015a6:	e000      	b.n	80015aa <NVIC_EncodePriority+0x32>
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43d9      	mvns	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	4313      	orrs	r3, r2
         );
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	@ 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ff4c 	bl	8001484 <__NVIC_SetPriorityGrouping>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001606:	f7ff ff61 	bl	80014cc <__NVIC_GetPriorityGrouping>
 800160a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	6978      	ldr	r0, [r7, #20]
 8001612:	f7ff ffb1 	bl	8001578 <NVIC_EncodePriority>
 8001616:	4602      	mov	r2, r0
 8001618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161c:	4611      	mov	r1, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff ff80 	bl	8001524 <__NVIC_SetPriority>
}
 8001624:	bf00      	nop
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff54 	bl	80014e8 <__NVIC_EnableIRQ>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	@ 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	e159      	b.n	8001918 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001664:	2201      	movs	r2, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	429a      	cmp	r2, r3
 800167e:	f040 8148 	bne.w	8001912 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d005      	beq.n	800169a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001696:	2b02      	cmp	r3, #2
 8001698:	d130      	bne.n	80016fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	2203      	movs	r2, #3
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016d0:	2201      	movs	r2, #1
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 0201 	and.w	r2, r3, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b03      	cmp	r3, #3
 8001706:	d017      	beq.n	8001738 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d123      	bne.n	800178c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	08da      	lsrs	r2, r3, #3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3208      	adds	r2, #8
 800174c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	220f      	movs	r2, #15
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	08da      	lsrs	r2, r3, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3208      	adds	r2, #8
 8001786:	69b9      	ldr	r1, [r7, #24]
 8001788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0203 	and.w	r2, r3, #3
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80a2 	beq.w	8001912 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b57      	ldr	r3, [pc, #348]	@ (8001930 <HAL_GPIO_Init+0x2e8>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d6:	4a56      	ldr	r2, [pc, #344]	@ (8001930 <HAL_GPIO_Init+0x2e8>)
 80017d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017de:	4b54      	ldr	r3, [pc, #336]	@ (8001930 <HAL_GPIO_Init+0x2e8>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ea:	4a52      	ldr	r2, [pc, #328]	@ (8001934 <HAL_GPIO_Init+0x2ec>)
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	3302      	adds	r3, #2
 80017f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	220f      	movs	r2, #15
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a49      	ldr	r2, [pc, #292]	@ (8001938 <HAL_GPIO_Init+0x2f0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d019      	beq.n	800184a <HAL_GPIO_Init+0x202>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a48      	ldr	r2, [pc, #288]	@ (800193c <HAL_GPIO_Init+0x2f4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d013      	beq.n	8001846 <HAL_GPIO_Init+0x1fe>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a47      	ldr	r2, [pc, #284]	@ (8001940 <HAL_GPIO_Init+0x2f8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00d      	beq.n	8001842 <HAL_GPIO_Init+0x1fa>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a46      	ldr	r2, [pc, #280]	@ (8001944 <HAL_GPIO_Init+0x2fc>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d007      	beq.n	800183e <HAL_GPIO_Init+0x1f6>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a45      	ldr	r2, [pc, #276]	@ (8001948 <HAL_GPIO_Init+0x300>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d101      	bne.n	800183a <HAL_GPIO_Init+0x1f2>
 8001836:	2304      	movs	r3, #4
 8001838:	e008      	b.n	800184c <HAL_GPIO_Init+0x204>
 800183a:	2307      	movs	r3, #7
 800183c:	e006      	b.n	800184c <HAL_GPIO_Init+0x204>
 800183e:	2303      	movs	r3, #3
 8001840:	e004      	b.n	800184c <HAL_GPIO_Init+0x204>
 8001842:	2302      	movs	r3, #2
 8001844:	e002      	b.n	800184c <HAL_GPIO_Init+0x204>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_GPIO_Init+0x204>
 800184a:	2300      	movs	r3, #0
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	f002 0203 	and.w	r2, r2, #3
 8001852:	0092      	lsls	r2, r2, #2
 8001854:	4093      	lsls	r3, r2
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800185c:	4935      	ldr	r1, [pc, #212]	@ (8001934 <HAL_GPIO_Init+0x2ec>)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800186a:	4b38      	ldr	r3, [pc, #224]	@ (800194c <HAL_GPIO_Init+0x304>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800188e:	4a2f      	ldr	r2, [pc, #188]	@ (800194c <HAL_GPIO_Init+0x304>)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001894:	4b2d      	ldr	r3, [pc, #180]	@ (800194c <HAL_GPIO_Init+0x304>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018b8:	4a24      	ldr	r2, [pc, #144]	@ (800194c <HAL_GPIO_Init+0x304>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018be:	4b23      	ldr	r3, [pc, #140]	@ (800194c <HAL_GPIO_Init+0x304>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018e2:	4a1a      	ldr	r2, [pc, #104]	@ (800194c <HAL_GPIO_Init+0x304>)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018e8:	4b18      	ldr	r3, [pc, #96]	@ (800194c <HAL_GPIO_Init+0x304>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800190c:	4a0f      	ldr	r2, [pc, #60]	@ (800194c <HAL_GPIO_Init+0x304>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3301      	adds	r3, #1
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2b0f      	cmp	r3, #15
 800191c:	f67f aea2 	bls.w	8001664 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3724      	adds	r7, #36	@ 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40013800 	.word	0x40013800
 8001938:	40020000 	.word	0x40020000
 800193c:	40020400 	.word	0x40020400
 8001940:	40020800 	.word	0x40020800
 8001944:	40020c00 	.word	0x40020c00
 8001948:	40021000 	.word	0x40021000
 800194c:	40013c00 	.word	0x40013c00

08001950 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	887b      	ldrh	r3, [r7, #2]
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001968:	2301      	movs	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
 800196c:	e001      	b.n	8001972 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001972:	7bfb      	ldrb	r3, [r7, #15]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	807b      	strh	r3, [r7, #2]
 800198c:	4613      	mov	r3, r2
 800198e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001990:	787b      	ldrb	r3, [r7, #1]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001996:	887a      	ldrh	r2, [r7, #2]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800199c:	e003      	b.n	80019a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800199e:	887b      	ldrh	r3, [r7, #2]
 80019a0:	041a      	lsls	r2, r3, #16
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	619a      	str	r2, [r3, #24]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e267      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d075      	beq.n	8001abe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019d2:	4b88      	ldr	r3, [pc, #544]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d00c      	beq.n	80019f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019de:	4b85      	ldr	r3, [pc, #532]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d112      	bne.n	8001a10 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ea:	4b82      	ldr	r3, [pc, #520]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019f6:	d10b      	bne.n	8001a10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f8:	4b7e      	ldr	r3, [pc, #504]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d05b      	beq.n	8001abc <HAL_RCC_OscConfig+0x108>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d157      	bne.n	8001abc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e242      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a18:	d106      	bne.n	8001a28 <HAL_RCC_OscConfig+0x74>
 8001a1a:	4b76      	ldr	r3, [pc, #472]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a75      	ldr	r2, [pc, #468]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e01d      	b.n	8001a64 <HAL_RCC_OscConfig+0xb0>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x98>
 8001a32:	4b70      	ldr	r3, [pc, #448]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a6f      	ldr	r2, [pc, #444]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	4b6d      	ldr	r3, [pc, #436]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a6c      	ldr	r2, [pc, #432]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e00b      	b.n	8001a64 <HAL_RCC_OscConfig+0xb0>
 8001a4c:	4b69      	ldr	r3, [pc, #420]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a68      	ldr	r2, [pc, #416]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b66      	ldr	r3, [pc, #408]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a65      	ldr	r2, [pc, #404]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d013      	beq.n	8001a94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fcfe 	bl	800146c <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff fcfa 	bl	800146c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	@ 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e207      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	4b5b      	ldr	r3, [pc, #364]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0xc0>
 8001a92:	e014      	b.n	8001abe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff fcea 	bl	800146c <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fce6 	bl	800146c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	@ 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e1f3      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	4b51      	ldr	r3, [pc, #324]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0xe8>
 8001aba:	e000      	b.n	8001abe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d063      	beq.n	8001b92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001aca:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00b      	beq.n	8001aee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ad6:	4b47      	ldr	r3, [pc, #284]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d11c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae2:	4b44      	ldr	r3, [pc, #272]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d116      	bne.n	8001b1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	4b41      	ldr	r3, [pc, #260]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d005      	beq.n	8001b06 <HAL_RCC_OscConfig+0x152>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d001      	beq.n	8001b06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e1c7      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b06:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4937      	ldr	r1, [pc, #220]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1a:	e03a      	b.n	8001b92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d020      	beq.n	8001b66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b24:	4b34      	ldr	r3, [pc, #208]	@ (8001bf8 <HAL_RCC_OscConfig+0x244>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7ff fc9f 	bl	800146c <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b32:	f7ff fc9b 	bl	800146c <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e1a8      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b44:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	4b28      	ldr	r3, [pc, #160]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4925      	ldr	r1, [pc, #148]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]
 8001b64:	e015      	b.n	8001b92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b66:	4b24      	ldr	r3, [pc, #144]	@ (8001bf8 <HAL_RCC_OscConfig+0x244>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fc7e 	bl	800146c <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b74:	f7ff fc7a 	bl	800146c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e187      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d036      	beq.n	8001c0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d016      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba6:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <HAL_RCC_OscConfig+0x248>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fc5e 	bl	800146c <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fc5a 	bl	800146c <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e167      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x200>
 8001bd2:	e01b      	b.n	8001c0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd4:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <HAL_RCC_OscConfig+0x248>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bda:	f7ff fc47 	bl	800146c <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be0:	e00e      	b.n	8001c00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be2:	f7ff fc43 	bl	800146c <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d907      	bls.n	8001c00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e150      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	42470000 	.word	0x42470000
 8001bfc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	4b88      	ldr	r3, [pc, #544]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001c02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1ea      	bne.n	8001be2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 8097 	beq.w	8001d48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1e:	4b81      	ldr	r3, [pc, #516]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10f      	bne.n	8001c4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	4b7d      	ldr	r3, [pc, #500]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	4a7c      	ldr	r2, [pc, #496]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c3a:	4b7a      	ldr	r3, [pc, #488]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c46:	2301      	movs	r3, #1
 8001c48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4a:	4b77      	ldr	r3, [pc, #476]	@ (8001e28 <HAL_RCC_OscConfig+0x474>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d118      	bne.n	8001c88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c56:	4b74      	ldr	r3, [pc, #464]	@ (8001e28 <HAL_RCC_OscConfig+0x474>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a73      	ldr	r2, [pc, #460]	@ (8001e28 <HAL_RCC_OscConfig+0x474>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c62:	f7ff fc03 	bl	800146c <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6a:	f7ff fbff 	bl	800146c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e10c      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e28 <HAL_RCC_OscConfig+0x474>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_OscConfig+0x2ea>
 8001c90:	4b64      	ldr	r3, [pc, #400]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c94:	4a63      	ldr	r2, [pc, #396]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c9c:	e01c      	b.n	8001cd8 <HAL_RCC_OscConfig+0x324>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b05      	cmp	r3, #5
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x30c>
 8001ca6:	4b5f      	ldr	r3, [pc, #380]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001caa:	4a5e      	ldr	r2, [pc, #376]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cb2:	4b5c      	ldr	r3, [pc, #368]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb6:	4a5b      	ldr	r2, [pc, #364]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0x324>
 8001cc0:	4b58      	ldr	r3, [pc, #352]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc4:	4a57      	ldr	r2, [pc, #348]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ccc:	4b55      	ldr	r3, [pc, #340]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd0:	4a54      	ldr	r2, [pc, #336]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001cd2:	f023 0304 	bic.w	r3, r3, #4
 8001cd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d015      	beq.n	8001d0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7ff fbc4 	bl	800146c <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fbc0 	bl	800146c <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0cb      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfe:	4b49      	ldr	r3, [pc, #292]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0ee      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x334>
 8001d0a:	e014      	b.n	8001d36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0c:	f7ff fbae 	bl	800146c <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d12:	e00a      	b.n	8001d2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d14:	f7ff fbaa 	bl	800146c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e0b5      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1ee      	bne.n	8001d14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d105      	bne.n	8001d48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3c:	4b39      	ldr	r3, [pc, #228]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	4a38      	ldr	r2, [pc, #224]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001d42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 80a1 	beq.w	8001e94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d52:	4b34      	ldr	r3, [pc, #208]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d05c      	beq.n	8001e18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d141      	bne.n	8001dea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d66:	4b31      	ldr	r3, [pc, #196]	@ (8001e2c <HAL_RCC_OscConfig+0x478>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fb7e 	bl	800146c <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d74:	f7ff fb7a 	bl	800146c <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e087      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d86:	4b27      	ldr	r3, [pc, #156]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69da      	ldr	r2, [r3, #28]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da0:	019b      	lsls	r3, r3, #6
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da8:	085b      	lsrs	r3, r3, #1
 8001daa:	3b01      	subs	r3, #1
 8001dac:	041b      	lsls	r3, r3, #16
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db4:	061b      	lsls	r3, r3, #24
 8001db6:	491b      	ldr	r1, [pc, #108]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e2c <HAL_RCC_OscConfig+0x478>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7ff fb53 	bl	800146c <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dca:	f7ff fb4f 	bl	800146c <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e05c      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ddc:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x416>
 8001de8:	e054      	b.n	8001e94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dea:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <HAL_RCC_OscConfig+0x478>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff fb3c 	bl	800146c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7ff fb38 	bl	800146c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e045      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0a:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x444>
 8001e16:	e03d      	b.n	8001e94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d107      	bne.n	8001e30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e038      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ec>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d028      	beq.n	8001e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d121      	bne.n	8001e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d11a      	bne.n	8001e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e60:	4013      	ands	r3, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d111      	bne.n	8001e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e76:	085b      	lsrs	r3, r3, #1
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d107      	bne.n	8001e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800

08001ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0cc      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b68      	ldr	r3, [pc, #416]	@ (800205c <HAL_RCC_ClockConfig+0x1b8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d90c      	bls.n	8001ee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b65      	ldr	r3, [pc, #404]	@ (800205c <HAL_RCC_ClockConfig+0x1b8>)
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b63      	ldr	r3, [pc, #396]	@ (800205c <HAL_RCC_ClockConfig+0x1b8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0b8      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d020      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef8:	4b59      	ldr	r3, [pc, #356]	@ (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	4a58      	ldr	r2, [pc, #352]	@ (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f10:	4b53      	ldr	r3, [pc, #332]	@ (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	4a52      	ldr	r2, [pc, #328]	@ (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f1c:	4b50      	ldr	r3, [pc, #320]	@ (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	494d      	ldr	r1, [pc, #308]	@ (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d044      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	4b47      	ldr	r3, [pc, #284]	@ (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d119      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e07f      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d003      	beq.n	8001f62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f62:	4b3f      	ldr	r3, [pc, #252]	@ (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e06f      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f72:	4b3b      	ldr	r3, [pc, #236]	@ (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e067      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f82:	4b37      	ldr	r3, [pc, #220]	@ (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f023 0203 	bic.w	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4934      	ldr	r1, [pc, #208]	@ (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f94:	f7ff fa6a 	bl	800146c <HAL_GetTick>
 8001f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9c:	f7ff fa66 	bl	800146c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e04f      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 020c 	and.w	r2, r3, #12
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d1eb      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b25      	ldr	r3, [pc, #148]	@ (800205c <HAL_RCC_ClockConfig+0x1b8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d20c      	bcs.n	8001fec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b22      	ldr	r3, [pc, #136]	@ (800205c <HAL_RCC_ClockConfig+0x1b8>)
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b20      	ldr	r3, [pc, #128]	@ (800205c <HAL_RCC_ClockConfig+0x1b8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e032      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff8:	4b19      	ldr	r3, [pc, #100]	@ (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4916      	ldr	r1, [pc, #88]	@ (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002016:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	490e      	ldr	r1, [pc, #56]	@ (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800202a:	f000 f821 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 800202e:	4602      	mov	r2, r0
 8002030:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	490a      	ldr	r1, [pc, #40]	@ (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	5ccb      	ldrb	r3, [r1, r3]
 800203e:	fa22 f303 	lsr.w	r3, r2, r3
 8002042:	4a09      	ldr	r2, [pc, #36]	@ (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002046:	4b09      	ldr	r3, [pc, #36]	@ (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fbc0 	bl	80007d0 <HAL_InitTick>

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023c00 	.word	0x40023c00
 8002060:	40023800 	.word	0x40023800
 8002064:	080067c8 	.word	0x080067c8
 8002068:	20000000 	.word	0x20000000
 800206c:	200000fc 	.word	0x200000fc

08002070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002074:	b090      	sub	sp, #64	@ 0x40
 8002076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002088:	4b59      	ldr	r3, [pc, #356]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b08      	cmp	r3, #8
 8002092:	d00d      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x40>
 8002094:	2b08      	cmp	r3, #8
 8002096:	f200 80a1 	bhi.w	80021dc <HAL_RCC_GetSysClockFreq+0x16c>
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x34>
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d003      	beq.n	80020aa <HAL_RCC_GetSysClockFreq+0x3a>
 80020a2:	e09b      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020a4:	4b53      	ldr	r3, [pc, #332]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80020a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020a8:	e09b      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020aa:	4b53      	ldr	r3, [pc, #332]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80020ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020ae:	e098      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020b0:	4b4f      	ldr	r3, [pc, #316]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ba:	4b4d      	ldr	r3, [pc, #308]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d028      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c6:	4b4a      	ldr	r3, [pc, #296]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	099b      	lsrs	r3, r3, #6
 80020cc:	2200      	movs	r2, #0
 80020ce:	623b      	str	r3, [r7, #32]
 80020d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020d8:	2100      	movs	r1, #0
 80020da:	4b47      	ldr	r3, [pc, #284]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80020dc:	fb03 f201 	mul.w	r2, r3, r1
 80020e0:	2300      	movs	r3, #0
 80020e2:	fb00 f303 	mul.w	r3, r0, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	4a43      	ldr	r2, [pc, #268]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80020ea:	fba0 1202 	umull	r1, r2, r0, r2
 80020ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020f0:	460a      	mov	r2, r1
 80020f2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80020f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020f6:	4413      	add	r3, r2
 80020f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020fc:	2200      	movs	r2, #0
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	61fa      	str	r2, [r7, #28]
 8002102:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002106:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800210a:	f7fe f869 	bl	80001e0 <__aeabi_uldivmod>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4613      	mov	r3, r2
 8002114:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002116:	e053      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002118:	4b35      	ldr	r3, [pc, #212]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	099b      	lsrs	r3, r3, #6
 800211e:	2200      	movs	r2, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	617a      	str	r2, [r7, #20]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800212a:	f04f 0b00 	mov.w	fp, #0
 800212e:	4652      	mov	r2, sl
 8002130:	465b      	mov	r3, fp
 8002132:	f04f 0000 	mov.w	r0, #0
 8002136:	f04f 0100 	mov.w	r1, #0
 800213a:	0159      	lsls	r1, r3, #5
 800213c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002140:	0150      	lsls	r0, r2, #5
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	ebb2 080a 	subs.w	r8, r2, sl
 800214a:	eb63 090b 	sbc.w	r9, r3, fp
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800215a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800215e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002162:	ebb2 0408 	subs.w	r4, r2, r8
 8002166:	eb63 0509 	sbc.w	r5, r3, r9
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	00eb      	lsls	r3, r5, #3
 8002174:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002178:	00e2      	lsls	r2, r4, #3
 800217a:	4614      	mov	r4, r2
 800217c:	461d      	mov	r5, r3
 800217e:	eb14 030a 	adds.w	r3, r4, sl
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	eb45 030b 	adc.w	r3, r5, fp
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002196:	4629      	mov	r1, r5
 8002198:	028b      	lsls	r3, r1, #10
 800219a:	4621      	mov	r1, r4
 800219c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021a0:	4621      	mov	r1, r4
 80021a2:	028a      	lsls	r2, r1, #10
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021aa:	2200      	movs	r2, #0
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	60fa      	str	r2, [r7, #12]
 80021b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021b4:	f7fe f814 	bl	80001e0 <__aeabi_uldivmod>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4613      	mov	r3, r2
 80021be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021c0:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	0c1b      	lsrs	r3, r3, #16
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	3301      	adds	r3, #1
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80021d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021da:	e002      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80021de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3740      	adds	r7, #64	@ 0x40
 80021e8:	46bd      	mov	sp, r7
 80021ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	00f42400 	.word	0x00f42400
 80021f8:	017d7840 	.word	0x017d7840

080021fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002200:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <HAL_RCC_GetHCLKFreq+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000000 	.word	0x20000000

08002214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002218:	f7ff fff0 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	0b5b      	lsrs	r3, r3, #13
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4903      	ldr	r1, [pc, #12]	@ (8002238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	080067d8 	.word	0x080067d8

0800223c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	220f      	movs	r2, #15
 800224a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800224c:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <HAL_RCC_GetClockConfig+0x5c>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0203 	and.w	r2, r3, #3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002258:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <HAL_RCC_GetClockConfig+0x5c>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <HAL_RCC_GetClockConfig+0x5c>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002270:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <HAL_RCC_GetClockConfig+0x5c>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	08db      	lsrs	r3, r3, #3
 8002276:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800227e:	4b07      	ldr	r3, [pc, #28]	@ (800229c <HAL_RCC_GetClockConfig+0x60>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0207 	and.w	r2, r3, #7
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	601a      	str	r2, [r3, #0]
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	40023c00 	.word	0x40023c00

080022a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e07b      	b.n	80023aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d108      	bne.n	80022cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022c2:	d009      	beq.n	80022d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
 80022ca:	e005      	b.n	80022d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe fa24 	bl	8000740 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800230e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800235c:	ea42 0103 	orr.w	r1, r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002364:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	0c1b      	lsrs	r3, r3, #16
 8002376:	f003 0104 	and.w	r1, r3, #4
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	f003 0210 	and.w	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69da      	ldr	r2, [r3, #28]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002398:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b088      	sub	sp, #32
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	4613      	mov	r3, r2
 80023c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023c2:	f7ff f853 	bl	800146c <HAL_GetTick>
 80023c6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d001      	beq.n	80023dc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80023d8:	2302      	movs	r3, #2
 80023da:	e12a      	b.n	8002632 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <HAL_SPI_Transmit+0x36>
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e122      	b.n	8002632 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_SPI_Transmit+0x48>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e11b      	b.n	8002632 <HAL_SPI_Transmit+0x280>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2203      	movs	r2, #3
 8002406:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	88fa      	ldrh	r2, [r7, #6]
 800241a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	88fa      	ldrh	r2, [r7, #6]
 8002420:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002448:	d10f      	bne.n	800246a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002458:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002468:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002474:	2b40      	cmp	r3, #64	@ 0x40
 8002476:	d007      	beq.n	8002488 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002486:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002490:	d152      	bne.n	8002538 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <HAL_SPI_Transmit+0xee>
 800249a:	8b7b      	ldrh	r3, [r7, #26]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d145      	bne.n	800252c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a4:	881a      	ldrh	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b0:	1c9a      	adds	r2, r3, #2
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024c4:	e032      	b.n	800252c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d112      	bne.n	80024fa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d8:	881a      	ldrh	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e4:	1c9a      	adds	r2, r3, #2
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80024f8:	e018      	b.n	800252c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024fa:	f7fe ffb7 	bl	800146c <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d803      	bhi.n	8002512 <HAL_SPI_Transmit+0x160>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d102      	bne.n	8002518 <HAL_SPI_Transmit+0x166>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d109      	bne.n	800252c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e082      	b.n	8002632 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1c7      	bne.n	80024c6 <HAL_SPI_Transmit+0x114>
 8002536:	e053      	b.n	80025e0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <HAL_SPI_Transmit+0x194>
 8002540:	8b7b      	ldrh	r3, [r7, #26]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d147      	bne.n	80025d6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	330c      	adds	r3, #12
 8002550:	7812      	ldrb	r2, [r2, #0]
 8002552:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800256c:	e033      	b.n	80025d6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b02      	cmp	r3, #2
 800257a:	d113      	bne.n	80025a4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	330c      	adds	r3, #12
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80025a2:	e018      	b.n	80025d6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025a4:	f7fe ff62 	bl	800146c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d803      	bhi.n	80025bc <HAL_SPI_Transmit+0x20a>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ba:	d102      	bne.n	80025c2 <HAL_SPI_Transmit+0x210>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e02d      	b.n	8002632 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1c6      	bne.n	800256e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025e0:	69fa      	ldr	r2, [r7, #28]
 80025e2:	6839      	ldr	r1, [r7, #0]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fbe7 	bl	8002db8 <SPI_EndRxTxTransaction>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10a      	bne.n	8002614 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002630:	2300      	movs	r3, #0
  }
}
 8002632:	4618      	mov	r0, r3
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b088      	sub	sp, #32
 800263e:	af02      	add	r7, sp, #8
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	4613      	mov	r3, r2
 8002648:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d001      	beq.n	800265a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002656:	2302      	movs	r3, #2
 8002658:	e104      	b.n	8002864 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002662:	d112      	bne.n	800268a <HAL_SPI_Receive+0x50>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10e      	bne.n	800268a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2204      	movs	r2, #4
 8002670:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002674:	88fa      	ldrh	r2, [r7, #6]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	4613      	mov	r3, r2
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	68b9      	ldr	r1, [r7, #8]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f8f3 	bl	800286c <HAL_SPI_TransmitReceive>
 8002686:	4603      	mov	r3, r0
 8002688:	e0ec      	b.n	8002864 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800268a:	f7fe feef 	bl	800146c <HAL_GetTick>
 800268e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_SPI_Receive+0x62>
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0e1      	b.n	8002864 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_SPI_Receive+0x74>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e0da      	b.n	8002864 <HAL_SPI_Receive+0x22a>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2204      	movs	r2, #4
 80026ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	88fa      	ldrh	r2, [r7, #6]
 80026ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	88fa      	ldrh	r2, [r7, #6]
 80026d4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026fc:	d10f      	bne.n	800271e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800270c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002728:	2b40      	cmp	r3, #64	@ 0x40
 800272a:	d007      	beq.n	800273c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800273a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d170      	bne.n	8002826 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002744:	e035      	b.n	80027b2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d115      	bne.n	8002780 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f103 020c 	add.w	r2, r3, #12
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002760:	7812      	ldrb	r2, [r2, #0]
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800277e:	e018      	b.n	80027b2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002780:	f7fe fe74 	bl	800146c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d803      	bhi.n	8002798 <HAL_SPI_Receive+0x15e>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002796:	d102      	bne.n	800279e <HAL_SPI_Receive+0x164>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e058      	b.n	8002864 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1c4      	bne.n	8002746 <HAL_SPI_Receive+0x10c>
 80027bc:	e038      	b.n	8002830 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d113      	bne.n	80027f4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d6:	b292      	uxth	r2, r2
 80027d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027de:	1c9a      	adds	r2, r3, #2
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80027f2:	e018      	b.n	8002826 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027f4:	f7fe fe3a 	bl	800146c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d803      	bhi.n	800280c <HAL_SPI_Receive+0x1d2>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280a:	d102      	bne.n	8002812 <HAL_SPI_Receive+0x1d8>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e01e      	b.n	8002864 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1c6      	bne.n	80027be <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	6839      	ldr	r1, [r7, #0]
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fa59 	bl	8002cec <SPI_EndRxTransaction>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002862:	2300      	movs	r3, #0
  }
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	@ 0x28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800287a:	2301      	movs	r3, #1
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800287e:	f7fe fdf5 	bl	800146c <HAL_GetTick>
 8002882:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800288a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002892:	887b      	ldrh	r3, [r7, #2]
 8002894:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002896:	7ffb      	ldrb	r3, [r7, #31]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d00c      	beq.n	80028b6 <HAL_SPI_TransmitReceive+0x4a>
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028a2:	d106      	bne.n	80028b2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <HAL_SPI_TransmitReceive+0x46>
 80028ac:	7ffb      	ldrb	r3, [r7, #31]
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d001      	beq.n	80028b6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80028b2:	2302      	movs	r3, #2
 80028b4:	e17f      	b.n	8002bb6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_SPI_TransmitReceive+0x5c>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <HAL_SPI_TransmitReceive+0x5c>
 80028c2:	887b      	ldrh	r3, [r7, #2]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e174      	b.n	8002bb6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_SPI_TransmitReceive+0x6e>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e16d      	b.n	8002bb6 <HAL_SPI_TransmitReceive+0x34a>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d003      	beq.n	80028f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2205      	movs	r2, #5
 80028f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	887a      	ldrh	r2, [r7, #2]
 8002906:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	887a      	ldrh	r2, [r7, #2]
 800290c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	887a      	ldrh	r2, [r7, #2]
 800291e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002936:	2b40      	cmp	r3, #64	@ 0x40
 8002938:	d007      	beq.n	800294a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002948:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002952:	d17e      	bne.n	8002a52 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_SPI_TransmitReceive+0xf6>
 800295c:	8afb      	ldrh	r3, [r7, #22]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d16c      	bne.n	8002a3c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	881a      	ldrh	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	1c9a      	adds	r2, r3, #2
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800297c:	b29b      	uxth	r3, r3
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002986:	e059      	b.n	8002a3c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b02      	cmp	r3, #2
 8002994:	d11b      	bne.n	80029ce <HAL_SPI_TransmitReceive+0x162>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d016      	beq.n	80029ce <HAL_SPI_TransmitReceive+0x162>
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d113      	bne.n	80029ce <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	881a      	ldrh	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	1c9a      	adds	r2, r3, #2
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d119      	bne.n	8002a10 <HAL_SPI_TransmitReceive+0x1a4>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d014      	beq.n	8002a10 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f0:	b292      	uxth	r2, r2
 80029f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f8:	1c9a      	adds	r2, r3, #2
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a10:	f7fe fd2c 	bl	800146c <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d80d      	bhi.n	8002a3c <HAL_SPI_TransmitReceive+0x1d0>
 8002a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a26:	d009      	beq.n	8002a3c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e0bc      	b.n	8002bb6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1a0      	bne.n	8002988 <HAL_SPI_TransmitReceive+0x11c>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d19b      	bne.n	8002988 <HAL_SPI_TransmitReceive+0x11c>
 8002a50:	e082      	b.n	8002b58 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <HAL_SPI_TransmitReceive+0x1f4>
 8002a5a:	8afb      	ldrh	r3, [r7, #22]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d171      	bne.n	8002b44 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	330c      	adds	r3, #12
 8002a6a:	7812      	ldrb	r2, [r2, #0]
 8002a6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a86:	e05d      	b.n	8002b44 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d11c      	bne.n	8002ad0 <HAL_SPI_TransmitReceive+0x264>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d017      	beq.n	8002ad0 <HAL_SPI_TransmitReceive+0x264>
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d114      	bne.n	8002ad0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	330c      	adds	r3, #12
 8002ab0:	7812      	ldrb	r2, [r2, #0]
 8002ab2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d119      	bne.n	8002b12 <HAL_SPI_TransmitReceive+0x2a6>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d014      	beq.n	8002b12 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b12:	f7fe fcab 	bl	800146c <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d803      	bhi.n	8002b2a <HAL_SPI_TransmitReceive+0x2be>
 8002b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b28:	d102      	bne.n	8002b30 <HAL_SPI_TransmitReceive+0x2c4>
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d109      	bne.n	8002b44 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e038      	b.n	8002bb6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d19c      	bne.n	8002a88 <HAL_SPI_TransmitReceive+0x21c>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d197      	bne.n	8002a88 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b58:	6a3a      	ldr	r2, [r7, #32]
 8002b5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f92b 	bl	8002db8 <SPI_EndRxTxTransaction>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e01d      	b.n	8002bb6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10a      	bne.n	8002b98 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3728      	adds	r7, #40	@ 0x28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002bcc:	b2db      	uxtb	r3, r3
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bec:	f7fe fc3e 	bl	800146c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bfc:	f7fe fc36 	bl	800146c <HAL_GetTick>
 8002c00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c02:	4b39      	ldr	r3, [pc, #228]	@ (8002ce8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	015b      	lsls	r3, r3, #5
 8002c08:	0d1b      	lsrs	r3, r3, #20
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	fb02 f303 	mul.w	r3, r2, r3
 8002c10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c12:	e054      	b.n	8002cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1a:	d050      	beq.n	8002cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c1c:	f7fe fc26 	bl	800146c <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d902      	bls.n	8002c32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d13d      	bne.n	8002cae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c4a:	d111      	bne.n	8002c70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c54:	d004      	beq.n	8002c60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c5e:	d107      	bne.n	8002c70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c78:	d10f      	bne.n	8002c9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e017      	b.n	8002cde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	bf0c      	ite	eq
 8002cce:	2301      	moveq	r3, #1
 8002cd0:	2300      	movne	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d19b      	bne.n	8002c14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3720      	adds	r7, #32
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000000 	.word	0x20000000

08002cec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d00:	d111      	bne.n	8002d26 <SPI_EndRxTransaction+0x3a>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d0a:	d004      	beq.n	8002d16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d14:	d107      	bne.n	8002d26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d24:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d2e:	d12a      	bne.n	8002d86 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d38:	d012      	beq.n	8002d60 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2200      	movs	r2, #0
 8002d42:	2180      	movs	r1, #128	@ 0x80
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7ff ff49 	bl	8002bdc <SPI_WaitFlagStateUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d02d      	beq.n	8002dac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d54:	f043 0220 	orr.w	r2, r3, #32
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e026      	b.n	8002dae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2200      	movs	r2, #0
 8002d68:	2101      	movs	r1, #1
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff ff36 	bl	8002bdc <SPI_WaitFlagStateUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d01a      	beq.n	8002dac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7a:	f043 0220 	orr.w	r2, r3, #32
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e013      	b.n	8002dae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2101      	movs	r1, #1
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7ff ff23 	bl	8002bdc <SPI_WaitFlagStateUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d007      	beq.n	8002dac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da0:	f043 0220 	orr.w	r2, r3, #32
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e000      	b.n	8002dae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	2102      	movs	r1, #2
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f7ff ff04 	bl	8002bdc <SPI_WaitFlagStateUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dde:	f043 0220 	orr.w	r2, r3, #32
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e032      	b.n	8002e50 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002dea:	4b1b      	ldr	r3, [pc, #108]	@ (8002e58 <SPI_EndRxTxTransaction+0xa0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a1b      	ldr	r2, [pc, #108]	@ (8002e5c <SPI_EndRxTxTransaction+0xa4>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	0d5b      	lsrs	r3, r3, #21
 8002df6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
 8002dfe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e08:	d112      	bne.n	8002e30 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2200      	movs	r2, #0
 8002e12:	2180      	movs	r1, #128	@ 0x80
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f7ff fee1 	bl	8002bdc <SPI_WaitFlagStateUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d016      	beq.n	8002e4e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e24:	f043 0220 	orr.w	r2, r3, #32
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e00f      	b.n	8002e50 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e46:	2b80      	cmp	r3, #128	@ 0x80
 8002e48:	d0f2      	beq.n	8002e30 <SPI_EndRxTxTransaction+0x78>
 8002e4a:	e000      	b.n	8002e4e <SPI_EndRxTxTransaction+0x96>
        break;
 8002e4c:	bf00      	nop
  }

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000000 	.word	0x20000000
 8002e5c:	165e9f81 	.word	0x165e9f81

08002e60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e041      	b.n	8002ef6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f839 	bl	8002efe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	f000 fe2c 	bl	8003afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d001      	beq.n	8002f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e044      	b.n	8002fb6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d018      	beq.n	8002f80 <HAL_TIM_Base_Start_IT+0x6c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f56:	d013      	beq.n	8002f80 <HAL_TIM_Base_Start_IT+0x6c>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1a      	ldr	r2, [pc, #104]	@ (8002fc8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00e      	beq.n	8002f80 <HAL_TIM_Base_Start_IT+0x6c>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a19      	ldr	r2, [pc, #100]	@ (8002fcc <HAL_TIM_Base_Start_IT+0xb8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d009      	beq.n	8002f80 <HAL_TIM_Base_Start_IT+0x6c>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a17      	ldr	r2, [pc, #92]	@ (8002fd0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d004      	beq.n	8002f80 <HAL_TIM_Base_Start_IT+0x6c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a16      	ldr	r2, [pc, #88]	@ (8002fd4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d111      	bne.n	8002fa4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b06      	cmp	r3, #6
 8002f90:	d010      	beq.n	8002fb4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0201 	orr.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa2:	e007      	b.n	8002fb4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40010000 	.word	0x40010000
 8002fc8:	40000400 	.word	0x40000400
 8002fcc:	40000800 	.word	0x40000800
 8002fd0:	40000c00 	.word	0x40000c00
 8002fd4:	40014000 	.word	0x40014000

08002fd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e041      	b.n	800306e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f839 	bl	8003076 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3304      	adds	r3, #4
 8003014:	4619      	mov	r1, r3
 8003016:	4610      	mov	r0, r2
 8003018:	f000 fd70 	bl	8003afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d109      	bne.n	80030b0 <HAL_TIM_PWM_Start+0x24>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e022      	b.n	80030f6 <HAL_TIM_PWM_Start+0x6a>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d109      	bne.n	80030ca <HAL_TIM_PWM_Start+0x3e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	bf14      	ite	ne
 80030c2:	2301      	movne	r3, #1
 80030c4:	2300      	moveq	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	e015      	b.n	80030f6 <HAL_TIM_PWM_Start+0x6a>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d109      	bne.n	80030e4 <HAL_TIM_PWM_Start+0x58>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	bf14      	ite	ne
 80030dc:	2301      	movne	r3, #1
 80030de:	2300      	moveq	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	e008      	b.n	80030f6 <HAL_TIM_PWM_Start+0x6a>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e068      	b.n	80031d0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d104      	bne.n	800310e <HAL_TIM_PWM_Start+0x82>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800310c:	e013      	b.n	8003136 <HAL_TIM_PWM_Start+0xaa>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b04      	cmp	r3, #4
 8003112:	d104      	bne.n	800311e <HAL_TIM_PWM_Start+0x92>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800311c:	e00b      	b.n	8003136 <HAL_TIM_PWM_Start+0xaa>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b08      	cmp	r3, #8
 8003122:	d104      	bne.n	800312e <HAL_TIM_PWM_Start+0xa2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800312c:	e003      	b.n	8003136 <HAL_TIM_PWM_Start+0xaa>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2202      	movs	r2, #2
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2201      	movs	r2, #1
 800313c:	6839      	ldr	r1, [r7, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f001 f812 	bl	8004168 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a23      	ldr	r2, [pc, #140]	@ (80031d8 <HAL_TIM_PWM_Start+0x14c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d107      	bne.n	800315e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800315c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1d      	ldr	r2, [pc, #116]	@ (80031d8 <HAL_TIM_PWM_Start+0x14c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d018      	beq.n	800319a <HAL_TIM_PWM_Start+0x10e>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003170:	d013      	beq.n	800319a <HAL_TIM_PWM_Start+0x10e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a19      	ldr	r2, [pc, #100]	@ (80031dc <HAL_TIM_PWM_Start+0x150>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00e      	beq.n	800319a <HAL_TIM_PWM_Start+0x10e>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a17      	ldr	r2, [pc, #92]	@ (80031e0 <HAL_TIM_PWM_Start+0x154>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d009      	beq.n	800319a <HAL_TIM_PWM_Start+0x10e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a16      	ldr	r2, [pc, #88]	@ (80031e4 <HAL_TIM_PWM_Start+0x158>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d004      	beq.n	800319a <HAL_TIM_PWM_Start+0x10e>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a14      	ldr	r2, [pc, #80]	@ (80031e8 <HAL_TIM_PWM_Start+0x15c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d111      	bne.n	80031be <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b06      	cmp	r3, #6
 80031aa:	d010      	beq.n	80031ce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0201 	orr.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031bc:	e007      	b.n	80031ce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0201 	orr.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40010000 	.word	0x40010000
 80031dc:	40000400 	.word	0x40000400
 80031e0:	40000800 	.word	0x40000800
 80031e4:	40000c00 	.word	0x40000c00
 80031e8:	40014000 	.word	0x40014000

080031ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2200      	movs	r2, #0
 80031fc:	6839      	ldr	r1, [r7, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 ffb2 	bl	8004168 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a29      	ldr	r2, [pc, #164]	@ (80032b0 <HAL_TIM_PWM_Stop+0xc4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d117      	bne.n	800323e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6a1a      	ldr	r2, [r3, #32]
 8003214:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003218:	4013      	ands	r3, r2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10f      	bne.n	800323e <HAL_TIM_PWM_Stop+0x52>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6a1a      	ldr	r2, [r3, #32]
 8003224:	f240 4344 	movw	r3, #1092	@ 0x444
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d107      	bne.n	800323e <HAL_TIM_PWM_Stop+0x52>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800323c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a1a      	ldr	r2, [r3, #32]
 8003244:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10f      	bne.n	800326e <HAL_TIM_PWM_Stop+0x82>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6a1a      	ldr	r2, [r3, #32]
 8003254:	f240 4344 	movw	r3, #1092	@ 0x444
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d107      	bne.n	800326e <HAL_TIM_PWM_Stop+0x82>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d104      	bne.n	800327e <HAL_TIM_PWM_Stop+0x92>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800327c:	e013      	b.n	80032a6 <HAL_TIM_PWM_Stop+0xba>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d104      	bne.n	800328e <HAL_TIM_PWM_Stop+0xa2>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800328c:	e00b      	b.n	80032a6 <HAL_TIM_PWM_Stop+0xba>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b08      	cmp	r3, #8
 8003292:	d104      	bne.n	800329e <HAL_TIM_PWM_Stop+0xb2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800329c:	e003      	b.n	80032a6 <HAL_TIM_PWM_Stop+0xba>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40010000 	.word	0x40010000

080032b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e041      	b.n	800334a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f839 	bl	8003352 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3304      	adds	r3, #4
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f000 fc02 	bl	8003afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d104      	bne.n	8003386 <HAL_TIM_IC_Start_IT+0x1e>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003382:	b2db      	uxtb	r3, r3
 8003384:	e013      	b.n	80033ae <HAL_TIM_IC_Start_IT+0x46>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b04      	cmp	r3, #4
 800338a:	d104      	bne.n	8003396 <HAL_TIM_IC_Start_IT+0x2e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003392:	b2db      	uxtb	r3, r3
 8003394:	e00b      	b.n	80033ae <HAL_TIM_IC_Start_IT+0x46>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d104      	bne.n	80033a6 <HAL_TIM_IC_Start_IT+0x3e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	e003      	b.n	80033ae <HAL_TIM_IC_Start_IT+0x46>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d104      	bne.n	80033c0 <HAL_TIM_IC_Start_IT+0x58>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	e013      	b.n	80033e8 <HAL_TIM_IC_Start_IT+0x80>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d104      	bne.n	80033d0 <HAL_TIM_IC_Start_IT+0x68>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e00b      	b.n	80033e8 <HAL_TIM_IC_Start_IT+0x80>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d104      	bne.n	80033e0 <HAL_TIM_IC_Start_IT+0x78>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	e003      	b.n	80033e8 <HAL_TIM_IC_Start_IT+0x80>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80033ea:	7bbb      	ldrb	r3, [r7, #14]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d102      	bne.n	80033f6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80033f0:	7b7b      	ldrb	r3, [r7, #13]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d001      	beq.n	80033fa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e0c2      	b.n	8003580 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d104      	bne.n	800340a <HAL_TIM_IC_Start_IT+0xa2>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003408:	e013      	b.n	8003432 <HAL_TIM_IC_Start_IT+0xca>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b04      	cmp	r3, #4
 800340e:	d104      	bne.n	800341a <HAL_TIM_IC_Start_IT+0xb2>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003418:	e00b      	b.n	8003432 <HAL_TIM_IC_Start_IT+0xca>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d104      	bne.n	800342a <HAL_TIM_IC_Start_IT+0xc2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003428:	e003      	b.n	8003432 <HAL_TIM_IC_Start_IT+0xca>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2202      	movs	r2, #2
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d104      	bne.n	8003442 <HAL_TIM_IC_Start_IT+0xda>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003440:	e013      	b.n	800346a <HAL_TIM_IC_Start_IT+0x102>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b04      	cmp	r3, #4
 8003446:	d104      	bne.n	8003452 <HAL_TIM_IC_Start_IT+0xea>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003450:	e00b      	b.n	800346a <HAL_TIM_IC_Start_IT+0x102>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b08      	cmp	r3, #8
 8003456:	d104      	bne.n	8003462 <HAL_TIM_IC_Start_IT+0xfa>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003460:	e003      	b.n	800346a <HAL_TIM_IC_Start_IT+0x102>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b0c      	cmp	r3, #12
 800346e:	d841      	bhi.n	80034f4 <HAL_TIM_IC_Start_IT+0x18c>
 8003470:	a201      	add	r2, pc, #4	@ (adr r2, 8003478 <HAL_TIM_IC_Start_IT+0x110>)
 8003472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003476:	bf00      	nop
 8003478:	080034ad 	.word	0x080034ad
 800347c:	080034f5 	.word	0x080034f5
 8003480:	080034f5 	.word	0x080034f5
 8003484:	080034f5 	.word	0x080034f5
 8003488:	080034bf 	.word	0x080034bf
 800348c:	080034f5 	.word	0x080034f5
 8003490:	080034f5 	.word	0x080034f5
 8003494:	080034f5 	.word	0x080034f5
 8003498:	080034d1 	.word	0x080034d1
 800349c:	080034f5 	.word	0x080034f5
 80034a0:	080034f5 	.word	0x080034f5
 80034a4:	080034f5 	.word	0x080034f5
 80034a8:	080034e3 	.word	0x080034e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0202 	orr.w	r2, r2, #2
 80034ba:	60da      	str	r2, [r3, #12]
      break;
 80034bc:	e01d      	b.n	80034fa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0204 	orr.w	r2, r2, #4
 80034cc:	60da      	str	r2, [r3, #12]
      break;
 80034ce:	e014      	b.n	80034fa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0208 	orr.w	r2, r2, #8
 80034de:	60da      	str	r2, [r3, #12]
      break;
 80034e0:	e00b      	b.n	80034fa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0210 	orr.w	r2, r2, #16
 80034f0:	60da      	str	r2, [r3, #12]
      break;
 80034f2:	e002      	b.n	80034fa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
      break;
 80034f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d13e      	bne.n	800357e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2201      	movs	r2, #1
 8003506:	6839      	ldr	r1, [r7, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fe2d 	bl	8004168 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1d      	ldr	r2, [pc, #116]	@ (8003588 <HAL_TIM_IC_Start_IT+0x220>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d018      	beq.n	800354a <HAL_TIM_IC_Start_IT+0x1e2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003520:	d013      	beq.n	800354a <HAL_TIM_IC_Start_IT+0x1e2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a19      	ldr	r2, [pc, #100]	@ (800358c <HAL_TIM_IC_Start_IT+0x224>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00e      	beq.n	800354a <HAL_TIM_IC_Start_IT+0x1e2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a17      	ldr	r2, [pc, #92]	@ (8003590 <HAL_TIM_IC_Start_IT+0x228>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d009      	beq.n	800354a <HAL_TIM_IC_Start_IT+0x1e2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a16      	ldr	r2, [pc, #88]	@ (8003594 <HAL_TIM_IC_Start_IT+0x22c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d004      	beq.n	800354a <HAL_TIM_IC_Start_IT+0x1e2>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a14      	ldr	r2, [pc, #80]	@ (8003598 <HAL_TIM_IC_Start_IT+0x230>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d111      	bne.n	800356e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b06      	cmp	r3, #6
 800355a:	d010      	beq.n	800357e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356c:	e007      	b.n	800357e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0201 	orr.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40010000 	.word	0x40010000
 800358c:	40000400 	.word	0x40000400
 8003590:	40000800 	.word	0x40000800
 8003594:	40000c00 	.word	0x40000c00
 8003598:	40014000 	.word	0x40014000

0800359c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d020      	beq.n	8003600 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01b      	beq.n	8003600 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0202 	mvn.w	r2, #2
 80035d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fd fe1c 	bl	8001224 <HAL_TIM_IC_CaptureCallback>
 80035ec:	e005      	b.n	80035fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fa66 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fa6d 	bl	8003ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b00      	cmp	r3, #0
 8003608:	d020      	beq.n	800364c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01b      	beq.n	800364c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0204 	mvn.w	r2, #4
 800361c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2202      	movs	r2, #2
 8003622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fd fdf6 	bl	8001224 <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fa40 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fa47 	bl	8003ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d020      	beq.n	8003698 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01b      	beq.n	8003698 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0208 	mvn.w	r2, #8
 8003668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2204      	movs	r2, #4
 800366e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7fd fdd0 	bl	8001224 <HAL_TIM_IC_CaptureCallback>
 8003684:	e005      	b.n	8003692 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fa1a 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fa21 	bl	8003ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d020      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d01b      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0210 	mvn.w	r2, #16
 80036b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2208      	movs	r2, #8
 80036ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fd fdaa 	bl	8001224 <HAL_TIM_IC_CaptureCallback>
 80036d0:	e005      	b.n	80036de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f9f4 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f9fb 	bl	8003ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00c      	beq.n	8003708 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0201 	mvn.w	r2, #1
 8003700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fc ffd8 	bl	80006b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00c      	beq.n	800372c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003718:	2b00      	cmp	r3, #0
 800371a:	d007      	beq.n	800372c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fd4d 	bl	80041c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00c      	beq.n	8003750 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d007      	beq.n	8003750 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f9cc 	bl	8003ae8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00c      	beq.n	8003774 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f003 0320 	and.w	r3, r3, #32
 8003760:	2b00      	cmp	r3, #0
 8003762:	d007      	beq.n	8003774 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0220 	mvn.w	r2, #32
 800376c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fd1f 	bl	80041b2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003774:	bf00      	nop
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003796:	2302      	movs	r3, #2
 8003798:	e088      	b.n	80038ac <HAL_TIM_IC_ConfigChannel+0x130>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d11b      	bne.n	80037e0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80037b8:	f000 fbb8 	bl	8003f2c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 020c 	bic.w	r2, r2, #12
 80037ca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6999      	ldr	r1, [r3, #24]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	619a      	str	r2, [r3, #24]
 80037de:	e060      	b.n	80038a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d11c      	bne.n	8003820 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80037f6:	f000 fc01 	bl	8003ffc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699a      	ldr	r2, [r3, #24]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003808:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6999      	ldr	r1, [r3, #24]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	021a      	lsls	r2, r3, #8
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	619a      	str	r2, [r3, #24]
 800381e:	e040      	b.n	80038a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b08      	cmp	r3, #8
 8003824:	d11b      	bne.n	800385e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003836:	f000 fc1e 	bl	8004076 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 020c 	bic.w	r2, r2, #12
 8003848:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69d9      	ldr	r1, [r3, #28]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	61da      	str	r2, [r3, #28]
 800385c:	e021      	b.n	80038a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b0c      	cmp	r3, #12
 8003862:	d11c      	bne.n	800389e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003874:	f000 fc3b 	bl	80040ee <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	69da      	ldr	r2, [r3, #28]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003886:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69d9      	ldr	r1, [r3, #28]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	021a      	lsls	r2, r3, #8
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	61da      	str	r2, [r3, #28]
 800389c:	e001      	b.n	80038a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e0ae      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b0c      	cmp	r3, #12
 80038de:	f200 809f 	bhi.w	8003a20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038e2:	a201      	add	r2, pc, #4	@ (adr r2, 80038e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e8:	0800391d 	.word	0x0800391d
 80038ec:	08003a21 	.word	0x08003a21
 80038f0:	08003a21 	.word	0x08003a21
 80038f4:	08003a21 	.word	0x08003a21
 80038f8:	0800395d 	.word	0x0800395d
 80038fc:	08003a21 	.word	0x08003a21
 8003900:	08003a21 	.word	0x08003a21
 8003904:	08003a21 	.word	0x08003a21
 8003908:	0800399f 	.word	0x0800399f
 800390c:	08003a21 	.word	0x08003a21
 8003910:	08003a21 	.word	0x08003a21
 8003914:	08003a21 	.word	0x08003a21
 8003918:	080039df 	.word	0x080039df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f976 	bl	8003c14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0208 	orr.w	r2, r2, #8
 8003936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0204 	bic.w	r2, r2, #4
 8003946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6999      	ldr	r1, [r3, #24]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	619a      	str	r2, [r3, #24]
      break;
 800395a:	e064      	b.n	8003a26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	4618      	mov	r0, r3
 8003964:	f000 f9bc 	bl	8003ce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6999      	ldr	r1, [r3, #24]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	021a      	lsls	r2, r3, #8
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	619a      	str	r2, [r3, #24]
      break;
 800399c:	e043      	b.n	8003a26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fa07 	bl	8003db8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69da      	ldr	r2, [r3, #28]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0208 	orr.w	r2, r2, #8
 80039b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0204 	bic.w	r2, r2, #4
 80039c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69d9      	ldr	r1, [r3, #28]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	61da      	str	r2, [r3, #28]
      break;
 80039dc:	e023      	b.n	8003a26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fa51 	bl	8003e8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69da      	ldr	r2, [r3, #28]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69d9      	ldr	r1, [r3, #28]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	021a      	lsls	r2, r3, #8
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	61da      	str	r2, [r3, #28]
      break;
 8003a1e:	e002      	b.n	8003a26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	75fb      	strb	r3, [r7, #23]
      break;
 8003a24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b0c      	cmp	r3, #12
 8003a4a:	d831      	bhi.n	8003ab0 <HAL_TIM_ReadCapturedValue+0x78>
 8003a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a54 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003a89 	.word	0x08003a89
 8003a58:	08003ab1 	.word	0x08003ab1
 8003a5c:	08003ab1 	.word	0x08003ab1
 8003a60:	08003ab1 	.word	0x08003ab1
 8003a64:	08003a93 	.word	0x08003a93
 8003a68:	08003ab1 	.word	0x08003ab1
 8003a6c:	08003ab1 	.word	0x08003ab1
 8003a70:	08003ab1 	.word	0x08003ab1
 8003a74:	08003a9d 	.word	0x08003a9d
 8003a78:	08003ab1 	.word	0x08003ab1
 8003a7c:	08003ab1 	.word	0x08003ab1
 8003a80:	08003ab1 	.word	0x08003ab1
 8003a84:	08003aa7 	.word	0x08003aa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8e:	60fb      	str	r3, [r7, #12]

      break;
 8003a90:	e00f      	b.n	8003ab2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a98:	60fb      	str	r3, [r7, #12]

      break;
 8003a9a:	e00a      	b.n	8003ab2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa2:	60fb      	str	r3, [r7, #12]

      break;
 8003aa4:	e005      	b.n	8003ab2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aac:	60fb      	str	r3, [r7, #12]

      break;
 8003aae:	e000      	b.n	8003ab2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003ab0:	bf00      	nop
  }

  return tmpreg;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a3a      	ldr	r2, [pc, #232]	@ (8003bf8 <TIM_Base_SetConfig+0xfc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00f      	beq.n	8003b34 <TIM_Base_SetConfig+0x38>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b1a:	d00b      	beq.n	8003b34 <TIM_Base_SetConfig+0x38>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a37      	ldr	r2, [pc, #220]	@ (8003bfc <TIM_Base_SetConfig+0x100>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d007      	beq.n	8003b34 <TIM_Base_SetConfig+0x38>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a36      	ldr	r2, [pc, #216]	@ (8003c00 <TIM_Base_SetConfig+0x104>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d003      	beq.n	8003b34 <TIM_Base_SetConfig+0x38>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a35      	ldr	r2, [pc, #212]	@ (8003c04 <TIM_Base_SetConfig+0x108>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d108      	bne.n	8003b46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf8 <TIM_Base_SetConfig+0xfc>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01b      	beq.n	8003b86 <TIM_Base_SetConfig+0x8a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b54:	d017      	beq.n	8003b86 <TIM_Base_SetConfig+0x8a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a28      	ldr	r2, [pc, #160]	@ (8003bfc <TIM_Base_SetConfig+0x100>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <TIM_Base_SetConfig+0x8a>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a27      	ldr	r2, [pc, #156]	@ (8003c00 <TIM_Base_SetConfig+0x104>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00f      	beq.n	8003b86 <TIM_Base_SetConfig+0x8a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a26      	ldr	r2, [pc, #152]	@ (8003c04 <TIM_Base_SetConfig+0x108>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00b      	beq.n	8003b86 <TIM_Base_SetConfig+0x8a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a25      	ldr	r2, [pc, #148]	@ (8003c08 <TIM_Base_SetConfig+0x10c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d007      	beq.n	8003b86 <TIM_Base_SetConfig+0x8a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a24      	ldr	r2, [pc, #144]	@ (8003c0c <TIM_Base_SetConfig+0x110>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d003      	beq.n	8003b86 <TIM_Base_SetConfig+0x8a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a23      	ldr	r2, [pc, #140]	@ (8003c10 <TIM_Base_SetConfig+0x114>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d108      	bne.n	8003b98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a0e      	ldr	r2, [pc, #56]	@ (8003bf8 <TIM_Base_SetConfig+0xfc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d103      	bne.n	8003bcc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d105      	bne.n	8003bea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f023 0201 	bic.w	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	611a      	str	r2, [r3, #16]
  }
}
 8003bea:	bf00      	nop
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40010000 	.word	0x40010000
 8003bfc:	40000400 	.word	0x40000400
 8003c00:	40000800 	.word	0x40000800
 8003c04:	40000c00 	.word	0x40000c00
 8003c08:	40014000 	.word	0x40014000
 8003c0c:	40014400 	.word	0x40014400
 8003c10:	40014800 	.word	0x40014800

08003c14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	f023 0201 	bic.w	r2, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0303 	bic.w	r3, r3, #3
 8003c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f023 0302 	bic.w	r3, r3, #2
 8003c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003cdc <TIM_OC1_SetConfig+0xc8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d10c      	bne.n	8003c8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f023 0308 	bic.w	r3, r3, #8
 8003c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f023 0304 	bic.w	r3, r3, #4
 8003c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a13      	ldr	r2, [pc, #76]	@ (8003cdc <TIM_OC1_SetConfig+0xc8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d111      	bne.n	8003cb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	621a      	str	r2, [r3, #32]
}
 8003cd0:	bf00      	nop
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	40010000 	.word	0x40010000

08003ce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f023 0210 	bic.w	r2, r3, #16
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f023 0320 	bic.w	r3, r3, #32
 8003d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003db4 <TIM_OC2_SetConfig+0xd4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d10d      	bne.n	8003d5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a15      	ldr	r2, [pc, #84]	@ (8003db4 <TIM_OC2_SetConfig+0xd4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d113      	bne.n	8003d8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	621a      	str	r2, [r3, #32]
}
 8003da6:	bf00      	nop
 8003da8:	371c      	adds	r7, #28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40010000 	.word	0x40010000

08003db8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0303 	bic.w	r3, r3, #3
 8003dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a1d      	ldr	r2, [pc, #116]	@ (8003e88 <TIM_OC3_SetConfig+0xd0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d10d      	bne.n	8003e32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a14      	ldr	r2, [pc, #80]	@ (8003e88 <TIM_OC3_SetConfig+0xd0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d113      	bne.n	8003e62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	621a      	str	r2, [r3, #32]
}
 8003e7c:	bf00      	nop
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	40010000 	.word	0x40010000

08003e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	031b      	lsls	r3, r3, #12
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a10      	ldr	r2, [pc, #64]	@ (8003f28 <TIM_OC4_SetConfig+0x9c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d109      	bne.n	8003f00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ef2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	019b      	lsls	r3, r3, #6
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40010000 	.word	0x40010000

08003f2c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f023 0201 	bic.w	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4a24      	ldr	r2, [pc, #144]	@ (8003fe8 <TIM_TI1_SetConfig+0xbc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d013      	beq.n	8003f82 <TIM_TI1_SetConfig+0x56>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f60:	d00f      	beq.n	8003f82 <TIM_TI1_SetConfig+0x56>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4a21      	ldr	r2, [pc, #132]	@ (8003fec <TIM_TI1_SetConfig+0xc0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00b      	beq.n	8003f82 <TIM_TI1_SetConfig+0x56>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4a20      	ldr	r2, [pc, #128]	@ (8003ff0 <TIM_TI1_SetConfig+0xc4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d007      	beq.n	8003f82 <TIM_TI1_SetConfig+0x56>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a1f      	ldr	r2, [pc, #124]	@ (8003ff4 <TIM_TI1_SetConfig+0xc8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d003      	beq.n	8003f82 <TIM_TI1_SetConfig+0x56>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff8 <TIM_TI1_SetConfig+0xcc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d101      	bne.n	8003f86 <TIM_TI1_SetConfig+0x5a>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <TIM_TI1_SetConfig+0x5c>
 8003f86:	2300      	movs	r3, #0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f023 0303 	bic.w	r3, r3, #3
 8003f92:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	e003      	b.n	8003fa6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f023 030a 	bic.w	r3, r3, #10
 8003fc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f003 030a 	and.w	r3, r3, #10
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	621a      	str	r2, [r3, #32]
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40010000 	.word	0x40010000
 8003fec:	40000400 	.word	0x40000400
 8003ff0:	40000800 	.word	0x40000800
 8003ff4:	40000c00 	.word	0x40000c00
 8003ff8:	40014000 	.word	0x40014000

08003ffc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	f023 0210 	bic.w	r2, r3, #16
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004028:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	021b      	lsls	r3, r3, #8
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800403a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	031b      	lsls	r3, r3, #12
 8004040:	b29b      	uxth	r3, r3
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800404e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	621a      	str	r2, [r3, #32]
}
 800406a:	bf00      	nop
 800406c:	371c      	adds	r7, #28
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004076:	b480      	push	{r7}
 8004078:	b087      	sub	sp, #28
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
 8004082:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f023 0303 	bic.w	r3, r3, #3
 80040a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80040c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	621a      	str	r2, [r3, #32]
}
 80040e2:	bf00      	nop
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b087      	sub	sp, #28
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	607a      	str	r2, [r7, #4]
 80040fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800411a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	021b      	lsls	r3, r3, #8
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800412c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	031b      	lsls	r3, r3, #12
 8004132:	b29b      	uxth	r3, r3
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004140:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	031b      	lsls	r3, r3, #12
 8004146:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	621a      	str	r2, [r3, #32]
}
 800415c:	bf00      	nop
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	2201      	movs	r2, #1
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	43db      	mvns	r3, r3
 800418a:	401a      	ands	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1a      	ldr	r2, [r3, #32]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f003 031f 	and.w	r3, r3, #31
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	fa01 f303 	lsl.w	r3, r1, r3
 80041a0:	431a      	orrs	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	621a      	str	r2, [r3, #32]
}
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
	...

080041dc <__NVIC_SetPriority>:
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	6039      	str	r1, [r7, #0]
 80041e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	db0a      	blt.n	8004206 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	490c      	ldr	r1, [pc, #48]	@ (8004228 <__NVIC_SetPriority+0x4c>)
 80041f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fa:	0112      	lsls	r2, r2, #4
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	440b      	add	r3, r1
 8004200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004204:	e00a      	b.n	800421c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	4908      	ldr	r1, [pc, #32]	@ (800422c <__NVIC_SetPriority+0x50>)
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	3b04      	subs	r3, #4
 8004214:	0112      	lsls	r2, r2, #4
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	440b      	add	r3, r1
 800421a:	761a      	strb	r2, [r3, #24]
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	e000e100 	.word	0xe000e100
 800422c:	e000ed00 	.word	0xe000ed00

08004230 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004234:	4b05      	ldr	r3, [pc, #20]	@ (800424c <SysTick_Handler+0x1c>)
 8004236:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004238:	f001 fb0e 	bl	8005858 <xTaskGetSchedulerState>
 800423c:	4603      	mov	r3, r0
 800423e:	2b01      	cmp	r3, #1
 8004240:	d001      	beq.n	8004246 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004242:	f001 ffc9 	bl	80061d8 <xPortSysTickHandler>
  }
}
 8004246:	bf00      	nop
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	e000e010 	.word	0xe000e010

08004250 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004254:	2100      	movs	r1, #0
 8004256:	f06f 0004 	mvn.w	r0, #4
 800425a:	f7ff ffbf 	bl	80041dc <__NVIC_SetPriority>
#endif
}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800426a:	f3ef 8305 	mrs	r3, IPSR
 800426e:	603b      	str	r3, [r7, #0]
  return(result);
 8004270:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004276:	f06f 0305 	mvn.w	r3, #5
 800427a:	607b      	str	r3, [r7, #4]
 800427c:	e00c      	b.n	8004298 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800427e:	4b0a      	ldr	r3, [pc, #40]	@ (80042a8 <osKernelInitialize+0x44>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d105      	bne.n	8004292 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004286:	4b08      	ldr	r3, [pc, #32]	@ (80042a8 <osKernelInitialize+0x44>)
 8004288:	2201      	movs	r2, #1
 800428a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800428c:	2300      	movs	r3, #0
 800428e:	607b      	str	r3, [r7, #4]
 8004290:	e002      	b.n	8004298 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004292:	f04f 33ff 	mov.w	r3, #4294967295
 8004296:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004298:	687b      	ldr	r3, [r7, #4]
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	2000039c 	.word	0x2000039c

080042ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042b2:	f3ef 8305 	mrs	r3, IPSR
 80042b6:	603b      	str	r3, [r7, #0]
  return(result);
 80042b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80042be:	f06f 0305 	mvn.w	r3, #5
 80042c2:	607b      	str	r3, [r7, #4]
 80042c4:	e010      	b.n	80042e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80042c6:	4b0b      	ldr	r3, [pc, #44]	@ (80042f4 <osKernelStart+0x48>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d109      	bne.n	80042e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80042ce:	f7ff ffbf 	bl	8004250 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80042d2:	4b08      	ldr	r3, [pc, #32]	@ (80042f4 <osKernelStart+0x48>)
 80042d4:	2202      	movs	r2, #2
 80042d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80042d8:	f000 fef8 	bl	80050cc <vTaskStartScheduler>
      stat = osOK;
 80042dc:	2300      	movs	r3, #0
 80042de:	607b      	str	r3, [r7, #4]
 80042e0:	e002      	b.n	80042e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80042e2:	f04f 33ff 	mov.w	r3, #4294967295
 80042e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042e8:	687b      	ldr	r3, [r7, #4]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	2000039c 	.word	0x2000039c

080042f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08e      	sub	sp, #56	@ 0x38
 80042fc:	af04      	add	r7, sp, #16
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004308:	f3ef 8305 	mrs	r3, IPSR
 800430c:	617b      	str	r3, [r7, #20]
  return(result);
 800430e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004310:	2b00      	cmp	r3, #0
 8004312:	d17e      	bne.n	8004412 <osThreadNew+0x11a>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d07b      	beq.n	8004412 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800431a:	2380      	movs	r3, #128	@ 0x80
 800431c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800431e:	2318      	movs	r3, #24
 8004320:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004322:	2300      	movs	r3, #0
 8004324:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004326:	f04f 33ff 	mov.w	r3, #4294967295
 800432a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d045      	beq.n	80043be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <osThreadNew+0x48>
        name = attr->name;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <osThreadNew+0x6e>
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	2b38      	cmp	r3, #56	@ 0x38
 8004358:	d805      	bhi.n	8004366 <osThreadNew+0x6e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <osThreadNew+0x72>
        return (NULL);
 8004366:	2300      	movs	r3, #0
 8004368:	e054      	b.n	8004414 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	089b      	lsrs	r3, r3, #2
 8004378:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00e      	beq.n	80043a0 <osThreadNew+0xa8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	2ba7      	cmp	r3, #167	@ 0xa7
 8004388:	d90a      	bls.n	80043a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800438e:	2b00      	cmp	r3, #0
 8004390:	d006      	beq.n	80043a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <osThreadNew+0xa8>
        mem = 1;
 800439a:	2301      	movs	r3, #1
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	e010      	b.n	80043c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10c      	bne.n	80043c2 <osThreadNew+0xca>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d108      	bne.n	80043c2 <osThreadNew+0xca>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d104      	bne.n	80043c2 <osThreadNew+0xca>
          mem = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61bb      	str	r3, [r7, #24]
 80043bc:	e001      	b.n	80043c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d110      	bne.n	80043ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043d0:	9202      	str	r2, [sp, #8]
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	6a3a      	ldr	r2, [r7, #32]
 80043dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fcd4 	bl	8004d8c <xTaskCreateStatic>
 80043e4:	4603      	mov	r3, r0
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	e013      	b.n	8004412 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d110      	bne.n	8004412 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	f107 0310 	add.w	r3, r7, #16
 80043f8:	9301      	str	r3, [sp, #4]
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 fcf2 	bl	8004dec <xTaskCreate>
 8004408:	4603      	mov	r3, r0
 800440a:	2b01      	cmp	r3, #1
 800440c:	d001      	beq.n	8004412 <osThreadNew+0x11a>
            hTask = NULL;
 800440e:	2300      	movs	r3, #0
 8004410:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004412:	693b      	ldr	r3, [r7, #16]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3728      	adds	r7, #40	@ 0x28
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004424:	f3ef 8305 	mrs	r3, IPSR
 8004428:	60bb      	str	r3, [r7, #8]
  return(result);
 800442a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <osDelay+0x1c>
    stat = osErrorISR;
 8004430:	f06f 0305 	mvn.w	r3, #5
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	e007      	b.n	8004448 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fe1e 	bl	8005084 <vTaskDelay>
    }
  }

  return (stat);
 8004448:	68fb      	ldr	r3, [r7, #12]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4a07      	ldr	r2, [pc, #28]	@ (8004480 <vApplicationGetIdleTaskMemory+0x2c>)
 8004464:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4a06      	ldr	r2, [pc, #24]	@ (8004484 <vApplicationGetIdleTaskMemory+0x30>)
 800446a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2280      	movs	r2, #128	@ 0x80
 8004470:	601a      	str	r2, [r3, #0]
}
 8004472:	bf00      	nop
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	200003a0 	.word	0x200003a0
 8004484:	20000448 	.word	0x20000448

08004488 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4a07      	ldr	r2, [pc, #28]	@ (80044b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004498:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4a06      	ldr	r2, [pc, #24]	@ (80044b8 <vApplicationGetTimerTaskMemory+0x30>)
 800449e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044a6:	601a      	str	r2, [r3, #0]
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	20000648 	.word	0x20000648
 80044b8:	200006f0 	.word	0x200006f0

080044bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f103 0208 	add.w	r2, r3, #8
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f04f 32ff 	mov.w	r2, #4294967295
 80044d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f103 0208 	add.w	r2, r3, #8
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f103 0208 	add.w	r2, r3, #8
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004516:	b480      	push	{r7}
 8004518:	b085      	sub	sp, #20
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	601a      	str	r2, [r3, #0]
}
 8004552:	bf00      	nop
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004574:	d103      	bne.n	800457e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	e00c      	b.n	8004598 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3308      	adds	r3, #8
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	e002      	b.n	800458c <vListInsert+0x2e>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	429a      	cmp	r2, r3
 8004596:	d2f6      	bcs.n	8004586 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	601a      	str	r2, [r3, #0]
}
 80045c4:	bf00      	nop
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6892      	ldr	r2, [r2, #8]
 80045e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6852      	ldr	r2, [r2, #4]
 80045f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d103      	bne.n	8004604 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	1e5a      	subs	r2, r3, #1
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8004632:	f001 fd67 	bl	8006104 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463e:	68f9      	ldr	r1, [r7, #12]
 8004640:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004642:	fb01 f303 	mul.w	r3, r1, r3
 8004646:	441a      	add	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004662:	3b01      	subs	r3, #1
 8004664:	68f9      	ldr	r1, [r7, #12]
 8004666:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004668:	fb01 f303 	mul.w	r3, r1, r3
 800466c:	441a      	add	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	22ff      	movs	r2, #255	@ 0xff
 8004676:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	22ff      	movs	r2, #255	@ 0xff
 800467e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d114      	bne.n	80046b2 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d01a      	beq.n	80046c6 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3310      	adds	r3, #16
 8004694:	4618      	mov	r0, r3
 8004696:	f000 ff57 	bl	8005548 <xTaskRemoveFromEventList>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d012      	beq.n	80046c6 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80046a0:	4b0c      	ldr	r3, [pc, #48]	@ (80046d4 <xQueueGenericReset+0xb0>)
 80046a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	e009      	b.n	80046c6 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3310      	adds	r3, #16
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff ff00 	bl	80044bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3324      	adds	r3, #36	@ 0x24
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fefb 	bl	80044bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80046c6:	f001 fd37 	bl	8006138 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80046ca:	2301      	movs	r3, #1
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	e000ed04 	.word	0xe000ed04

080046d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af02      	add	r7, sp, #8
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00d      	beq.n	800470c <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	4613      	mov	r3, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f805 	bl	8004716 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800470c:	697b      	ldr	r3, [r7, #20]
	}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
 8004722:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	e002      	b.n	8004738 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004744:	2101      	movs	r1, #1
 8004746:	69b8      	ldr	r0, [r7, #24]
 8004748:	f7ff ff6c 	bl	8004624 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	@ 0x28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800476a:	2300      	movs	r3, #0
 800476c:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004772:	f001 fcc7 	bl	8006104 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477e:	429a      	cmp	r2, r3
 8004780:	d302      	bcc.n	8004788 <xQueueGenericSend+0x2c>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d129      	bne.n	80047dc <xQueueGenericSend+0x80>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	68b9      	ldr	r1, [r7, #8]
 800478c:	6a38      	ldr	r0, [r7, #32]
 800478e:	f000 f98f 	bl	8004ab0 <prvCopyDataToQueue>
 8004792:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	2b00      	cmp	r3, #0
 800479a:	d010      	beq.n	80047be <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	3324      	adds	r3, #36	@ 0x24
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fed1 	bl	8005548 <xTaskRemoveFromEventList>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d013      	beq.n	80047d4 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047ac:	4b3f      	ldr	r3, [pc, #252]	@ (80048ac <xQueueGenericSend+0x150>)
 80047ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	e00a      	b.n	80047d4 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d007      	beq.n	80047d4 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047c4:	4b39      	ldr	r3, [pc, #228]	@ (80048ac <xQueueGenericSend+0x150>)
 80047c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047d4:	f001 fcb0 	bl	8006138 <vPortExitCritical>
				return pdPASS;
 80047d8:	2301      	movs	r3, #1
 80047da:	e063      	b.n	80048a4 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d103      	bne.n	80047ea <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047e2:	f001 fca9 	bl	8006138 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e05c      	b.n	80048a4 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d106      	bne.n	80047fe <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047f0:	f107 0314 	add.w	r3, r7, #20
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fefd 	bl	80055f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047fa:	2301      	movs	r3, #1
 80047fc:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047fe:	f001 fc9b 	bl	8006138 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004802:	f000 fcc3 	bl	800518c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004806:	f001 fc7d 	bl	8006104 <vPortEnterCritical>
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004810:	b25b      	sxtb	r3, r3
 8004812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004816:	d103      	bne.n	8004820 <xQueueGenericSend+0xc4>
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004826:	b25b      	sxtb	r3, r3
 8004828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482c:	d103      	bne.n	8004836 <xQueueGenericSend+0xda>
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004836:	f001 fc7f 	bl	8006138 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800483a:	1d3a      	adds	r2, r7, #4
 800483c:	f107 0314 	add.w	r3, r7, #20
 8004840:	4611      	mov	r1, r2
 8004842:	4618      	mov	r0, r3
 8004844:	f000 feec 	bl	8005620 <xTaskCheckForTimeOut>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d124      	bne.n	8004898 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800484e:	6a38      	ldr	r0, [r7, #32]
 8004850:	f000 fa26 	bl	8004ca0 <prvIsQueueFull>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d018      	beq.n	800488c <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	3310      	adds	r3, #16
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	4611      	mov	r1, r2
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fe3c 	bl	80054e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004868:	6a38      	ldr	r0, [r7, #32]
 800486a:	f000 f9b1 	bl	8004bd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800486e:	f000 fc9b 	bl	80051a8 <xTaskResumeAll>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	f47f af7c 	bne.w	8004772 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 800487a:	4b0c      	ldr	r3, [pc, #48]	@ (80048ac <xQueueGenericSend+0x150>)
 800487c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	e772      	b.n	8004772 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800488c:	6a38      	ldr	r0, [r7, #32]
 800488e:	f000 f99f 	bl	8004bd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004892:	f000 fc89 	bl	80051a8 <xTaskResumeAll>
 8004896:	e76c      	b.n	8004772 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004898:	6a38      	ldr	r0, [r7, #32]
 800489a:	f000 f999 	bl	8004bd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800489e:	f000 fc83 	bl	80051a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3728      	adds	r7, #40	@ 0x28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	e000ed04 	.word	0xe000ed04

080048b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08c      	sub	sp, #48	@ 0x30
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	62bb      	str	r3, [r7, #40]	@ 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80048c2:	f3ef 8211 	mrs	r2, BASEPRI
 80048c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	61ba      	str	r2, [r7, #24]
 80048d8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048da:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048dc:	627b      	str	r3, [r7, #36]	@ 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d302      	bcc.n	80048f0 <xQueueGenericSendFromISR+0x40>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d12f      	bne.n	8004950 <xQueueGenericSendFromISR+0xa0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fe:	61fb      	str	r3, [r7, #28]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004906:	f000 f8d3 	bl	8004ab0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800490a:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800490e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004912:	d112      	bne.n	800493a <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004918:	2b00      	cmp	r3, #0
 800491a:	d016      	beq.n	800494a <xQueueGenericSendFromISR+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800491c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491e:	3324      	adds	r3, #36	@ 0x24
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fe11 	bl	8005548 <xTaskRemoveFromEventList>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00e      	beq.n	800494a <xQueueGenericSendFromISR+0x9a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00b      	beq.n	800494a <xQueueGenericSendFromISR+0x9a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	e007      	b.n	800494a <xQueueGenericSendFromISR+0x9a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800493a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800493e:	3301      	adds	r3, #1
 8004940:	b2db      	uxtb	r3, r3
 8004942:	b25a      	sxtb	r2, r3
 8004944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800494a:	2301      	movs	r3, #1
 800494c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
 800494e:	e001      	b.n	8004954 <xQueueGenericSendFromISR+0xa4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004950:	2300      	movs	r3, #0
 8004952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004956:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800495e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004962:	4618      	mov	r0, r3
 8004964:	3730      	adds	r7, #48	@ 0x30
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08a      	sub	sp, #40	@ 0x28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004978:	2300      	movs	r3, #0
 800497a:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	623b      	str	r3, [r7, #32]
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004980:	f001 fbc0 	bl	8006104 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004988:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01f      	beq.n	80049d0 <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	6a38      	ldr	r0, [r7, #32]
 8004994:	f000 f8f6 	bl	8004b84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	1e5a      	subs	r2, r3, #1
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00f      	beq.n	80049c8 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	3310      	adds	r3, #16
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fdcb 	bl	8005548 <xTaskRemoveFromEventList>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049b8:	4b3c      	ldr	r3, [pc, #240]	@ (8004aac <xQueueReceive+0x140>)
 80049ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049c8:	f001 fbb6 	bl	8006138 <vPortExitCritical>
				return pdPASS;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e069      	b.n	8004aa4 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049d6:	f001 fbaf 	bl	8006138 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049da:	2300      	movs	r3, #0
 80049dc:	e062      	b.n	8004aa4 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d106      	bne.n	80049f2 <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049e4:	f107 0314 	add.w	r3, r7, #20
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fe03 	bl	80055f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049ee:	2301      	movs	r3, #1
 80049f0:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049f2:	f001 fba1 	bl	8006138 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049f6:	f000 fbc9 	bl	800518c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049fa:	f001 fb83 	bl	8006104 <vPortEnterCritical>
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a04:	b25b      	sxtb	r3, r3
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0a:	d103      	bne.n	8004a14 <xQueueReceive+0xa8>
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a1a:	b25b      	sxtb	r3, r3
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a20:	d103      	bne.n	8004a2a <xQueueReceive+0xbe>
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a2a:	f001 fb85 	bl	8006138 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a2e:	1d3a      	adds	r2, r7, #4
 8004a30:	f107 0314 	add.w	r3, r7, #20
 8004a34:	4611      	mov	r1, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fdf2 	bl	8005620 <xTaskCheckForTimeOut>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d123      	bne.n	8004a8a <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a42:	6a38      	ldr	r0, [r7, #32]
 8004a44:	f000 f916 	bl	8004c74 <prvIsQueueEmpty>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d017      	beq.n	8004a7e <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	3324      	adds	r3, #36	@ 0x24
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	4611      	mov	r1, r2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fd42 	bl	80054e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a5c:	6a38      	ldr	r0, [r7, #32]
 8004a5e:	f000 f8b7 	bl	8004bd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a62:	f000 fba1 	bl	80051a8 <xTaskResumeAll>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d189      	bne.n	8004980 <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004aac <xQueueReceive+0x140>)
 8004a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	e780      	b.n	8004980 <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a7e:	6a38      	ldr	r0, [r7, #32]
 8004a80:	f000 f8a6 	bl	8004bd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a84:	f000 fb90 	bl	80051a8 <xTaskResumeAll>
 8004a88:	e77a      	b.n	8004980 <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a8a:	6a38      	ldr	r0, [r7, #32]
 8004a8c:	f000 f8a0 	bl	8004bd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a90:	f000 fb8a 	bl	80051a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a94:	6a38      	ldr	r0, [r7, #32]
 8004a96:	f000 f8ed 	bl	8004c74 <prvIsQueueEmpty>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f43f af6f 	beq.w	8004980 <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004aa2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3728      	adds	r7, #40	@ 0x28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10d      	bne.n	8004aea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d14d      	bne.n	8004b72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 feda 	bl	8005894 <xTaskPriorityDisinherit>
 8004ae0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	609a      	str	r2, [r3, #8]
 8004ae8:	e043      	b.n	8004b72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d119      	bne.n	8004b24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6858      	ldr	r0, [r3, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af8:	461a      	mov	r2, r3
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	f001 fdd6 	bl	80066ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b08:	441a      	add	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d32b      	bcc.n	8004b72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	e026      	b.n	8004b72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	68d8      	ldr	r0, [r3, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	68b9      	ldr	r1, [r7, #8]
 8004b30:	f001 fdbc 	bl	80066ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3c:	425b      	negs	r3, r3
 8004b3e:	441a      	add	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d207      	bcs.n	8004b60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b58:	425b      	negs	r3, r3
 8004b5a:	441a      	add	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d105      	bne.n	8004b72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004b7a:	697b      	ldr	r3, [r7, #20]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d018      	beq.n	8004bc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	441a      	add	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d303      	bcc.n	8004bb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68d9      	ldr	r1, [r3, #12]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6838      	ldr	r0, [r7, #0]
 8004bc4:	f001 fd72 	bl	80066ac <memcpy>
	}
}
 8004bc8:	bf00      	nop
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004bd8:	f001 fa94 	bl	8006104 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004be2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004be4:	e011      	b.n	8004c0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d012      	beq.n	8004c14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3324      	adds	r3, #36	@ 0x24
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fca8 	bl	8005548 <xTaskRemoveFromEventList>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004bfe:	f000 fd55 	bl	80056ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	dce9      	bgt.n	8004be6 <prvUnlockQueue+0x16>
 8004c12:	e000      	b.n	8004c16 <prvUnlockQueue+0x46>
					break;
 8004c14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	22ff      	movs	r2, #255	@ 0xff
 8004c1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004c1e:	f001 fa8b 	bl	8006138 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c22:	f001 fa6f 	bl	8006104 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c2e:	e011      	b.n	8004c54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d012      	beq.n	8004c5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3310      	adds	r3, #16
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fc83 	bl	8005548 <xTaskRemoveFromEventList>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c48:	f000 fd30 	bl	80056ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c4c:	7bbb      	ldrb	r3, [r7, #14]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	dce9      	bgt.n	8004c30 <prvUnlockQueue+0x60>
 8004c5c:	e000      	b.n	8004c60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	22ff      	movs	r2, #255	@ 0xff
 8004c64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004c68:	f001 fa66 	bl	8006138 <vPortExitCritical>
}
 8004c6c:	bf00      	nop
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c7c:	f001 fa42 	bl	8006104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d102      	bne.n	8004c8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	e001      	b.n	8004c92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c92:	f001 fa51 	bl	8006138 <vPortExitCritical>

	return xReturn;
 8004c96:	68fb      	ldr	r3, [r7, #12]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ca8:	f001 fa2c 	bl	8006104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d102      	bne.n	8004cbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e001      	b.n	8004cc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cc2:	f001 fa39 	bl	8006138 <vPortExitCritical>

	return xReturn;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	e014      	b.n	8004d0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8004d20 <vQueueAddToRegistry+0x50>)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10b      	bne.n	8004d04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004cec:	490c      	ldr	r1, [pc, #48]	@ (8004d20 <vQueueAddToRegistry+0x50>)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8004d20 <vQueueAddToRegistry+0x50>)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d02:	e006      	b.n	8004d12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	3301      	adds	r3, #1
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b07      	cmp	r3, #7
 8004d0e:	d9e7      	bls.n	8004ce0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20000af0 	.word	0x20000af0

08004d24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d34:	f001 f9e6 	bl	8006104 <vPortEnterCritical>
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d3e:	b25b      	sxtb	r3, r3
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d103      	bne.n	8004d4e <vQueueWaitForMessageRestricted+0x2a>
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d54:	b25b      	sxtb	r3, r3
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	d103      	bne.n	8004d64 <vQueueWaitForMessageRestricted+0x40>
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d64:	f001 f9e8 	bl	8006138 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d106      	bne.n	8004d7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	3324      	adds	r3, #36	@ 0x24
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fbc7 	bl	800550c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d7e:	6978      	ldr	r0, [r7, #20]
 8004d80:	f7ff ff26 	bl	8004bd0 <prvUnlockQueue>
	}
 8004d84:	bf00      	nop
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08a      	sub	sp, #40	@ 0x28
 8004d90:	af04      	add	r7, sp, #16
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01e      	beq.n	8004dde <xTaskCreateStatic+0x52>
 8004da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d01b      	beq.n	8004dde <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da8:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004db8:	2300      	movs	r3, #0
 8004dba:	9303      	str	r3, [sp, #12]
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	9302      	str	r3, [sp, #8]
 8004dc0:	f107 0310 	add.w	r3, r7, #16
 8004dc4:	9301      	str	r3, [sp, #4]
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f851 	bl	8004e78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dd6:	6978      	ldr	r0, [r7, #20]
 8004dd8:	f000 f8e4 	bl	8004fa4 <prvAddNewTaskToReadyList>
 8004ddc:	e001      	b.n	8004de2 <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 8004de2:	693b      	ldr	r3, [r7, #16]
	}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08c      	sub	sp, #48	@ 0x30
 8004df0:	af04      	add	r7, sp, #16
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004dfc:	88fb      	ldrh	r3, [r7, #6]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4618      	mov	r0, r3
 8004e02:	f001 fa39 	bl	8006278 <pvPortMalloc>
 8004e06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00e      	beq.n	8004e2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e0e:	20a8      	movs	r0, #168	@ 0xa8
 8004e10:	f001 fa32 	bl	8006278 <pvPortMalloc>
 8004e14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e22:	e005      	b.n	8004e30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e24:	6978      	ldr	r0, [r7, #20]
 8004e26:	f001 fac1 	bl	80063ac <vPortFree>
 8004e2a:	e001      	b.n	8004e30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d017      	beq.n	8004e66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e3e:	88fa      	ldrh	r2, [r7, #6]
 8004e40:	2300      	movs	r3, #0
 8004e42:	9303      	str	r3, [sp, #12]
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	9302      	str	r3, [sp, #8]
 8004e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e4a:	9301      	str	r3, [sp, #4]
 8004e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	68b9      	ldr	r1, [r7, #8]
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f80f 	bl	8004e78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e5a:	69f8      	ldr	r0, [r7, #28]
 8004e5c:	f000 f8a2 	bl	8004fa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e60:	2301      	movs	r3, #1
 8004e62:	61bb      	str	r3, [r7, #24]
 8004e64:	e002      	b.n	8004e6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e66:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e6c:	69bb      	ldr	r3, [r7, #24]
	}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3720      	adds	r7, #32
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e88:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	461a      	mov	r2, r3
 8004e90:	21a5      	movs	r1, #165	@ 0xa5
 8004e92:	f001 fb87 	bl	80065a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f023 0307 	bic.w	r3, r3, #7
 8004eae:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01f      	beq.n	8004ef6 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	e012      	b.n	8004ee2 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	7819      	ldrb	r1, [r3, #0]
 8004ec4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	4413      	add	r3, r2
 8004eca:	3334      	adds	r3, #52	@ 0x34
 8004ecc:	460a      	mov	r2, r1
 8004ece:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d006      	beq.n	8004eea <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b0f      	cmp	r3, #15
 8004ee6:	d9e9      	bls.n	8004ebc <prvInitialiseNewTask+0x44>
 8004ee8:	e000      	b.n	8004eec <prvInitialiseNewTask+0x74>
			{
				break;
 8004eea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ef4:	e003      	b.n	8004efe <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	2b37      	cmp	r3, #55	@ 0x37
 8004f02:	d901      	bls.n	8004f08 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f04:	2337      	movs	r3, #55	@ 0x37
 8004f06:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0a:	6a3a      	ldr	r2, [r7, #32]
 8004f0c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f10:	6a3a      	ldr	r2, [r7, #32]
 8004f12:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f16:	2200      	movs	r2, #0
 8004f18:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff faec 	bl	80044fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f26:	3318      	adds	r3, #24
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff fae7 	bl	80044fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f42:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f46:	2200      	movs	r2, #0
 8004f48:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f56:	3354      	adds	r3, #84	@ 0x54
 8004f58:	224c      	movs	r2, #76	@ 0x4c
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f001 fb21 	bl	80065a4 <memset>
 8004f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f64:	4a0c      	ldr	r2, [pc, #48]	@ (8004f98 <prvInitialiseNewTask+0x120>)
 8004f66:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8004f9c <prvInitialiseNewTask+0x124>)
 8004f6c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f70:	4a0b      	ldr	r2, [pc, #44]	@ (8004fa0 <prvInitialiseNewTask+0x128>)
 8004f72:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	68f9      	ldr	r1, [r7, #12]
 8004f78:	6938      	ldr	r0, [r7, #16]
 8004f7a:	f001 f81d 	bl	8005fb8 <pxPortInitialiseStack>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f82:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f90:	bf00      	nop
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	20004d7c 	.word	0x20004d7c
 8004f9c:	20004de4 	.word	0x20004de4
 8004fa0:	20004e4c 	.word	0x20004e4c

08004fa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fac:	f001 f8aa 	bl	8006104 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8005068 <prvAddNewTaskToReadyList+0xc4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	4a2c      	ldr	r2, [pc, #176]	@ (8005068 <prvAddNewTaskToReadyList+0xc4>)
 8004fb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fba:	4b2c      	ldr	r3, [pc, #176]	@ (800506c <prvAddNewTaskToReadyList+0xc8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d109      	bne.n	8004fd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fc2:	4a2a      	ldr	r2, [pc, #168]	@ (800506c <prvAddNewTaskToReadyList+0xc8>)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fc8:	4b27      	ldr	r3, [pc, #156]	@ (8005068 <prvAddNewTaskToReadyList+0xc4>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d110      	bne.n	8004ff2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fd0:	f000 fb90 	bl	80056f4 <prvInitialiseTaskLists>
 8004fd4:	e00d      	b.n	8004ff2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fd6:	4b26      	ldr	r3, [pc, #152]	@ (8005070 <prvAddNewTaskToReadyList+0xcc>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d109      	bne.n	8004ff2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fde:	4b23      	ldr	r3, [pc, #140]	@ (800506c <prvAddNewTaskToReadyList+0xc8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d802      	bhi.n	8004ff2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004fec:	4a1f      	ldr	r2, [pc, #124]	@ (800506c <prvAddNewTaskToReadyList+0xc8>)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ff2:	4b20      	ldr	r3, [pc, #128]	@ (8005074 <prvAddNewTaskToReadyList+0xd0>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	4a1e      	ldr	r2, [pc, #120]	@ (8005074 <prvAddNewTaskToReadyList+0xd0>)
 8004ffa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8005074 <prvAddNewTaskToReadyList+0xd0>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005008:	4b1b      	ldr	r3, [pc, #108]	@ (8005078 <prvAddNewTaskToReadyList+0xd4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	429a      	cmp	r2, r3
 800500e:	d903      	bls.n	8005018 <prvAddNewTaskToReadyList+0x74>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005014:	4a18      	ldr	r2, [pc, #96]	@ (8005078 <prvAddNewTaskToReadyList+0xd4>)
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4a15      	ldr	r2, [pc, #84]	@ (800507c <prvAddNewTaskToReadyList+0xd8>)
 8005026:	441a      	add	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3304      	adds	r3, #4
 800502c:	4619      	mov	r1, r3
 800502e:	4610      	mov	r0, r2
 8005030:	f7ff fa71 	bl	8004516 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005034:	f001 f880 	bl	8006138 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005038:	4b0d      	ldr	r3, [pc, #52]	@ (8005070 <prvAddNewTaskToReadyList+0xcc>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00e      	beq.n	800505e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005040:	4b0a      	ldr	r3, [pc, #40]	@ (800506c <prvAddNewTaskToReadyList+0xc8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504a:	429a      	cmp	r2, r3
 800504c:	d207      	bcs.n	800505e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800504e:	4b0c      	ldr	r3, [pc, #48]	@ (8005080 <prvAddNewTaskToReadyList+0xdc>)
 8005050:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800505e:	bf00      	nop
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20001004 	.word	0x20001004
 800506c:	20000b30 	.word	0x20000b30
 8005070:	20001010 	.word	0x20001010
 8005074:	20001020 	.word	0x20001020
 8005078:	2000100c 	.word	0x2000100c
 800507c:	20000b34 	.word	0x20000b34
 8005080:	e000ed04 	.word	0xe000ed04

08005084 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d008      	beq.n	80050a8 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8005096:	f000 f879 	bl	800518c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800509a:	2100      	movs	r1, #0
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fc45 	bl	800592c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050a2:	f000 f881 	bl	80051a8 <xTaskResumeAll>
 80050a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d107      	bne.n	80050be <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 80050ae:	4b06      	ldr	r3, [pc, #24]	@ (80050c8 <vTaskDelay+0x44>)
 80050b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050be:	bf00      	nop
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	e000ed04 	.word	0xe000ed04

080050cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08a      	sub	sp, #40	@ 0x28
 80050d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050da:	1d3a      	adds	r2, r7, #4
 80050dc:	f107 0108 	add.w	r1, r7, #8
 80050e0:	f107 030c 	add.w	r3, r7, #12
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff f9b5 	bl	8004454 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	9202      	str	r2, [sp, #8]
 80050f2:	9301      	str	r3, [sp, #4]
 80050f4:	2300      	movs	r3, #0
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	2300      	movs	r3, #0
 80050fa:	460a      	mov	r2, r1
 80050fc:	491b      	ldr	r1, [pc, #108]	@ (800516c <vTaskStartScheduler+0xa0>)
 80050fe:	481c      	ldr	r0, [pc, #112]	@ (8005170 <vTaskStartScheduler+0xa4>)
 8005100:	f7ff fe44 	bl	8004d8c <xTaskCreateStatic>
 8005104:	4603      	mov	r3, r0
 8005106:	4a1b      	ldr	r2, [pc, #108]	@ (8005174 <vTaskStartScheduler+0xa8>)
 8005108:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800510a:	4b1a      	ldr	r3, [pc, #104]	@ (8005174 <vTaskStartScheduler+0xa8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 8005112:	2301      	movs	r3, #1
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	e001      	b.n	800511c <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d102      	bne.n	8005128 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8005122:	f000 fc57 	bl	80059d4 <xTimerCreateTimerTask>
 8005126:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d11a      	bne.n	8005164 <vTaskStartScheduler+0x98>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	613b      	str	r3, [r7, #16]
}
 8005140:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005142:	4b0d      	ldr	r3, [pc, #52]	@ (8005178 <vTaskStartScheduler+0xac>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3354      	adds	r3, #84	@ 0x54
 8005148:	4a0c      	ldr	r2, [pc, #48]	@ (800517c <vTaskStartScheduler+0xb0>)
 800514a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800514c:	4b0c      	ldr	r3, [pc, #48]	@ (8005180 <vTaskStartScheduler+0xb4>)
 800514e:	f04f 32ff 	mov.w	r2, #4294967295
 8005152:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005154:	4b0b      	ldr	r3, [pc, #44]	@ (8005184 <vTaskStartScheduler+0xb8>)
 8005156:	2201      	movs	r2, #1
 8005158:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800515a:	4b0b      	ldr	r3, [pc, #44]	@ (8005188 <vTaskStartScheduler+0xbc>)
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005160:	f000 ffa6 	bl	80060b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005164:	bf00      	nop
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	080067b0 	.word	0x080067b0
 8005170:	080056c5 	.word	0x080056c5
 8005174:	20001028 	.word	0x20001028
 8005178:	20000b30 	.word	0x20000b30
 800517c:	20000108 	.word	0x20000108
 8005180:	20001024 	.word	0x20001024
 8005184:	20001010 	.word	0x20001010
 8005188:	20001008 	.word	0x20001008

0800518c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005190:	4b04      	ldr	r3, [pc, #16]	@ (80051a4 <vTaskSuspendAll+0x18>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3301      	adds	r3, #1
 8005196:	4a03      	ldr	r2, [pc, #12]	@ (80051a4 <vTaskSuspendAll+0x18>)
 8005198:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800519a:	bf00      	nop
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	2000102c 	.word	0x2000102c

080051a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051b6:	f000 ffa5 	bl	8006104 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051ba:	4b39      	ldr	r3, [pc, #228]	@ (80052a0 <xTaskResumeAll+0xf8>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3b01      	subs	r3, #1
 80051c0:	4a37      	ldr	r2, [pc, #220]	@ (80052a0 <xTaskResumeAll+0xf8>)
 80051c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051c4:	4b36      	ldr	r3, [pc, #216]	@ (80052a0 <xTaskResumeAll+0xf8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d162      	bne.n	8005292 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051cc:	4b35      	ldr	r3, [pc, #212]	@ (80052a4 <xTaskResumeAll+0xfc>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d05e      	beq.n	8005292 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051d4:	e02f      	b.n	8005236 <xTaskResumeAll+0x8e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051d6:	4b34      	ldr	r3, [pc, #208]	@ (80052a8 <xTaskResumeAll+0x100>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3318      	adds	r3, #24
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff f9f4 	bl	80045d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3304      	adds	r3, #4
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff f9ef 	bl	80045d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051f6:	4b2d      	ldr	r3, [pc, #180]	@ (80052ac <xTaskResumeAll+0x104>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d903      	bls.n	8005206 <xTaskResumeAll+0x5e>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005202:	4a2a      	ldr	r2, [pc, #168]	@ (80052ac <xTaskResumeAll+0x104>)
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800520a:	4613      	mov	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4a27      	ldr	r2, [pc, #156]	@ (80052b0 <xTaskResumeAll+0x108>)
 8005214:	441a      	add	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3304      	adds	r3, #4
 800521a:	4619      	mov	r1, r3
 800521c:	4610      	mov	r0, r2
 800521e:	f7ff f97a 	bl	8004516 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005226:	4b23      	ldr	r3, [pc, #140]	@ (80052b4 <xTaskResumeAll+0x10c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522c:	429a      	cmp	r2, r3
 800522e:	d302      	bcc.n	8005236 <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 8005230:	4b21      	ldr	r3, [pc, #132]	@ (80052b8 <xTaskResumeAll+0x110>)
 8005232:	2201      	movs	r2, #1
 8005234:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005236:	4b1c      	ldr	r3, [pc, #112]	@ (80052a8 <xTaskResumeAll+0x100>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1cb      	bne.n	80051d6 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005244:	f000 fae8 	bl	8005818 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005248:	4b1c      	ldr	r3, [pc, #112]	@ (80052bc <xTaskResumeAll+0x114>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d010      	beq.n	8005276 <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005254:	f000 f846 	bl	80052e4 <xTaskIncrementTick>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 800525e:	4b16      	ldr	r3, [pc, #88]	@ (80052b8 <xTaskResumeAll+0x110>)
 8005260:	2201      	movs	r2, #1
 8005262:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3b01      	subs	r3, #1
 8005268:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f1      	bne.n	8005254 <xTaskResumeAll+0xac>

						xPendedTicks = 0;
 8005270:	4b12      	ldr	r3, [pc, #72]	@ (80052bc <xTaskResumeAll+0x114>)
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005276:	4b10      	ldr	r3, [pc, #64]	@ (80052b8 <xTaskResumeAll+0x110>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800527e:	2301      	movs	r3, #1
 8005280:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005282:	4b0f      	ldr	r3, [pc, #60]	@ (80052c0 <xTaskResumeAll+0x118>)
 8005284:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005292:	f000 ff51 	bl	8006138 <vPortExitCritical>

	return xAlreadyYielded;
 8005296:	68bb      	ldr	r3, [r7, #8]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	2000102c 	.word	0x2000102c
 80052a4:	20001004 	.word	0x20001004
 80052a8:	20000fc4 	.word	0x20000fc4
 80052ac:	2000100c 	.word	0x2000100c
 80052b0:	20000b34 	.word	0x20000b34
 80052b4:	20000b30 	.word	0x20000b30
 80052b8:	20001018 	.word	0x20001018
 80052bc:	20001014 	.word	0x20001014
 80052c0:	e000ed04 	.word	0xe000ed04

080052c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80052ca:	4b05      	ldr	r3, [pc, #20]	@ (80052e0 <xTaskGetTickCount+0x1c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80052d0:	687b      	ldr	r3, [r7, #4]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	20001008 	.word	0x20001008

080052e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052ea:	2300      	movs	r3, #0
 80052ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ee:	4b46      	ldr	r3, [pc, #280]	@ (8005408 <xTaskIncrementTick+0x124>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d17e      	bne.n	80053f4 <xTaskIncrementTick+0x110>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052f6:	4b45      	ldr	r3, [pc, #276]	@ (800540c <xTaskIncrementTick+0x128>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3301      	adds	r3, #1
 80052fc:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052fe:	4a43      	ldr	r2, [pc, #268]	@ (800540c <xTaskIncrementTick+0x128>)
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d110      	bne.n	800532c <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 800530a:	4b41      	ldr	r3, [pc, #260]	@ (8005410 <xTaskIncrementTick+0x12c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	4b40      	ldr	r3, [pc, #256]	@ (8005414 <xTaskIncrementTick+0x130>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a3e      	ldr	r2, [pc, #248]	@ (8005410 <xTaskIncrementTick+0x12c>)
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	4a3e      	ldr	r2, [pc, #248]	@ (8005414 <xTaskIncrementTick+0x130>)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	4b3e      	ldr	r3, [pc, #248]	@ (8005418 <xTaskIncrementTick+0x134>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3301      	adds	r3, #1
 8005324:	4a3c      	ldr	r2, [pc, #240]	@ (8005418 <xTaskIncrementTick+0x134>)
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	f000 fa76 	bl	8005818 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800532c:	4b3b      	ldr	r3, [pc, #236]	@ (800541c <xTaskIncrementTick+0x138>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	429a      	cmp	r2, r3
 8005334:	d349      	bcc.n	80053ca <xTaskIncrementTick+0xe6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005336:	4b36      	ldr	r3, [pc, #216]	@ (8005410 <xTaskIncrementTick+0x12c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d104      	bne.n	800534a <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005340:	4b36      	ldr	r3, [pc, #216]	@ (800541c <xTaskIncrementTick+0x138>)
 8005342:	f04f 32ff 	mov.w	r2, #4294967295
 8005346:	601a      	str	r2, [r3, #0]
					break;
 8005348:	e03f      	b.n	80053ca <xTaskIncrementTick+0xe6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800534a:	4b31      	ldr	r3, [pc, #196]	@ (8005410 <xTaskIncrementTick+0x12c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	429a      	cmp	r2, r3
 8005360:	d203      	bcs.n	800536a <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005362:	4a2e      	ldr	r2, [pc, #184]	@ (800541c <xTaskIncrementTick+0x138>)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005368:	e02f      	b.n	80053ca <xTaskIncrementTick+0xe6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	3304      	adds	r3, #4
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff f92e 	bl	80045d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	3318      	adds	r3, #24
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff f925 	bl	80045d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800538a:	4b25      	ldr	r3, [pc, #148]	@ (8005420 <xTaskIncrementTick+0x13c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d903      	bls.n	800539a <xTaskIncrementTick+0xb6>
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005396:	4a22      	ldr	r2, [pc, #136]	@ (8005420 <xTaskIncrementTick+0x13c>)
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4a1f      	ldr	r2, [pc, #124]	@ (8005424 <xTaskIncrementTick+0x140>)
 80053a8:	441a      	add	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	3304      	adds	r3, #4
 80053ae:	4619      	mov	r1, r3
 80053b0:	4610      	mov	r0, r2
 80053b2:	f7ff f8b0 	bl	8004516 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005428 <xTaskIncrementTick+0x144>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d3b8      	bcc.n	8005336 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 80053c4:	2301      	movs	r3, #1
 80053c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053c8:	e7b5      	b.n	8005336 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053ca:	4b17      	ldr	r3, [pc, #92]	@ (8005428 <xTaskIncrementTick+0x144>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d0:	4914      	ldr	r1, [pc, #80]	@ (8005424 <xTaskIncrementTick+0x140>)
 80053d2:	4613      	mov	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d901      	bls.n	80053e6 <xTaskIncrementTick+0x102>
			{
				xSwitchRequired = pdTRUE;
 80053e2:	2301      	movs	r3, #1
 80053e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80053e6:	4b11      	ldr	r3, [pc, #68]	@ (800542c <xTaskIncrementTick+0x148>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d007      	beq.n	80053fe <xTaskIncrementTick+0x11a>
			{
				xSwitchRequired = pdTRUE;
 80053ee:	2301      	movs	r3, #1
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	e004      	b.n	80053fe <xTaskIncrementTick+0x11a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80053f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005430 <xTaskIncrementTick+0x14c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3301      	adds	r3, #1
 80053fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005430 <xTaskIncrementTick+0x14c>)
 80053fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80053fe:	697b      	ldr	r3, [r7, #20]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	2000102c 	.word	0x2000102c
 800540c:	20001008 	.word	0x20001008
 8005410:	20000fbc 	.word	0x20000fbc
 8005414:	20000fc0 	.word	0x20000fc0
 8005418:	2000101c 	.word	0x2000101c
 800541c:	20001024 	.word	0x20001024
 8005420:	2000100c 	.word	0x2000100c
 8005424:	20000b34 	.word	0x20000b34
 8005428:	20000b30 	.word	0x20000b30
 800542c:	20001018 	.word	0x20001018
 8005430:	20001014 	.word	0x20001014

08005434 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800543a:	4b23      	ldr	r3, [pc, #140]	@ (80054c8 <vTaskSwitchContext+0x94>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005442:	4b22      	ldr	r3, [pc, #136]	@ (80054cc <vTaskSwitchContext+0x98>)
 8005444:	2201      	movs	r2, #1
 8005446:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005448:	e038      	b.n	80054bc <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 800544a:	4b20      	ldr	r3, [pc, #128]	@ (80054cc <vTaskSwitchContext+0x98>)
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005450:	4b1f      	ldr	r3, [pc, #124]	@ (80054d0 <vTaskSwitchContext+0x9c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	607b      	str	r3, [r7, #4]
 8005456:	e002      	b.n	800545e <vTaskSwitchContext+0x2a>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3b01      	subs	r3, #1
 800545c:	607b      	str	r3, [r7, #4]
 800545e:	491d      	ldr	r1, [pc, #116]	@ (80054d4 <vTaskSwitchContext+0xa0>)
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	4613      	mov	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	440b      	add	r3, r1
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0f2      	beq.n	8005458 <vTaskSwitchContext+0x24>
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4a15      	ldr	r2, [pc, #84]	@ (80054d4 <vTaskSwitchContext+0xa0>)
 800547e:	4413      	add	r3, r2
 8005480:	603b      	str	r3, [r7, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	605a      	str	r2, [r3, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	3308      	adds	r3, #8
 8005494:	429a      	cmp	r2, r3
 8005496:	d104      	bne.n	80054a2 <vTaskSwitchContext+0x6e>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	4a0b      	ldr	r2, [pc, #44]	@ (80054d8 <vTaskSwitchContext+0xa4>)
 80054aa:	6013      	str	r3, [r2, #0]
 80054ac:	4a08      	ldr	r2, [pc, #32]	@ (80054d0 <vTaskSwitchContext+0x9c>)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054b2:	4b09      	ldr	r3, [pc, #36]	@ (80054d8 <vTaskSwitchContext+0xa4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3354      	adds	r3, #84	@ 0x54
 80054b8:	4a08      	ldr	r2, [pc, #32]	@ (80054dc <vTaskSwitchContext+0xa8>)
 80054ba:	6013      	str	r3, [r2, #0]
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	2000102c 	.word	0x2000102c
 80054cc:	20001018 	.word	0x20001018
 80054d0:	2000100c 	.word	0x2000100c
 80054d4:	20000b34 	.word	0x20000b34
 80054d8:	20000b30 	.word	0x20000b30
 80054dc:	20000108 	.word	0x20000108

080054e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054ea:	4b07      	ldr	r3, [pc, #28]	@ (8005508 <vTaskPlaceOnEventList+0x28>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3318      	adds	r3, #24
 80054f0:	4619      	mov	r1, r3
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff f833 	bl	800455e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054f8:	2101      	movs	r1, #1
 80054fa:	6838      	ldr	r0, [r7, #0]
 80054fc:	f000 fa16 	bl	800592c <prvAddCurrentTaskToDelayedList>
}
 8005500:	bf00      	nop
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	20000b30 	.word	0x20000b30

0800550c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005518:	4b0a      	ldr	r3, [pc, #40]	@ (8005544 <vTaskPlaceOnEventListRestricted+0x38>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3318      	adds	r3, #24
 800551e:	4619      	mov	r1, r3
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f7fe fff8 	bl	8004516 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 800552c:	f04f 33ff 	mov.w	r3, #4294967295
 8005530:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	68b8      	ldr	r0, [r7, #8]
 8005536:	f000 f9f9 	bl	800592c <prvAddCurrentTaskToDelayedList>
	}
 800553a:	bf00      	nop
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000b30 	.word	0x20000b30

08005548 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	3318      	adds	r3, #24
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff f837 	bl	80045d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005562:	4b1e      	ldr	r3, [pc, #120]	@ (80055dc <xTaskRemoveFromEventList+0x94>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d11d      	bne.n	80055a6 <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	3304      	adds	r3, #4
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff f82e 	bl	80045d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005578:	4b19      	ldr	r3, [pc, #100]	@ (80055e0 <xTaskRemoveFromEventList+0x98>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d903      	bls.n	8005588 <xTaskRemoveFromEventList+0x40>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005584:	4a16      	ldr	r2, [pc, #88]	@ (80055e0 <xTaskRemoveFromEventList+0x98>)
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4a13      	ldr	r2, [pc, #76]	@ (80055e4 <xTaskRemoveFromEventList+0x9c>)
 8005596:	441a      	add	r2, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	3304      	adds	r3, #4
 800559c:	4619      	mov	r1, r3
 800559e:	4610      	mov	r0, r2
 80055a0:	f7fe ffb9 	bl	8004516 <vListInsertEnd>
 80055a4:	e005      	b.n	80055b2 <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	3318      	adds	r3, #24
 80055aa:	4619      	mov	r1, r3
 80055ac:	480e      	ldr	r0, [pc, #56]	@ (80055e8 <xTaskRemoveFromEventList+0xa0>)
 80055ae:	f7fe ffb2 	bl	8004516 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b6:	4b0d      	ldr	r3, [pc, #52]	@ (80055ec <xTaskRemoveFromEventList+0xa4>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055bc:	429a      	cmp	r2, r3
 80055be:	d905      	bls.n	80055cc <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055c0:	2301      	movs	r3, #1
 80055c2:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055c4:	4b0a      	ldr	r3, [pc, #40]	@ (80055f0 <xTaskRemoveFromEventList+0xa8>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e001      	b.n	80055d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80055d0:	68fb      	ldr	r3, [r7, #12]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	2000102c 	.word	0x2000102c
 80055e0:	2000100c 	.word	0x2000100c
 80055e4:	20000b34 	.word	0x20000b34
 80055e8:	20000fc4 	.word	0x20000fc4
 80055ec:	20000b30 	.word	0x20000b30
 80055f0:	20001018 	.word	0x20001018

080055f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055fc:	4b06      	ldr	r3, [pc, #24]	@ (8005618 <vTaskInternalSetTimeOutState+0x24>)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005604:	4b05      	ldr	r3, [pc, #20]	@ (800561c <vTaskInternalSetTimeOutState+0x28>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	605a      	str	r2, [r3, #4]
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	2000101c 	.word	0x2000101c
 800561c:	20001008 	.word	0x20001008

08005620 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 800562a:	f000 fd6b 	bl	8006104 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800562e:	4b1d      	ldr	r3, [pc, #116]	@ (80056a4 <xTaskCheckForTimeOut+0x84>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005646:	d102      	bne.n	800564e <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	e023      	b.n	8005696 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4b15      	ldr	r3, [pc, #84]	@ (80056a8 <xTaskCheckForTimeOut+0x88>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d007      	beq.n	800566a <xTaskCheckForTimeOut+0x4a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	429a      	cmp	r2, r3
 8005662:	d302      	bcc.n	800566a <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005664:	2301      	movs	r3, #1
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	e015      	b.n	8005696 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	429a      	cmp	r2, r3
 8005672:	d20b      	bcs.n	800568c <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	1ad2      	subs	r2, r2, r3
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff ffb7 	bl	80055f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005686:	2300      	movs	r3, #0
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	e004      	b.n	8005696 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005692:	2301      	movs	r3, #1
 8005694:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8005696:	f000 fd4f 	bl	8006138 <vPortExitCritical>

	return xReturn;
 800569a:	697b      	ldr	r3, [r7, #20]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20001008 	.word	0x20001008
 80056a8:	2000101c 	.word	0x2000101c

080056ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056b0:	4b03      	ldr	r3, [pc, #12]	@ (80056c0 <vTaskMissedYield+0x14>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	601a      	str	r2, [r3, #0]
}
 80056b6:	bf00      	nop
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	20001018 	.word	0x20001018

080056c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056cc:	f000 f852 	bl	8005774 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056d0:	4b06      	ldr	r3, [pc, #24]	@ (80056ec <prvIdleTask+0x28>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d9f9      	bls.n	80056cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80056d8:	4b05      	ldr	r3, [pc, #20]	@ (80056f0 <prvIdleTask+0x2c>)
 80056da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056e8:	e7f0      	b.n	80056cc <prvIdleTask+0x8>
 80056ea:	bf00      	nop
 80056ec:	20000b34 	.word	0x20000b34
 80056f0:	e000ed04 	.word	0xe000ed04

080056f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056fa:	2300      	movs	r3, #0
 80056fc:	607b      	str	r3, [r7, #4]
 80056fe:	e00c      	b.n	800571a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4a12      	ldr	r2, [pc, #72]	@ (8005754 <prvInitialiseTaskLists+0x60>)
 800570c:	4413      	add	r3, r2
 800570e:	4618      	mov	r0, r3
 8005710:	f7fe fed4 	bl	80044bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3301      	adds	r3, #1
 8005718:	607b      	str	r3, [r7, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b37      	cmp	r3, #55	@ 0x37
 800571e:	d9ef      	bls.n	8005700 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005720:	480d      	ldr	r0, [pc, #52]	@ (8005758 <prvInitialiseTaskLists+0x64>)
 8005722:	f7fe fecb 	bl	80044bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005726:	480d      	ldr	r0, [pc, #52]	@ (800575c <prvInitialiseTaskLists+0x68>)
 8005728:	f7fe fec8 	bl	80044bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800572c:	480c      	ldr	r0, [pc, #48]	@ (8005760 <prvInitialiseTaskLists+0x6c>)
 800572e:	f7fe fec5 	bl	80044bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005732:	480c      	ldr	r0, [pc, #48]	@ (8005764 <prvInitialiseTaskLists+0x70>)
 8005734:	f7fe fec2 	bl	80044bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005738:	480b      	ldr	r0, [pc, #44]	@ (8005768 <prvInitialiseTaskLists+0x74>)
 800573a:	f7fe febf 	bl	80044bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800573e:	4b0b      	ldr	r3, [pc, #44]	@ (800576c <prvInitialiseTaskLists+0x78>)
 8005740:	4a05      	ldr	r2, [pc, #20]	@ (8005758 <prvInitialiseTaskLists+0x64>)
 8005742:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005744:	4b0a      	ldr	r3, [pc, #40]	@ (8005770 <prvInitialiseTaskLists+0x7c>)
 8005746:	4a05      	ldr	r2, [pc, #20]	@ (800575c <prvInitialiseTaskLists+0x68>)
 8005748:	601a      	str	r2, [r3, #0]
}
 800574a:	bf00      	nop
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000b34 	.word	0x20000b34
 8005758:	20000f94 	.word	0x20000f94
 800575c:	20000fa8 	.word	0x20000fa8
 8005760:	20000fc4 	.word	0x20000fc4
 8005764:	20000fd8 	.word	0x20000fd8
 8005768:	20000ff0 	.word	0x20000ff0
 800576c:	20000fbc 	.word	0x20000fbc
 8005770:	20000fc0 	.word	0x20000fc0

08005774 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800577a:	e019      	b.n	80057b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800577c:	f000 fcc2 	bl	8006104 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005780:	4b10      	ldr	r3, [pc, #64]	@ (80057c4 <prvCheckTasksWaitingTermination+0x50>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3304      	adds	r3, #4
 800578c:	4618      	mov	r0, r3
 800578e:	f7fe ff1f 	bl	80045d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005792:	4b0d      	ldr	r3, [pc, #52]	@ (80057c8 <prvCheckTasksWaitingTermination+0x54>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3b01      	subs	r3, #1
 8005798:	4a0b      	ldr	r2, [pc, #44]	@ (80057c8 <prvCheckTasksWaitingTermination+0x54>)
 800579a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800579c:	4b0b      	ldr	r3, [pc, #44]	@ (80057cc <prvCheckTasksWaitingTermination+0x58>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	4a0a      	ldr	r2, [pc, #40]	@ (80057cc <prvCheckTasksWaitingTermination+0x58>)
 80057a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057a6:	f000 fcc7 	bl	8006138 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f810 	bl	80057d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057b0:	4b06      	ldr	r3, [pc, #24]	@ (80057cc <prvCheckTasksWaitingTermination+0x58>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e1      	bne.n	800577c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000fd8 	.word	0x20000fd8
 80057c8:	20001004 	.word	0x20001004
 80057cc:	20000fec 	.word	0x20000fec

080057d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3354      	adds	r3, #84	@ 0x54
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 fee9 	bl	80065b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d108      	bne.n	80057fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 fddb 	bl	80063ac <vPortFree>
				vPortFree( pxTCB );
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fdd8 	bl	80063ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057fc:	e007      	b.n	800580e <prvDeleteTCB+0x3e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005804:	2b01      	cmp	r3, #1
 8005806:	d102      	bne.n	800580e <prvDeleteTCB+0x3e>
				vPortFree( pxTCB );
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fdcf 	bl	80063ac <vPortFree>
	}
 800580e:	bf00      	nop
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800581e:	4b0c      	ldr	r3, [pc, #48]	@ (8005850 <prvResetNextTaskUnblockTime+0x38>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d104      	bne.n	8005832 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005828:	4b0a      	ldr	r3, [pc, #40]	@ (8005854 <prvResetNextTaskUnblockTime+0x3c>)
 800582a:	f04f 32ff 	mov.w	r2, #4294967295
 800582e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005830:	e008      	b.n	8005844 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005832:	4b07      	ldr	r3, [pc, #28]	@ (8005850 <prvResetNextTaskUnblockTime+0x38>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	4a04      	ldr	r2, [pc, #16]	@ (8005854 <prvResetNextTaskUnblockTime+0x3c>)
 8005842:	6013      	str	r3, [r2, #0]
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	20000fbc 	.word	0x20000fbc
 8005854:	20001024 	.word	0x20001024

08005858 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800585e:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <xTaskGetSchedulerState+0x34>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d102      	bne.n	800586c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005866:	2301      	movs	r3, #1
 8005868:	607b      	str	r3, [r7, #4]
 800586a:	e008      	b.n	800587e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800586c:	4b08      	ldr	r3, [pc, #32]	@ (8005890 <xTaskGetSchedulerState+0x38>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d102      	bne.n	800587a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005874:	2302      	movs	r3, #2
 8005876:	607b      	str	r3, [r7, #4]
 8005878:	e001      	b.n	800587e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800587a:	2300      	movs	r3, #0
 800587c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800587e:	687b      	ldr	r3, [r7, #4]
	}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	20001010 	.word	0x20001010
 8005890:	2000102c 	.word	0x2000102c

08005894 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d037      	beq.n	800591a <xTaskPriorityDisinherit+0x86>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ae:	1e5a      	subs	r2, r3, #1
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058bc:	429a      	cmp	r2, r3
 80058be:	d02c      	beq.n	800591a <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d128      	bne.n	800591a <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	3304      	adds	r3, #4
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fe fe7f 	bl	80045d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005924 <xTaskPriorityDisinherit+0x90>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d903      	bls.n	80058fa <xTaskPriorityDisinherit+0x66>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f6:	4a0b      	ldr	r2, [pc, #44]	@ (8005924 <xTaskPriorityDisinherit+0x90>)
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058fe:	4613      	mov	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4a08      	ldr	r2, [pc, #32]	@ (8005928 <xTaskPriorityDisinherit+0x94>)
 8005908:	441a      	add	r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	3304      	adds	r3, #4
 800590e:	4619      	mov	r1, r3
 8005910:	4610      	mov	r0, r2
 8005912:	f7fe fe00 	bl	8004516 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005916:	2301      	movs	r3, #1
 8005918:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800591a:	68fb      	ldr	r3, [r7, #12]
	}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	2000100c 	.word	0x2000100c
 8005928:	20000b34 	.word	0x20000b34

0800592c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005936:	4b21      	ldr	r3, [pc, #132]	@ (80059bc <prvAddCurrentTaskToDelayedList+0x90>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800593c:	4b20      	ldr	r3, [pc, #128]	@ (80059c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3304      	adds	r3, #4
 8005942:	4618      	mov	r0, r3
 8005944:	f7fe fe44 	bl	80045d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594e:	d10a      	bne.n	8005966 <prvAddCurrentTaskToDelayedList+0x3a>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d007      	beq.n	8005966 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005956:	4b1a      	ldr	r3, [pc, #104]	@ (80059c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3304      	adds	r3, #4
 800595c:	4619      	mov	r1, r3
 800595e:	4819      	ldr	r0, [pc, #100]	@ (80059c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005960:	f7fe fdd9 	bl	8004516 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005964:	e026      	b.n	80059b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4413      	add	r3, r2
 800596c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800596e:	4b14      	ldr	r3, [pc, #80]	@ (80059c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	429a      	cmp	r2, r3
 800597c:	d209      	bcs.n	8005992 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800597e:	4b12      	ldr	r3, [pc, #72]	@ (80059c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4b0f      	ldr	r3, [pc, #60]	@ (80059c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3304      	adds	r3, #4
 8005988:	4619      	mov	r1, r3
 800598a:	4610      	mov	r0, r2
 800598c:	f7fe fde7 	bl	800455e <vListInsert>
}
 8005990:	e010      	b.n	80059b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005992:	4b0e      	ldr	r3, [pc, #56]	@ (80059cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	4b0a      	ldr	r3, [pc, #40]	@ (80059c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3304      	adds	r3, #4
 800599c:	4619      	mov	r1, r3
 800599e:	4610      	mov	r0, r2
 80059a0:	f7fe fddd 	bl	800455e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059a4:	4b0a      	ldr	r3, [pc, #40]	@ (80059d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d202      	bcs.n	80059b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80059ae:	4a08      	ldr	r2, [pc, #32]	@ (80059d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	6013      	str	r3, [r2, #0]
}
 80059b4:	bf00      	nop
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	20001008 	.word	0x20001008
 80059c0:	20000b30 	.word	0x20000b30
 80059c4:	20000ff0 	.word	0x20000ff0
 80059c8:	20000fc0 	.word	0x20000fc0
 80059cc:	20000fbc 	.word	0x20000fbc
 80059d0:	20001024 	.word	0x20001024

080059d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80059de:	f000 faab 	bl	8005f38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80059e2:	4b15      	ldr	r3, [pc, #84]	@ (8005a38 <xTimerCreateTimerTask+0x64>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d020      	beq.n	8005a2c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80059ee:	2300      	movs	r3, #0
 80059f0:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80059f2:	463a      	mov	r2, r7
 80059f4:	1d39      	adds	r1, r7, #4
 80059f6:	f107 0308 	add.w	r3, r7, #8
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fe fd44 	bl	8004488 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a00:	6839      	ldr	r1, [r7, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	9202      	str	r2, [sp, #8]
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	460a      	mov	r2, r1
 8005a12:	490a      	ldr	r1, [pc, #40]	@ (8005a3c <xTimerCreateTimerTask+0x68>)
 8005a14:	480a      	ldr	r0, [pc, #40]	@ (8005a40 <xTimerCreateTimerTask+0x6c>)
 8005a16:	f7ff f9b9 	bl	8004d8c <xTaskCreateStatic>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	4a09      	ldr	r2, [pc, #36]	@ (8005a44 <xTimerCreateTimerTask+0x70>)
 8005a1e:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a20:	4b08      	ldr	r3, [pc, #32]	@ (8005a44 <xTimerCreateTimerTask+0x70>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20001060 	.word	0x20001060
 8005a3c:	080067b8 	.word	0x080067b8
 8005a40:	08005b49 	.word	0x08005b49
 8005a44:	20001064 	.word	0x20001064

08005a48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08a      	sub	sp, #40	@ 0x28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ac4 <xTimerGenericCommand+0x7c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d02a      	beq.n	8005ab8 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2b05      	cmp	r3, #5
 8005a72:	dc18      	bgt.n	8005aa6 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a74:	f7ff fef0 	bl	8005858 <xTaskGetSchedulerState>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d109      	bne.n	8005a92 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a7e:	4b11      	ldr	r3, [pc, #68]	@ (8005ac4 <xTimerGenericCommand+0x7c>)
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	f107 0114 	add.w	r1, r7, #20
 8005a86:	2300      	movs	r3, #0
 8005a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a8a:	f7fe fe67 	bl	800475c <xQueueGenericSend>
 8005a8e:	6278      	str	r0, [r7, #36]	@ 0x24
 8005a90:	e012      	b.n	8005ab8 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a92:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac4 <xTimerGenericCommand+0x7c>)
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	f107 0114 	add.w	r1, r7, #20
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f7fe fe5d 	bl	800475c <xQueueGenericSend>
 8005aa2:	6278      	str	r0, [r7, #36]	@ 0x24
 8005aa4:	e008      	b.n	8005ab8 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005aa6:	4b07      	ldr	r3, [pc, #28]	@ (8005ac4 <xTimerGenericCommand+0x7c>)
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	f107 0114 	add.w	r1, r7, #20
 8005aae:	2300      	movs	r3, #0
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	f7fe fefd 	bl	80048b0 <xQueueGenericSendFromISR>
 8005ab6:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3728      	adds	r7, #40	@ 0x28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20001060 	.word	0x20001060

08005ac8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8005b44 <prvProcessExpiredTimer+0x7c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7fe fd75 	bl	80045d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d015      	beq.n	8005b20 <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	699a      	ldr	r2, [r3, #24]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	18d1      	adds	r1, r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 f8c7 	bl	8005c94 <prvInsertTimerInActiveList>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d012      	beq.n	8005b32 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	2300      	movs	r3, #0
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	2100      	movs	r1, #0
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f7ff ff96 	bl	8005a48 <xTimerGenericCommand>
 8005b1c:	60b8      	str	r0, [r7, #8]
 8005b1e:	e008      	b.n	8005b32 <prvProcessExpiredTimer+0x6a>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b26:	f023 0301 	bic.w	r3, r3, #1
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	4798      	blx	r3
}
 8005b3a:	bf00      	nop
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20001058 	.word	0x20001058

08005b48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b50:	f107 0308 	add.w	r3, r7, #8
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 f859 	bl	8005c0c <prvGetNextExpireTime>
 8005b5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f805 	bl	8005b70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b66:	f000 f8d7 	bl	8005d18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b6a:	bf00      	nop
 8005b6c:	e7f0      	b.n	8005b50 <prvTimerTask+0x8>
	...

08005b70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b7a:	f7ff fb07 	bl	800518c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b7e:	f107 0308 	add.w	r3, r7, #8
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 f866 	bl	8005c54 <prvSampleTimeNow>
 8005b88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d130      	bne.n	8005bf2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10a      	bne.n	8005bac <prvProcessTimerOrBlockTask+0x3c>
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d806      	bhi.n	8005bac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b9e:	f7ff fb03 	bl	80051a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff ff8f 	bl	8005ac8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005baa:	e024      	b.n	8005bf6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d008      	beq.n	8005bc4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005bb2:	4b13      	ldr	r3, [pc, #76]	@ (8005c00 <prvProcessTimerOrBlockTask+0x90>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <prvProcessTimerOrBlockTask+0x50>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e000      	b.n	8005bc2 <prvProcessTimerOrBlockTask+0x52>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005c04 <prvProcessTimerOrBlockTask+0x94>)
 8005bc6:	6818      	ldr	r0, [r3, #0]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	f7ff f8a7 	bl	8004d24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005bd6:	f7ff fae7 	bl	80051a8 <xTaskResumeAll>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005be0:	4b09      	ldr	r3, [pc, #36]	@ (8005c08 <prvProcessTimerOrBlockTask+0x98>)
 8005be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	f3bf 8f6f 	isb	sy
}
 8005bf0:	e001      	b.n	8005bf6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005bf2:	f7ff fad9 	bl	80051a8 <xTaskResumeAll>
}
 8005bf6:	bf00      	nop
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	2000105c 	.word	0x2000105c
 8005c04:	20001060 	.word	0x20001060
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c14:	4b0e      	ldr	r3, [pc, #56]	@ (8005c50 <prvGetNextExpireTime+0x44>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <prvGetNextExpireTime+0x16>
 8005c1e:	2201      	movs	r2, #1
 8005c20:	e000      	b.n	8005c24 <prvGetNextExpireTime+0x18>
 8005c22:	2200      	movs	r2, #0
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d105      	bne.n	8005c3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c30:	4b07      	ldr	r3, [pc, #28]	@ (8005c50 <prvGetNextExpireTime+0x44>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	e001      	b.n	8005c40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c40:	68fb      	ldr	r3, [r7, #12]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	20001058 	.word	0x20001058

08005c54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c5c:	f7ff fb32 	bl	80052c4 <xTaskGetTickCount>
 8005c60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c62:	4b0b      	ldr	r3, [pc, #44]	@ (8005c90 <prvSampleTimeNow+0x3c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d205      	bcs.n	8005c78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c6c:	f000 f90e 	bl	8005e8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	e002      	b.n	8005c7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c7e:	4a04      	ldr	r2, [pc, #16]	@ (8005c90 <prvSampleTimeNow+0x3c>)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c84:	68fb      	ldr	r3, [r7, #12]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20001068 	.word	0x20001068

08005c94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d812      	bhi.n	8005ce0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	1ad2      	subs	r2, r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d302      	bcc.n	8005cce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	617b      	str	r3, [r7, #20]
 8005ccc:	e01b      	b.n	8005d06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005cce:	4b10      	ldr	r3, [pc, #64]	@ (8005d10 <prvInsertTimerInActiveList+0x7c>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4610      	mov	r0, r2
 8005cda:	f7fe fc40 	bl	800455e <vListInsert>
 8005cde:	e012      	b.n	8005d06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d206      	bcs.n	8005cf6 <prvInsertTimerInActiveList+0x62>
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d302      	bcc.n	8005cf6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	e007      	b.n	8005d06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cf6:	4b07      	ldr	r3, [pc, #28]	@ (8005d14 <prvInsertTimerInActiveList+0x80>)
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	4619      	mov	r1, r3
 8005d00:	4610      	mov	r0, r2
 8005d02:	f7fe fc2c 	bl	800455e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d06:	697b      	ldr	r3, [r7, #20]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	2000105c 	.word	0x2000105c
 8005d14:	20001058 	.word	0x20001058

08005d18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08c      	sub	sp, #48	@ 0x30
 8005d1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d1e:	e0a2      	b.n	8005e66 <prvProcessReceivedCommands+0x14e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	da0b      	bge.n	8005d3e <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d26:	f107 0308 	add.w	r3, r7, #8
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	627b      	str	r3, [r7, #36]	@ 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d34:	6850      	ldr	r0, [r2, #4]
 8005d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d38:	6892      	ldr	r2, [r2, #8]
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f2c0 8090 	blt.w	8005e66 <prvProcessReceivedCommands+0x14e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d004      	beq.n	8005d5c <prvProcessReceivedCommands+0x44>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	3304      	adds	r3, #4
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe fc3a 	bl	80045d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d5c:	1d3b      	adds	r3, r7, #4
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff ff78 	bl	8005c54 <prvSampleTimeNow>
 8005d64:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b09      	cmp	r3, #9
 8005d6a:	d879      	bhi.n	8005e60 <prvProcessReceivedCommands+0x148>
 8005d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d74 <prvProcessReceivedCommands+0x5c>)
 8005d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d72:	bf00      	nop
 8005d74:	08005d9d 	.word	0x08005d9d
 8005d78:	08005d9d 	.word	0x08005d9d
 8005d7c:	08005d9d 	.word	0x08005d9d
 8005d80:	08005df7 	.word	0x08005df7
 8005d84:	08005e0b 	.word	0x08005e0b
 8005d88:	08005e37 	.word	0x08005e37
 8005d8c:	08005d9d 	.word	0x08005d9d
 8005d90:	08005d9d 	.word	0x08005d9d
 8005d94:	08005df7 	.word	0x08005df7
 8005d98:	08005e0b 	.word	0x08005e0b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005da2:	f043 0301 	orr.w	r3, r3, #1
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	18d1      	adds	r1, r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	6a38      	ldr	r0, [r7, #32]
 8005dbc:	f7ff ff6a 	bl	8005c94 <prvInsertTimerInActiveList>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d04e      	beq.n	8005e64 <prvProcessReceivedCommands+0x14c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	6a38      	ldr	r0, [r7, #32]
 8005dcc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d043      	beq.n	8005e64 <prvProcessReceivedCommands+0x14c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	441a      	add	r2, r3
 8005de4:	2300      	movs	r3, #0
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	2300      	movs	r3, #0
 8005dea:	2100      	movs	r1, #0
 8005dec:	6a38      	ldr	r0, [r7, #32]
 8005dee:	f7ff fe2b 	bl	8005a48 <xTimerGenericCommand>
 8005df2:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8005df4:	e036      	b.n	8005e64 <prvProcessReceivedCommands+0x14c>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005dfc:	f023 0301 	bic.w	r3, r3, #1
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005e08:	e02d      	b.n	8005e66 <prvProcessReceivedCommands+0x14e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e10:	f043 0301 	orr.w	r3, r3, #1
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	699a      	ldr	r2, [r3, #24]
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	18d1      	adds	r1, r2, r3
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	6a38      	ldr	r0, [r7, #32]
 8005e30:	f7ff ff30 	bl	8005c94 <prvInsertTimerInActiveList>
					break;
 8005e34:	e017      	b.n	8005e66 <prvProcessReceivedCommands+0x14e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d103      	bne.n	8005e4c <prvProcessReceivedCommands+0x134>
						{
							vPortFree( pxTimer );
 8005e44:	6a38      	ldr	r0, [r7, #32]
 8005e46:	f000 fab1 	bl	80063ac <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e4a:	e00c      	b.n	8005e66 <prvProcessReceivedCommands+0x14e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e52:	f023 0301 	bic.w	r3, r3, #1
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005e5e:	e002      	b.n	8005e66 <prvProcessReceivedCommands+0x14e>

				default	:
					/* Don't expect to get here. */
					break;
 8005e60:	bf00      	nop
 8005e62:	e000      	b.n	8005e66 <prvProcessReceivedCommands+0x14e>
					break;
 8005e64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e66:	4b08      	ldr	r3, [pc, #32]	@ (8005e88 <prvProcessReceivedCommands+0x170>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f107 0108 	add.w	r1, r7, #8
 8005e6e:	2200      	movs	r2, #0
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fe fd7b 	bl	800496c <xQueueReceive>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f47f af51 	bne.w	8005d20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005e7e:	bf00      	nop
 8005e80:	bf00      	nop
 8005e82:	3728      	adds	r7, #40	@ 0x28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20001060 	.word	0x20001060

08005e8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e92:	e03a      	b.n	8005f0a <prvSwitchTimerLists+0x7e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e94:	4b26      	ldr	r3, [pc, #152]	@ (8005f30 <prvSwitchTimerLists+0xa4>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e9e:	4b24      	ldr	r3, [pc, #144]	@ (8005f30 <prvSwitchTimerLists+0xa4>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fe fb8f 	bl	80045d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d020      	beq.n	8005f0a <prvSwitchTimerLists+0x7e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4413      	add	r3, r2
 8005ed0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d90e      	bls.n	8005ef8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ee6:	4b12      	ldr	r3, [pc, #72]	@ (8005f30 <prvSwitchTimerLists+0xa4>)
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3304      	adds	r3, #4
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	f7fe fb34 	bl	800455e <vListInsert>
 8005ef6:	e008      	b.n	8005f0a <prvSwitchTimerLists+0x7e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ef8:	2300      	movs	r3, #0
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	2300      	movs	r3, #0
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	2100      	movs	r1, #0
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f7ff fda0 	bl	8005a48 <xTimerGenericCommand>
 8005f08:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f0a:	4b09      	ldr	r3, [pc, #36]	@ (8005f30 <prvSwitchTimerLists+0xa4>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1bf      	bne.n	8005e94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005f14:	4b06      	ldr	r3, [pc, #24]	@ (8005f30 <prvSwitchTimerLists+0xa4>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f1a:	4b06      	ldr	r3, [pc, #24]	@ (8005f34 <prvSwitchTimerLists+0xa8>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a04      	ldr	r2, [pc, #16]	@ (8005f30 <prvSwitchTimerLists+0xa4>)
 8005f20:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f22:	4a04      	ldr	r2, [pc, #16]	@ (8005f34 <prvSwitchTimerLists+0xa8>)
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	6013      	str	r3, [r2, #0]
}
 8005f28:	bf00      	nop
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	20001058 	.word	0x20001058
 8005f34:	2000105c 	.word	0x2000105c

08005f38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f3e:	f000 f8e1 	bl	8006104 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f42:	4b15      	ldr	r3, [pc, #84]	@ (8005f98 <prvCheckForValidListAndQueue+0x60>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d120      	bne.n	8005f8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f4a:	4814      	ldr	r0, [pc, #80]	@ (8005f9c <prvCheckForValidListAndQueue+0x64>)
 8005f4c:	f7fe fab6 	bl	80044bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f50:	4813      	ldr	r0, [pc, #76]	@ (8005fa0 <prvCheckForValidListAndQueue+0x68>)
 8005f52:	f7fe fab3 	bl	80044bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f56:	4b13      	ldr	r3, [pc, #76]	@ (8005fa4 <prvCheckForValidListAndQueue+0x6c>)
 8005f58:	4a10      	ldr	r2, [pc, #64]	@ (8005f9c <prvCheckForValidListAndQueue+0x64>)
 8005f5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f5c:	4b12      	ldr	r3, [pc, #72]	@ (8005fa8 <prvCheckForValidListAndQueue+0x70>)
 8005f5e:	4a10      	ldr	r2, [pc, #64]	@ (8005fa0 <prvCheckForValidListAndQueue+0x68>)
 8005f60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f62:	2300      	movs	r3, #0
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	4b11      	ldr	r3, [pc, #68]	@ (8005fac <prvCheckForValidListAndQueue+0x74>)
 8005f68:	4a11      	ldr	r2, [pc, #68]	@ (8005fb0 <prvCheckForValidListAndQueue+0x78>)
 8005f6a:	2110      	movs	r1, #16
 8005f6c:	200a      	movs	r0, #10
 8005f6e:	f7fe fbb3 	bl	80046d8 <xQueueGenericCreateStatic>
 8005f72:	4603      	mov	r3, r0
 8005f74:	4a08      	ldr	r2, [pc, #32]	@ (8005f98 <prvCheckForValidListAndQueue+0x60>)
 8005f76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f78:	4b07      	ldr	r3, [pc, #28]	@ (8005f98 <prvCheckForValidListAndQueue+0x60>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d005      	beq.n	8005f8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f80:	4b05      	ldr	r3, [pc, #20]	@ (8005f98 <prvCheckForValidListAndQueue+0x60>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	490b      	ldr	r1, [pc, #44]	@ (8005fb4 <prvCheckForValidListAndQueue+0x7c>)
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fe fea2 	bl	8004cd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f8c:	f000 f8d4 	bl	8006138 <vPortExitCritical>
}
 8005f90:	bf00      	nop
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20001060 	.word	0x20001060
 8005f9c:	20001030 	.word	0x20001030
 8005fa0:	20001044 	.word	0x20001044
 8005fa4:	20001058 	.word	0x20001058
 8005fa8:	2000105c 	.word	0x2000105c
 8005fac:	2000110c 	.word	0x2000110c
 8005fb0:	2000106c 	.word	0x2000106c
 8005fb4:	080067c0 	.word	0x080067c0

08005fb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	3b04      	subs	r3, #4
 8005fc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3b04      	subs	r3, #4
 8005fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f023 0201 	bic.w	r2, r3, #1
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3b04      	subs	r3, #4
 8005fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800601c <pxPortInitialiseStack+0x64>)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3b14      	subs	r3, #20
 8005ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3b04      	subs	r3, #4
 8005ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f06f 0202 	mvn.w	r2, #2
 8006006:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3b20      	subs	r3, #32
 800600c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800600e:	68fb      	ldr	r3, [r7, #12]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	08006021 	.word	0x08006021

08006020 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	603b      	str	r3, [r7, #0]
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	607b      	str	r3, [r7, #4]
}
 800603c:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800603e:	bf00      	nop
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0fc      	beq.n	8006040 <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006046:	bf00      	nop
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
	...

08006060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006060:	4b07      	ldr	r3, [pc, #28]	@ (8006080 <pxCurrentTCBConst2>)
 8006062:	6819      	ldr	r1, [r3, #0]
 8006064:	6808      	ldr	r0, [r1, #0]
 8006066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606a:	f380 8809 	msr	PSP, r0
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f04f 0000 	mov.w	r0, #0
 8006076:	f380 8811 	msr	BASEPRI, r0
 800607a:	4770      	bx	lr
 800607c:	f3af 8000 	nop.w

08006080 <pxCurrentTCBConst2>:
 8006080:	20000b30 	.word	0x20000b30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop

08006088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006088:	4808      	ldr	r0, [pc, #32]	@ (80060ac <prvPortStartFirstTask+0x24>)
 800608a:	6800      	ldr	r0, [r0, #0]
 800608c:	6800      	ldr	r0, [r0, #0]
 800608e:	f380 8808 	msr	MSP, r0
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	f380 8814 	msr	CONTROL, r0
 800609a:	b662      	cpsie	i
 800609c:	b661      	cpsie	f
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	df00      	svc	0
 80060a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060aa:	bf00      	nop
 80060ac:	e000ed08 	.word	0xe000ed08

080060b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060b4:	4b10      	ldr	r3, [pc, #64]	@ (80060f8 <xPortStartScheduler+0x48>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a0f      	ldr	r2, [pc, #60]	@ (80060f8 <xPortStartScheduler+0x48>)
 80060ba:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80060be:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060c0:	4b0d      	ldr	r3, [pc, #52]	@ (80060f8 <xPortStartScheduler+0x48>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a0c      	ldr	r2, [pc, #48]	@ (80060f8 <xPortStartScheduler+0x48>)
 80060c6:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80060ca:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060cc:	f000 f8a6 	bl	800621c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060d0:	4b0a      	ldr	r3, [pc, #40]	@ (80060fc <xPortStartScheduler+0x4c>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060d6:	f000 f8c5 	bl	8006264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060da:	4b09      	ldr	r3, [pc, #36]	@ (8006100 <xPortStartScheduler+0x50>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a08      	ldr	r2, [pc, #32]	@ (8006100 <xPortStartScheduler+0x50>)
 80060e0:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80060e4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060e6:	f7ff ffcf 	bl	8006088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060ea:	f7ff f9a3 	bl	8005434 <vTaskSwitchContext>
	prvTaskExitError();
 80060ee:	f7ff ff97 	bl	8006020 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	e000ed20 	.word	0xe000ed20
 80060fc:	20000104 	.word	0x20000104
 8006100:	e000ef34 	.word	0xe000ef34

08006104 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	607b      	str	r3, [r7, #4]
}
 800611c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800611e:	4b05      	ldr	r3, [pc, #20]	@ (8006134 <vPortEnterCritical+0x30>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3301      	adds	r3, #1
 8006124:	4a03      	ldr	r2, [pc, #12]	@ (8006134 <vPortEnterCritical+0x30>)
 8006126:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	20000104 	.word	0x20000104

08006138 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800613e:	4b0a      	ldr	r3, [pc, #40]	@ (8006168 <vPortExitCritical+0x30>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3b01      	subs	r3, #1
 8006144:	4a08      	ldr	r2, [pc, #32]	@ (8006168 <vPortExitCritical+0x30>)
 8006146:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006148:	4b07      	ldr	r3, [pc, #28]	@ (8006168 <vPortExitCritical+0x30>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d105      	bne.n	800615c <vPortExitCritical+0x24>
 8006150:	2300      	movs	r3, #0
 8006152:	607b      	str	r3, [r7, #4]
	__asm volatile
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f383 8811 	msr	BASEPRI, r3
}
 800615a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	20000104 	.word	0x20000104
 800616c:	00000000 	.word	0x00000000

08006170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006170:	f3ef 8009 	mrs	r0, PSP
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	4b15      	ldr	r3, [pc, #84]	@ (80061d0 <pxCurrentTCBConst>)
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	f01e 0f10 	tst.w	lr, #16
 8006180:	bf08      	it	eq
 8006182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618a:	6010      	str	r0, [r2, #0]
 800618c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006190:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006194:	f380 8811 	msr	BASEPRI, r0
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f7ff f948 	bl	8005434 <vTaskSwitchContext>
 80061a4:	f04f 0000 	mov.w	r0, #0
 80061a8:	f380 8811 	msr	BASEPRI, r0
 80061ac:	bc09      	pop	{r0, r3}
 80061ae:	6819      	ldr	r1, [r3, #0]
 80061b0:	6808      	ldr	r0, [r1, #0]
 80061b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b6:	f01e 0f10 	tst.w	lr, #16
 80061ba:	bf08      	it	eq
 80061bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061c0:	f380 8809 	msr	PSP, r0
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	f3af 8000 	nop.w

080061d0 <pxCurrentTCBConst>:
 80061d0:	20000b30 	.word	0x20000b30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop

080061d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	607b      	str	r3, [r7, #4]
}
 80061f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061f2:	f7ff f877 	bl	80052e4 <xTaskIncrementTick>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061fc:	4b06      	ldr	r3, [pc, #24]	@ (8006218 <xPortSysTickHandler+0x40>)
 80061fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	2300      	movs	r3, #0
 8006206:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	f383 8811 	msr	BASEPRI, r3
}
 800620e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006210:	bf00      	nop
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	e000ed04 	.word	0xe000ed04

0800621c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006220:	4b0b      	ldr	r3, [pc, #44]	@ (8006250 <vPortSetupTimerInterrupt+0x34>)
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006226:	4b0b      	ldr	r3, [pc, #44]	@ (8006254 <vPortSetupTimerInterrupt+0x38>)
 8006228:	2200      	movs	r2, #0
 800622a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800622c:	4b0a      	ldr	r3, [pc, #40]	@ (8006258 <vPortSetupTimerInterrupt+0x3c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a0a      	ldr	r2, [pc, #40]	@ (800625c <vPortSetupTimerInterrupt+0x40>)
 8006232:	fba2 2303 	umull	r2, r3, r2, r3
 8006236:	099b      	lsrs	r3, r3, #6
 8006238:	4a09      	ldr	r2, [pc, #36]	@ (8006260 <vPortSetupTimerInterrupt+0x44>)
 800623a:	3b01      	subs	r3, #1
 800623c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800623e:	4b04      	ldr	r3, [pc, #16]	@ (8006250 <vPortSetupTimerInterrupt+0x34>)
 8006240:	2207      	movs	r2, #7
 8006242:	601a      	str	r2, [r3, #0]
}
 8006244:	bf00      	nop
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	e000e010 	.word	0xe000e010
 8006254:	e000e018 	.word	0xe000e018
 8006258:	20000000 	.word	0x20000000
 800625c:	10624dd3 	.word	0x10624dd3
 8006260:	e000e014 	.word	0xe000e014

08006264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006264:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006274 <vPortEnableVFP+0x10>
 8006268:	6801      	ldr	r1, [r0, #0]
 800626a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800626e:	6001      	str	r1, [r0, #0]
 8006270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006272:	bf00      	nop
 8006274:	e000ed88 	.word	0xe000ed88

08006278 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8006284:	f7fe ff82 	bl	800518c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006288:	4b42      	ldr	r3, [pc, #264]	@ (8006394 <pvPortMalloc+0x11c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006290:	f000 f8cc 	bl	800642c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006294:	4b40      	ldr	r3, [pc, #256]	@ (8006398 <pvPortMalloc+0x120>)
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4013      	ands	r3, r2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d172      	bne.n	8006386 <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00d      	beq.n	80062c2 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 80062a6:	2208      	movs	r2, #8
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4413      	add	r3, r2
 80062ac:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f003 0307 	and.w	r3, r3, #7
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f023 0307 	bic.w	r3, r3, #7
 80062be:	3308      	adds	r3, #8
 80062c0:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d05e      	beq.n	8006386 <pvPortMalloc+0x10e>
 80062c8:	4b34      	ldr	r3, [pc, #208]	@ (800639c <pvPortMalloc+0x124>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d859      	bhi.n	8006386 <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80062d2:	4b33      	ldr	r3, [pc, #204]	@ (80063a0 <pvPortMalloc+0x128>)
 80062d4:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80062d6:	4b32      	ldr	r3, [pc, #200]	@ (80063a0 <pvPortMalloc+0x128>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062dc:	e004      	b.n	80062e8 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d903      	bls.n	80062fa <pvPortMalloc+0x82>
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f1      	bne.n	80062de <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062fa:	4b26      	ldr	r3, [pc, #152]	@ (8006394 <pvPortMalloc+0x11c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	429a      	cmp	r2, r3
 8006302:	d040      	beq.n	8006386 <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2208      	movs	r2, #8
 800630a:	4413      	add	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	1ad2      	subs	r2, r2, r3
 800631e:	2308      	movs	r3, #8
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	429a      	cmp	r2, r3
 8006324:	d90f      	bls.n	8006346 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4413      	add	r3, r2
 800632c:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	1ad2      	subs	r2, r2, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006340:	68b8      	ldr	r0, [r7, #8]
 8006342:	f000 f8d5 	bl	80064f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006346:	4b15      	ldr	r3, [pc, #84]	@ (800639c <pvPortMalloc+0x124>)
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	4a12      	ldr	r2, [pc, #72]	@ (800639c <pvPortMalloc+0x124>)
 8006352:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006354:	4b11      	ldr	r3, [pc, #68]	@ (800639c <pvPortMalloc+0x124>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	4b12      	ldr	r3, [pc, #72]	@ (80063a4 <pvPortMalloc+0x12c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	429a      	cmp	r2, r3
 800635e:	d203      	bcs.n	8006368 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006360:	4b0e      	ldr	r3, [pc, #56]	@ (800639c <pvPortMalloc+0x124>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a0f      	ldr	r2, [pc, #60]	@ (80063a4 <pvPortMalloc+0x12c>)
 8006366:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	4b0a      	ldr	r3, [pc, #40]	@ (8006398 <pvPortMalloc+0x120>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	431a      	orrs	r2, r3
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800637c:	4b0a      	ldr	r3, [pc, #40]	@ (80063a8 <pvPortMalloc+0x130>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3301      	adds	r3, #1
 8006382:	4a09      	ldr	r2, [pc, #36]	@ (80063a8 <pvPortMalloc+0x130>)
 8006384:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006386:	f7fe ff0f 	bl	80051a8 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 800638a:	68fb      	ldr	r3, [r7, #12]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	20004d64 	.word	0x20004d64
 8006398:	20004d78 	.word	0x20004d78
 800639c:	20004d68 	.word	0x20004d68
 80063a0:	20004d5c 	.word	0x20004d5c
 80063a4:	20004d6c 	.word	0x20004d6c
 80063a8:	20004d70 	.word	0x20004d70

080063ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d02c      	beq.n	8006418 <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80063be:	2308      	movs	r3, #8
 80063c0:	425b      	negs	r3, r3
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	4b13      	ldr	r3, [pc, #76]	@ (8006420 <vPortFree+0x74>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4013      	ands	r3, r2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d01e      	beq.n	8006418 <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d11a      	bne.n	8006418 <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006420 <vPortFree+0x74>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	43db      	mvns	r3, r3
 80063ec:	401a      	ands	r2, r3
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063f2:	f7fe fecb 	bl	800518c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006424 <vPortFree+0x78>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4413      	add	r3, r2
 8006400:	4a08      	ldr	r2, [pc, #32]	@ (8006424 <vPortFree+0x78>)
 8006402:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006404:	68b8      	ldr	r0, [r7, #8]
 8006406:	f000 f873 	bl	80064f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800640a:	4b07      	ldr	r3, [pc, #28]	@ (8006428 <vPortFree+0x7c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3301      	adds	r3, #1
 8006410:	4a05      	ldr	r2, [pc, #20]	@ (8006428 <vPortFree+0x7c>)
 8006412:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006414:	f7fe fec8 	bl	80051a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006418:	bf00      	nop
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20004d78 	.word	0x20004d78
 8006424:	20004d68 	.word	0x20004d68
 8006428:	20004d74 	.word	0x20004d74

0800642c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006432:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006436:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006438:	4b27      	ldr	r3, [pc, #156]	@ (80064d8 <prvHeapInit+0xac>)
 800643a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00c      	beq.n	8006460 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3307      	adds	r3, #7
 800644a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0307 	bic.w	r3, r3, #7
 8006452:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	4a1f      	ldr	r2, [pc, #124]	@ (80064d8 <prvHeapInit+0xac>)
 800645c:	4413      	add	r3, r2
 800645e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006464:	4a1d      	ldr	r2, [pc, #116]	@ (80064dc <prvHeapInit+0xb0>)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800646a:	4b1c      	ldr	r3, [pc, #112]	@ (80064dc <prvHeapInit+0xb0>)
 800646c:	2200      	movs	r2, #0
 800646e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	4413      	add	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006478:	2208      	movs	r2, #8
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	1a9b      	subs	r3, r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0307 	bic.w	r3, r3, #7
 8006486:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4a15      	ldr	r2, [pc, #84]	@ (80064e0 <prvHeapInit+0xb4>)
 800648c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800648e:	4b14      	ldr	r3, [pc, #80]	@ (80064e0 <prvHeapInit+0xb4>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2200      	movs	r2, #0
 8006494:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006496:	4b12      	ldr	r3, [pc, #72]	@ (80064e0 <prvHeapInit+0xb4>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	1ad2      	subs	r2, r2, r3
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064ac:	4b0c      	ldr	r3, [pc, #48]	@ (80064e0 <prvHeapInit+0xb4>)
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	4a0a      	ldr	r2, [pc, #40]	@ (80064e4 <prvHeapInit+0xb8>)
 80064ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	4a09      	ldr	r2, [pc, #36]	@ (80064e8 <prvHeapInit+0xbc>)
 80064c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064c4:	4b09      	ldr	r3, [pc, #36]	@ (80064ec <prvHeapInit+0xc0>)
 80064c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80064ca:	601a      	str	r2, [r3, #0]
}
 80064cc:	bf00      	nop
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	2000115c 	.word	0x2000115c
 80064dc:	20004d5c 	.word	0x20004d5c
 80064e0:	20004d64 	.word	0x20004d64
 80064e4:	20004d6c 	.word	0x20004d6c
 80064e8:	20004d68 	.word	0x20004d68
 80064ec:	20004d78 	.word	0x20004d78

080064f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064f8:	4b28      	ldr	r3, [pc, #160]	@ (800659c <prvInsertBlockIntoFreeList+0xac>)
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	e002      	b.n	8006504 <prvInsertBlockIntoFreeList+0x14>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	429a      	cmp	r2, r3
 800650c:	d8f7      	bhi.n	80064fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	4413      	add	r3, r2
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	429a      	cmp	r2, r3
 800651e:	d108      	bne.n	8006532 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	441a      	add	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	441a      	add	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	429a      	cmp	r2, r3
 8006544:	d118      	bne.n	8006578 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	4b15      	ldr	r3, [pc, #84]	@ (80065a0 <prvInsertBlockIntoFreeList+0xb0>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d00d      	beq.n	800656e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	441a      	add	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	e008      	b.n	8006580 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800656e:	4b0c      	ldr	r3, [pc, #48]	@ (80065a0 <prvInsertBlockIntoFreeList+0xb0>)
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	e003      	b.n	8006580 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	429a      	cmp	r2, r3
 8006586:	d002      	beq.n	800658e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800658e:	bf00      	nop
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	20004d5c 	.word	0x20004d5c
 80065a0:	20004d64 	.word	0x20004d64

080065a4 <memset>:
 80065a4:	4402      	add	r2, r0
 80065a6:	4603      	mov	r3, r0
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d100      	bne.n	80065ae <memset+0xa>
 80065ac:	4770      	bx	lr
 80065ae:	f803 1b01 	strb.w	r1, [r3], #1
 80065b2:	e7f9      	b.n	80065a8 <memset+0x4>

080065b4 <_reclaim_reent>:
 80065b4:	4b29      	ldr	r3, [pc, #164]	@ (800665c <_reclaim_reent+0xa8>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4283      	cmp	r3, r0
 80065ba:	b570      	push	{r4, r5, r6, lr}
 80065bc:	4604      	mov	r4, r0
 80065be:	d04b      	beq.n	8006658 <_reclaim_reent+0xa4>
 80065c0:	69c3      	ldr	r3, [r0, #28]
 80065c2:	b1ab      	cbz	r3, 80065f0 <_reclaim_reent+0x3c>
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	b16b      	cbz	r3, 80065e4 <_reclaim_reent+0x30>
 80065c8:	2500      	movs	r5, #0
 80065ca:	69e3      	ldr	r3, [r4, #28]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	5959      	ldr	r1, [r3, r5]
 80065d0:	2900      	cmp	r1, #0
 80065d2:	d13b      	bne.n	800664c <_reclaim_reent+0x98>
 80065d4:	3504      	adds	r5, #4
 80065d6:	2d80      	cmp	r5, #128	@ 0x80
 80065d8:	d1f7      	bne.n	80065ca <_reclaim_reent+0x16>
 80065da:	69e3      	ldr	r3, [r4, #28]
 80065dc:	4620      	mov	r0, r4
 80065de:	68d9      	ldr	r1, [r3, #12]
 80065e0:	f000 f872 	bl	80066c8 <_free_r>
 80065e4:	69e3      	ldr	r3, [r4, #28]
 80065e6:	6819      	ldr	r1, [r3, #0]
 80065e8:	b111      	cbz	r1, 80065f0 <_reclaim_reent+0x3c>
 80065ea:	4620      	mov	r0, r4
 80065ec:	f000 f86c 	bl	80066c8 <_free_r>
 80065f0:	6961      	ldr	r1, [r4, #20]
 80065f2:	b111      	cbz	r1, 80065fa <_reclaim_reent+0x46>
 80065f4:	4620      	mov	r0, r4
 80065f6:	f000 f867 	bl	80066c8 <_free_r>
 80065fa:	69e1      	ldr	r1, [r4, #28]
 80065fc:	b111      	cbz	r1, 8006604 <_reclaim_reent+0x50>
 80065fe:	4620      	mov	r0, r4
 8006600:	f000 f862 	bl	80066c8 <_free_r>
 8006604:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006606:	b111      	cbz	r1, 800660e <_reclaim_reent+0x5a>
 8006608:	4620      	mov	r0, r4
 800660a:	f000 f85d 	bl	80066c8 <_free_r>
 800660e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006610:	b111      	cbz	r1, 8006618 <_reclaim_reent+0x64>
 8006612:	4620      	mov	r0, r4
 8006614:	f000 f858 	bl	80066c8 <_free_r>
 8006618:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800661a:	b111      	cbz	r1, 8006622 <_reclaim_reent+0x6e>
 800661c:	4620      	mov	r0, r4
 800661e:	f000 f853 	bl	80066c8 <_free_r>
 8006622:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006624:	b111      	cbz	r1, 800662c <_reclaim_reent+0x78>
 8006626:	4620      	mov	r0, r4
 8006628:	f000 f84e 	bl	80066c8 <_free_r>
 800662c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800662e:	b111      	cbz	r1, 8006636 <_reclaim_reent+0x82>
 8006630:	4620      	mov	r0, r4
 8006632:	f000 f849 	bl	80066c8 <_free_r>
 8006636:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006638:	b111      	cbz	r1, 8006640 <_reclaim_reent+0x8c>
 800663a:	4620      	mov	r0, r4
 800663c:	f000 f844 	bl	80066c8 <_free_r>
 8006640:	6a23      	ldr	r3, [r4, #32]
 8006642:	b14b      	cbz	r3, 8006658 <_reclaim_reent+0xa4>
 8006644:	4620      	mov	r0, r4
 8006646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800664a:	4718      	bx	r3
 800664c:	680e      	ldr	r6, [r1, #0]
 800664e:	4620      	mov	r0, r4
 8006650:	f000 f83a 	bl	80066c8 <_free_r>
 8006654:	4631      	mov	r1, r6
 8006656:	e7bb      	b.n	80065d0 <_reclaim_reent+0x1c>
 8006658:	bd70      	pop	{r4, r5, r6, pc}
 800665a:	bf00      	nop
 800665c:	20000108 	.word	0x20000108

08006660 <__libc_init_array>:
 8006660:	b570      	push	{r4, r5, r6, lr}
 8006662:	4d0d      	ldr	r5, [pc, #52]	@ (8006698 <__libc_init_array+0x38>)
 8006664:	4c0d      	ldr	r4, [pc, #52]	@ (800669c <__libc_init_array+0x3c>)
 8006666:	1b64      	subs	r4, r4, r5
 8006668:	10a4      	asrs	r4, r4, #2
 800666a:	2600      	movs	r6, #0
 800666c:	42a6      	cmp	r6, r4
 800666e:	d109      	bne.n	8006684 <__libc_init_array+0x24>
 8006670:	4d0b      	ldr	r5, [pc, #44]	@ (80066a0 <__libc_init_array+0x40>)
 8006672:	4c0c      	ldr	r4, [pc, #48]	@ (80066a4 <__libc_init_array+0x44>)
 8006674:	f000 f87e 	bl	8006774 <_init>
 8006678:	1b64      	subs	r4, r4, r5
 800667a:	10a4      	asrs	r4, r4, #2
 800667c:	2600      	movs	r6, #0
 800667e:	42a6      	cmp	r6, r4
 8006680:	d105      	bne.n	800668e <__libc_init_array+0x2e>
 8006682:	bd70      	pop	{r4, r5, r6, pc}
 8006684:	f855 3b04 	ldr.w	r3, [r5], #4
 8006688:	4798      	blx	r3
 800668a:	3601      	adds	r6, #1
 800668c:	e7ee      	b.n	800666c <__libc_init_array+0xc>
 800668e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006692:	4798      	blx	r3
 8006694:	3601      	adds	r6, #1
 8006696:	e7f2      	b.n	800667e <__libc_init_array+0x1e>
 8006698:	080067e8 	.word	0x080067e8
 800669c:	080067e8 	.word	0x080067e8
 80066a0:	080067e8 	.word	0x080067e8
 80066a4:	080067ec 	.word	0x080067ec

080066a8 <__retarget_lock_acquire_recursive>:
 80066a8:	4770      	bx	lr

080066aa <__retarget_lock_release_recursive>:
 80066aa:	4770      	bx	lr

080066ac <memcpy>:
 80066ac:	440a      	add	r2, r1
 80066ae:	4291      	cmp	r1, r2
 80066b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80066b4:	d100      	bne.n	80066b8 <memcpy+0xc>
 80066b6:	4770      	bx	lr
 80066b8:	b510      	push	{r4, lr}
 80066ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066c2:	4291      	cmp	r1, r2
 80066c4:	d1f9      	bne.n	80066ba <memcpy+0xe>
 80066c6:	bd10      	pop	{r4, pc}

080066c8 <_free_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4605      	mov	r5, r0
 80066cc:	2900      	cmp	r1, #0
 80066ce:	d041      	beq.n	8006754 <_free_r+0x8c>
 80066d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066d4:	1f0c      	subs	r4, r1, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	bfb8      	it	lt
 80066da:	18e4      	addlt	r4, r4, r3
 80066dc:	f000 f83e 	bl	800675c <__malloc_lock>
 80066e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006758 <_free_r+0x90>)
 80066e2:	6813      	ldr	r3, [r2, #0]
 80066e4:	b933      	cbnz	r3, 80066f4 <_free_r+0x2c>
 80066e6:	6063      	str	r3, [r4, #4]
 80066e8:	6014      	str	r4, [r2, #0]
 80066ea:	4628      	mov	r0, r5
 80066ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066f0:	f000 b83a 	b.w	8006768 <__malloc_unlock>
 80066f4:	42a3      	cmp	r3, r4
 80066f6:	d908      	bls.n	800670a <_free_r+0x42>
 80066f8:	6820      	ldr	r0, [r4, #0]
 80066fa:	1821      	adds	r1, r4, r0
 80066fc:	428b      	cmp	r3, r1
 80066fe:	bf01      	itttt	eq
 8006700:	6819      	ldreq	r1, [r3, #0]
 8006702:	685b      	ldreq	r3, [r3, #4]
 8006704:	1809      	addeq	r1, r1, r0
 8006706:	6021      	streq	r1, [r4, #0]
 8006708:	e7ed      	b.n	80066e6 <_free_r+0x1e>
 800670a:	461a      	mov	r2, r3
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	b10b      	cbz	r3, 8006714 <_free_r+0x4c>
 8006710:	42a3      	cmp	r3, r4
 8006712:	d9fa      	bls.n	800670a <_free_r+0x42>
 8006714:	6811      	ldr	r1, [r2, #0]
 8006716:	1850      	adds	r0, r2, r1
 8006718:	42a0      	cmp	r0, r4
 800671a:	d10b      	bne.n	8006734 <_free_r+0x6c>
 800671c:	6820      	ldr	r0, [r4, #0]
 800671e:	4401      	add	r1, r0
 8006720:	1850      	adds	r0, r2, r1
 8006722:	4283      	cmp	r3, r0
 8006724:	6011      	str	r1, [r2, #0]
 8006726:	d1e0      	bne.n	80066ea <_free_r+0x22>
 8006728:	6818      	ldr	r0, [r3, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	6053      	str	r3, [r2, #4]
 800672e:	4408      	add	r0, r1
 8006730:	6010      	str	r0, [r2, #0]
 8006732:	e7da      	b.n	80066ea <_free_r+0x22>
 8006734:	d902      	bls.n	800673c <_free_r+0x74>
 8006736:	230c      	movs	r3, #12
 8006738:	602b      	str	r3, [r5, #0]
 800673a:	e7d6      	b.n	80066ea <_free_r+0x22>
 800673c:	6820      	ldr	r0, [r4, #0]
 800673e:	1821      	adds	r1, r4, r0
 8006740:	428b      	cmp	r3, r1
 8006742:	bf04      	itt	eq
 8006744:	6819      	ldreq	r1, [r3, #0]
 8006746:	685b      	ldreq	r3, [r3, #4]
 8006748:	6063      	str	r3, [r4, #4]
 800674a:	bf04      	itt	eq
 800674c:	1809      	addeq	r1, r1, r0
 800674e:	6021      	streq	r1, [r4, #0]
 8006750:	6054      	str	r4, [r2, #4]
 8006752:	e7ca      	b.n	80066ea <_free_r+0x22>
 8006754:	bd38      	pop	{r3, r4, r5, pc}
 8006756:	bf00      	nop
 8006758:	20004eb8 	.word	0x20004eb8

0800675c <__malloc_lock>:
 800675c:	4801      	ldr	r0, [pc, #4]	@ (8006764 <__malloc_lock+0x8>)
 800675e:	f7ff bfa3 	b.w	80066a8 <__retarget_lock_acquire_recursive>
 8006762:	bf00      	nop
 8006764:	20004eb4 	.word	0x20004eb4

08006768 <__malloc_unlock>:
 8006768:	4801      	ldr	r0, [pc, #4]	@ (8006770 <__malloc_unlock+0x8>)
 800676a:	f7ff bf9e 	b.w	80066aa <__retarget_lock_release_recursive>
 800676e:	bf00      	nop
 8006770:	20004eb4 	.word	0x20004eb4

08006774 <_init>:
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	bf00      	nop
 8006778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677a:	bc08      	pop	{r3}
 800677c:	469e      	mov	lr, r3
 800677e:	4770      	bx	lr

08006780 <_fini>:
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006782:	bf00      	nop
 8006784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006786:	bc08      	pop	{r3}
 8006788:	469e      	mov	lr, r3
 800678a:	4770      	bx	lr
