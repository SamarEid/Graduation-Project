
ADASWithSDV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006edc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800707c  0800707c  0000807c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007124  08007124  00009114  2**0
                  CONTENTS
  4 .ARM          00000008  08007124  08007124  00008124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800712c  0800712c  00009114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800712c  0800712c  0000812c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007130  08007130  00008130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000114  20000000  08007134  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d24  20000114  08007248  00009114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e38  08007248  00009e38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009114  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f8c  00000000  00000000  00009144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d25  00000000  00000000  000220d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  00025df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001001  00000000  00000000  000272f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000419e  00000000  00000000  000282f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b0d2  00000000  00000000  0002c48f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000976b1  00000000  00000000  00047561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dec12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058bc  00000000  00000000  000dec58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000e4514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000114 	.word	0x20000114
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007064 	.word	0x08007064

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000118 	.word	0x20000118
 80001dc:	08007064 	.word	0x08007064

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:

void SystemClock_Config(void);
void SystemRCCInit(void);

int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f001 f870 	bl	80015b8 <HAL_Init>
  SystemClock_Config();
 80004d8:	f000 f812 	bl	8000500 <SystemClock_Config>
  SystemRCCInit();
 80004dc:	f000 f870 	bl	80005c0 <SystemRCCInit>

  communicationVidInit();
 80004e0:	f000 fd0e 	bl	8000f00 <communicationVidInit>
  perceptionVidInit();
 80004e4:	f001 f808 	bl	80014f8 <perceptionVidInit>
  actuatingVidInit();
 80004e8:	f000 fc3c 	bl	8000d64 <actuatingVidInit>

  /* Init scheduler */
  osKernelInitialize();
 80004ec:	f003 fe08 	bl	8004100 <osKernelInitialize>

  perceptionVidBegin();
 80004f0:	f001 f82a 	bl	8001548 <perceptionVidBegin>
  actuatingVidBegin();
 80004f4:	f000 fce4 	bl	8000ec0 <actuatingVidBegin>


  /* Start scheduler */
  osKernelStart();
 80004f8:	f003 fe26 	bl	8004148 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */

  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <main+0x2c>

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	@ 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	@ 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f006 fcc0 	bl	8006e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b23      	ldr	r3, [pc, #140]	@ (80005b8 <SystemClock_Config+0xb8>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800052c:	4a22      	ldr	r2, [pc, #136]	@ (80005b8 <SystemClock_Config+0xb8>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	@ 0x40
 8000534:	4b20      	ldr	r3, [pc, #128]	@ (80005b8 <SystemClock_Config+0xb8>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b1d      	ldr	r3, [pc, #116]	@ (80005bc <SystemClock_Config+0xbc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800054c:	4a1b      	ldr	r2, [pc, #108]	@ (80005bc <SystemClock_Config+0xbc>)
 800054e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b19      	ldr	r3, [pc, #100]	@ (80005bc <SystemClock_Config+0xbc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000568:	2310      	movs	r3, #16
 800056a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056c:	2300      	movs	r3, #0
 800056e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0320 	add.w	r3, r7, #32
 8000574:	4618      	mov	r0, r3
 8000576:	f001 faf9 	bl	8001b6c <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000580:	f000 f89e 	bl	80006c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fd5c 	bl	800205c <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005aa:	f000 f889 	bl	80006c0 <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3750      	adds	r7, #80	@ 0x50
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <SystemRCCInit>:
void SystemRCCInit(void){
 80005c0:	b480      	push	{r7}
 80005c2:	b089      	sub	sp, #36	@ 0x24
 80005c4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
 80005ca:	4b33      	ldr	r3, [pc, #204]	@ (8000698 <SystemRCCInit+0xd8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a32      	ldr	r2, [pc, #200]	@ (8000698 <SystemRCCInit+0xd8>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b30      	ldr	r3, [pc, #192]	@ (8000698 <SystemRCCInit+0xd8>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	61fb      	str	r3, [r7, #28]
 80005e0:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
 80005e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000698 <SystemRCCInit+0xd8>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a2b      	ldr	r2, [pc, #172]	@ (8000698 <SystemRCCInit+0xd8>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <SystemRCCInit+0xd8>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	61bb      	str	r3, [r7, #24]
 80005fc:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_TIM3_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <SystemRCCInit+0xd8>)
 8000604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000606:	4a24      	ldr	r2, [pc, #144]	@ (8000698 <SystemRCCInit+0xd8>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6413      	str	r3, [r2, #64]	@ 0x40
 800060e:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <SystemRCCInit+0xd8>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_TIM4_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <SystemRCCInit+0xd8>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000622:	4a1d      	ldr	r2, [pc, #116]	@ (8000698 <SystemRCCInit+0xd8>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6413      	str	r3, [r2, #64]	@ 0x40
 800062a:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <SystemRCCInit+0xd8>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_TIM5_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <SystemRCCInit+0xd8>)
 800063c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063e:	4a16      	ldr	r2, [pc, #88]	@ (8000698 <SystemRCCInit+0xd8>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	6413      	str	r3, [r2, #64]	@ 0x40
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <SystemRCCInit+0xd8>)
 8000648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_SPI2_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <SystemRCCInit+0xd8>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065a:	4a0f      	ldr	r2, [pc, #60]	@ (8000698 <SystemRCCInit+0xd8>)
 800065c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000660:	6413      	str	r3, [r2, #64]	@ 0x40
 8000662:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <SystemRCCInit+0xd8>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000666:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_TIM1_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <SystemRCCInit+0xd8>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000676:	4a08      	ldr	r2, [pc, #32]	@ (8000698 <SystemRCCInit+0xd8>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6453      	str	r3, [r2, #68]	@ 0x44
 800067e:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <SystemRCCInit+0xd8>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

}
 800068a:	bf00      	nop
 800068c:	3724      	adds	r7, #36	@ 0x24
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800

0800069c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM10) {
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a04      	ldr	r2, [pc, #16]	@ (80006bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d101      	bne.n	80006b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ae:	f000 ffa5 	bl	80015fc <HAL_IncTick>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40014400 	.word	0x40014400

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <Error_Handler+0x8>

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <HAL_MspInit+0x54>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006da:	4a11      	ldr	r2, [pc, #68]	@ (8000720 <HAL_MspInit+0x54>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <HAL_MspInit+0x54>)
 80006e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <HAL_MspInit+0x54>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000720 <HAL_MspInit+0x54>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <HAL_MspInit+0x54>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	210f      	movs	r1, #15
 800070e:	f06f 0001 	mvn.w	r0, #1
 8000712:	f001 f84b 	bl	80017ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800

08000724 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a19      	ldr	r2, [pc, #100]	@ (80007a8 <HAL_SPI_MspInit+0x84>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d12c      	bne.n	80007a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b18      	ldr	r3, [pc, #96]	@ (80007ac <HAL_SPI_MspInit+0x88>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074e:	4a17      	ldr	r2, [pc, #92]	@ (80007ac <HAL_SPI_MspInit+0x88>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6413      	str	r3, [r2, #64]	@ 0x40
 8000756:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <HAL_SPI_MspInit+0x88>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <HAL_SPI_MspInit+0x88>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a10      	ldr	r2, [pc, #64]	@ (80007ac <HAL_SPI_MspInit+0x88>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <HAL_SPI_MspInit+0x88>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800077e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000790:	2305      	movs	r3, #5
 8000792:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <HAL_SPI_MspInit+0x8c>)
 800079c:	f001 f830 	bl	8001800 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	@ 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40003800 	.word	0x40003800
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020400 	.word	0x40020400

080007b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	@ 0x30
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80007bc:	2300      	movs	r3, #0
 80007be:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000884 <HAL_InitTick+0xd0>)
 80007ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007cc:	4a2d      	ldr	r2, [pc, #180]	@ (8000884 <HAL_InitTick+0xd0>)
 80007ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80007d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000884 <HAL_InitTick+0xd0>)
 80007d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007e0:	f107 020c 	add.w	r2, r7, #12
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	4611      	mov	r1, r2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 fe02 	bl	80023f4 <HAL_RCC_GetClockConfig>
  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007f0:	f001 fdec 	bl	80023cc <HAL_RCC_GetPCLK2Freq>
 80007f4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007f8:	4a23      	ldr	r2, [pc, #140]	@ (8000888 <HAL_InitTick+0xd4>)
 80007fa:	fba2 2303 	umull	r2, r3, r2, r3
 80007fe:	0c9b      	lsrs	r3, r3, #18
 8000800:	3b01      	subs	r3, #1
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000804:	4b21      	ldr	r3, [pc, #132]	@ (800088c <HAL_InitTick+0xd8>)
 8000806:	4a22      	ldr	r2, [pc, #136]	@ (8000890 <HAL_InitTick+0xdc>)
 8000808:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <HAL_InitTick+0xd8>)
 800080c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000810:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000812:	4a1e      	ldr	r2, [pc, #120]	@ (800088c <HAL_InitTick+0xd8>)
 8000814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000816:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000818:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <HAL_InitTick+0xd8>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081e:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <HAL_InitTick+0xd8>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b19      	ldr	r3, [pc, #100]	@ (800088c <HAL_InitTick+0xd8>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800082a:	4818      	ldr	r0, [pc, #96]	@ (800088c <HAL_InitTick+0xd8>)
 800082c:	f002 fa66 	bl	8002cfc <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000836:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800083a:	2b00      	cmp	r3, #0
 800083c:	d11b      	bne.n	8000876 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800083e:	4813      	ldr	r0, [pc, #76]	@ (800088c <HAL_InitTick+0xd8>)
 8000840:	f002 fab6 	bl	8002db0 <HAL_TIM_Base_Start_IT>
 8000844:	4603      	mov	r3, r0
 8000846:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800084a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800084e:	2b00      	cmp	r3, #0
 8000850:	d111      	bne.n	8000876 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000852:	2019      	movs	r0, #25
 8000854:	f000 ffc6 	bl	80017e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b0f      	cmp	r3, #15
 800085c:	d808      	bhi.n	8000870 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800085e:	2200      	movs	r2, #0
 8000860:	6879      	ldr	r1, [r7, #4]
 8000862:	2019      	movs	r0, #25
 8000864:	f000 ffa2 	bl	80017ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000868:	4a0a      	ldr	r2, [pc, #40]	@ (8000894 <HAL_InitTick+0xe0>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
 800086e:	e002      	b.n	8000876 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000870:	2301      	movs	r3, #1
 8000872:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000876:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800087a:	4618      	mov	r0, r3
 800087c:	3730      	adds	r7, #48	@ 0x30
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	431bde83 	.word	0x431bde83
 800088c:	20000130 	.word	0x20000130
 8000890:	40014400 	.word	0x40014400
 8000894:	200000b8 	.word	0x200000b8

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <NMI_Handler+0x4>

080008a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <MemManage_Handler+0x4>

080008b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <UsageFault_Handler+0x4>

080008c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
	...

080008d0 <TIM3_IRQHandler>:
/* STM32F4xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/
void TIM3_IRQHandler(void) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim3);
 80008d4:	4802      	ldr	r0, [pc, #8]	@ (80008e0 <TIM3_IRQHandler+0x10>)
 80008d6:	f002 fdaf 	bl	8003438 <HAL_TIM_IRQHandler>
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000021c 	.word	0x2000021c

080008e4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim4);
 80008e8:	4802      	ldr	r0, [pc, #8]	@ (80008f4 <TIM4_IRQHandler+0x10>)
 80008ea:	f002 fda5 	bl	8003438 <HAL_TIM_IRQHandler>
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000264 	.word	0x20000264

080008f8 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim5);
 80008fc:	4802      	ldr	r0, [pc, #8]	@ (8000908 <TIM5_IRQHandler+0x10>)
 80008fe:	f002 fd9b 	bl	8003438 <HAL_TIM_IRQHandler>
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200002ac 	.word	0x200002ac

0800090c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000910:	4802      	ldr	r0, [pc, #8]	@ (800091c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000912:	f002 fd91 	bl	8003438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000130 	.word	0x20000130

08000920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <SystemInit+0x20>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800092a:	4a05      	ldr	r2, [pc, #20]	@ (8000940 <SystemInit+0x20>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800097c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000948:	f7ff ffea 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800094c:	480c      	ldr	r0, [pc, #48]	@ (8000980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800094e:	490d      	ldr	r1, [pc, #52]	@ (8000984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000950:	4a0d      	ldr	r2, [pc, #52]	@ (8000988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000964:	4c0a      	ldr	r4, [pc, #40]	@ (8000990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000972:	f006 faed 	bl	8006f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000976:	f7ff fdab 	bl	80004d0 <main>
  bx  lr    
 800097a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800097c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8000988:	08007134 	.word	0x08007134
  ldr r2, =_sbss
 800098c:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8000990:	20004e38 	.word	0x20004e38

08000994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC_IRQHandler>

08000996 <motorVidinit>:
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_gpio.h"
#include "stm32f4xx_hal_tim.h"
#include "./motor.h"

void motorVidinit(motorInitTypeDef*motor){
 8000996:	b580      	push	{r7, lr}
 8000998:	b08e      	sub	sp, #56	@ 0x38
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
 80009be:	615a      	str	r2, [r3, #20]
 80009c0:	619a      	str	r2, [r3, #24]
    /*
     * init GPIO PINS
     * IN1 PIN as output and reset it
    */
    GPIO_InitStruct.Pin = motor->in1GPIOxPin;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(motor->in1GPIOx, &GPIO_InitStruct);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80009dc:	4611      	mov	r1, r2
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 ff0e 	bl	8001800 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(motor->in1GPIOx,motor->in1GPIOxPin , GPIO_PIN_RESET);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6818      	ldr	r0, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	2200      	movs	r2, #0
 80009f0:	4619      	mov	r1, r3
 80009f2:	f001 f8a1 	bl	8001b38 <HAL_GPIO_WritePin>
    // IN2 PIN as output and reset it
    GPIO_InitStruct.Pin = motor->in2GPIOxPin;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(motor->in2GPIOx, &GPIO_InitStruct);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fefa 	bl	8001800 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(motor->in2GPIOx,motor->in2GPIOxPin , GPIO_PIN_RESET);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6898      	ldr	r0, [r3, #8]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	2200      	movs	r2, #0
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f001 f88d 	bl	8001b38 <HAL_GPIO_WritePin>
    // EN pin to its alternate function
    GPIO_InitStruct.Pin = motor->enGPIOxPin;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = motor->GPIOEnPinAF;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(motor->enGPIOx, &GPIO_InitStruct);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 fedf 	bl	8001800 <HAL_GPIO_Init>

    // Timer Base for PWM (enable)
    motor->htim->Instance = motor->TIMxEnable;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	69d2      	ldr	r2, [r2, #28]
 8000a4a:	601a      	str	r2, [r3, #0]
    motor->htim->Init.Prescaler = SET_PSC();
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	220f      	movs	r2, #15
 8000a52:	605a      	str	r2, [r3, #4]
    motor->htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
    motor->htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
    motor->htim->Init.CounterMode  = TIM_COUNTERMODE_UP;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
    motor->htim->Init.Period = RESET_VALUE;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a74:	60da      	str	r2, [r3, #12]
    HAL_TIM_PWM_Init(motor->htim);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 f9fa 	bl	8002e74 <HAL_TIM_PWM_Init>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a80:	2360      	movs	r3, #96	@ 0x60
 8000a82:	60bb      	str	r3, [r7, #8]
    sConfigOC.Pulse = SET_PULSE(HANDLE_FAULT_MOTOR_RPM_SPEED);
 8000a84:	2365      	movs	r3, #101	@ 0x65
 8000a86:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61bb      	str	r3, [r7, #24]
    HAL_TIM_PWM_ConfigChannel(motor->htim, &sConfigOC, motor->TIMxEnableChannel);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6998      	ldr	r0, [r3, #24]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6a1a      	ldr	r2, [r3, #32]
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f002 fe57 	bl	8003750 <HAL_TIM_PWM_ConfigChannel>
}
 8000aa2:	bf00      	nop
 8000aa4:	3738      	adds	r7, #56	@ 0x38
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <motorVidStart>:
void motorVidStart(motorInitTypeDef*motor, uint8_t motorSpeed,direction motorDirection){
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	70fb      	strb	r3, [r7, #3]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	70bb      	strb	r3, [r7, #2]
	// set direction
	motorVidSetMotorDirection(motor, motorDirection);
 8000aba:	78bb      	ldrb	r3, [r7, #2]
 8000abc:	4619      	mov	r1, r3
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f000 f8be 	bl	8000c40 <motorVidSetMotorDirection>
	//set speed
	motorVidSetSpeed(motor, motorSpeed);
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f000 f80d 	bl	8000ae8 <motorVidSetSpeed>
	// enable TIMER
	HAL_TIM_PWM_Start(motor->htim,motor->TIMxEnableChannel);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	699a      	ldr	r2, [r3, #24]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6a1b      	ldr	r3, [r3, #32]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4610      	mov	r0, r2
 8000ada:	f002 fa25 	bl	8002f28 <HAL_TIM_PWM_Start>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <motorVidSetSpeed>:
void motorVidSetSpeed(motorInitTypeDef*motor, uint8_t motorSpeed){
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	70fb      	strb	r3, [r7, #3]
	if(motorSpeed <= MAXIMUM_MOTOR_RPM_SPEED){
 8000af4:	78fb      	ldrb	r3, [r7, #3]
 8000af6:	2b61      	cmp	r3, #97	@ 0x61
 8000af8:	d873      	bhi.n	8000be2 <motorVidSetSpeed+0xfa>
		__HAL_TIM_SET_COMPARE(motor->htim,motor->TIMxEnableChannel,SET_PULSE(motorSpeed) );
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a1b      	ldr	r3, [r3, #32]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d119      	bne.n	8000b36 <motorVidSetSpeed+0x4e>
 8000b02:	78fb      	ldrb	r3, [r7, #3]
 8000b04:	ee07 3a90 	vmov	s15, r3
 8000b08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b0c:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8000c38 <motorVidSetSpeed+0x150>
 8000b10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b14:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8000c3c <motorVidSetSpeed+0x154>
 8000b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000b20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b2e:	ee17 2a90 	vmov	r2, s15
 8000b32:	635a      	str	r2, [r3, #52]	@ 0x34
	}else{
		__HAL_TIM_SET_COMPARE(motor->htim,motor->TIMxEnableChannel,SET_PULSE(HANDLE_FAULT_MOTOR_RPM_SPEED) );
	}
}
 8000b34:	e079      	b.n	8000c2a <motorVidSetSpeed+0x142>
		__HAL_TIM_SET_COMPARE(motor->htim,motor->TIMxEnableChannel,SET_PULSE(motorSpeed) );
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a1b      	ldr	r3, [r3, #32]
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	d119      	bne.n	8000b72 <motorVidSetSpeed+0x8a>
 8000b3e:	78fb      	ldrb	r3, [r7, #3]
 8000b40:	ee07 3a90 	vmov	s15, r3
 8000b44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b48:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8000c38 <motorVidSetSpeed+0x150>
 8000b4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b50:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8000c3c <motorVidSetSpeed+0x154>
 8000b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000b5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b6a:	ee17 3a90 	vmov	r3, s15
 8000b6e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000b70:	e05b      	b.n	8000c2a <motorVidSetSpeed+0x142>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6a1b      	ldr	r3, [r3, #32]
 8000b76:	2b08      	cmp	r3, #8
 8000b78:	d119      	bne.n	8000bae <motorVidSetSpeed+0xc6>
 8000b7a:	78fb      	ldrb	r3, [r7, #3]
 8000b7c:	ee07 3a90 	vmov	s15, r3
 8000b80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b84:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8000c38 <motorVidSetSpeed+0x150>
 8000b88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b8c:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8000c3c <motorVidSetSpeed+0x154>
 8000b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000b98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ba6:	ee17 3a90 	vmov	r3, s15
 8000baa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000bac:	e03d      	b.n	8000c2a <motorVidSetSpeed+0x142>
 8000bae:	78fb      	ldrb	r3, [r7, #3]
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bb8:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8000c38 <motorVidSetSpeed+0x150>
 8000bbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bc0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000c3c <motorVidSetSpeed+0x154>
 8000bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000bcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bda:	ee17 3a90 	vmov	r3, s15
 8000bde:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000be0:	e023      	b.n	8000c2a <motorVidSetSpeed+0x142>
		__HAL_TIM_SET_COMPARE(motor->htim,motor->TIMxEnableChannel,SET_PULSE(HANDLE_FAULT_MOTOR_RPM_SPEED) );
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a1b      	ldr	r3, [r3, #32]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d105      	bne.n	8000bf6 <motorVidSetSpeed+0x10e>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2265      	movs	r2, #101	@ 0x65
 8000bf2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000bf4:	e019      	b.n	8000c2a <motorVidSetSpeed+0x142>
		__HAL_TIM_SET_COMPARE(motor->htim,motor->TIMxEnableChannel,SET_PULSE(HANDLE_FAULT_MOTOR_RPM_SPEED) );
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a1b      	ldr	r3, [r3, #32]
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	d105      	bne.n	8000c0a <motorVidSetSpeed+0x122>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	2365      	movs	r3, #101	@ 0x65
 8000c06:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000c08:	e00f      	b.n	8000c2a <motorVidSetSpeed+0x142>
		__HAL_TIM_SET_COMPARE(motor->htim,motor->TIMxEnableChannel,SET_PULSE(HANDLE_FAULT_MOTOR_RPM_SPEED) );
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6a1b      	ldr	r3, [r3, #32]
 8000c0e:	2b08      	cmp	r3, #8
 8000c10:	d105      	bne.n	8000c1e <motorVidSetSpeed+0x136>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	2365      	movs	r3, #101	@ 0x65
 8000c1a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000c1c:	e005      	b.n	8000c2a <motorVidSetSpeed+0x142>
		__HAL_TIM_SET_COMPARE(motor->htim,motor->TIMxEnableChannel,SET_PULSE(HANDLE_FAULT_MOTOR_RPM_SPEED) );
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	2365      	movs	r3, #101	@ 0x65
 8000c26:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c28:	e7ff      	b.n	8000c2a <motorVidSetSpeed+0x142>
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	42c20000 	.word	0x42c20000
 8000c3c:	4479c000 	.word	0x4479c000

08000c40 <motorVidSetMotorDirection>:
void motorVidSetMotorDirection(motorInitTypeDef*motor,direction motorDirection){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
	//halt enable signal first
	HAL_TIM_PWM_Stop(motor->htim, motor->TIMxEnableChannel);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	699a      	ldr	r2, [r3, #24]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a1b      	ldr	r3, [r3, #32]
 8000c54:	4619      	mov	r1, r3
 8000c56:	4610      	mov	r0, r2
 8000c58:	f002 fa16 	bl	8003088 <HAL_TIM_PWM_Stop>
	//reset bit first the control direction
	HAL_GPIO_WritePin(motor->in1GPIOx, motor->in1GPIOxPin, GPIO_PIN_RESET);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6818      	ldr	r0, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	2200      	movs	r2, #0
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f000 ff65 	bl	8001b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->in2GPIOx, motor->in2GPIOxPin, GPIO_PIN_RESET);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6898      	ldr	r0, [r3, #8]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	2200      	movs	r2, #0
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f000 ff5c 	bl	8001b38 <HAL_GPIO_WritePin>

	while(HAL_GPIO_ReadPin(motor->in1GPIOx, motor->in1GPIOxPin) || HAL_GPIO_ReadPin(motor->in2GPIOx, motor->in2GPIOxPin));
 8000c80:	bf00      	nop
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4610      	mov	r0, r2
 8000c90:	f000 ff3a 	bl	8001b08 <HAL_GPIO_ReadPin>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d1f3      	bne.n	8000c82 <motorVidSetMotorDirection+0x42>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4610      	mov	r0, r2
 8000ca8:	f000 ff2e 	bl	8001b08 <HAL_GPIO_ReadPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1e7      	bne.n	8000c82 <motorVidSetMotorDirection+0x42>
	if(motorDirection == CW){
 8000cb2:	78fb      	ldrb	r3, [r7, #3]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d112      	bne.n	8000cde <motorVidSetMotorDirection+0x9e>
		HAL_GPIO_WritePin(motor->in1GPIOx, motor->in1GPIOxPin, GPIO_PIN_SET);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6818      	ldr	r0, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f000 ff37 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->in2GPIOx, motor->in2GPIOxPin, GPIO_PIN_RESET);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6898      	ldr	r0, [r3, #8]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f000 ff2e 	bl	8001b38 <HAL_GPIO_WritePin>
 8000cdc:	e014      	b.n	8000d08 <motorVidSetMotorDirection+0xc8>
	}else if(motorDirection == CCW){
 8000cde:	78fb      	ldrb	r3, [r7, #3]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d111      	bne.n	8000d08 <motorVidSetMotorDirection+0xc8>
		HAL_GPIO_WritePin(motor->in1GPIOx, motor->in1GPIOxPin, GPIO_PIN_RESET);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6818      	ldr	r0, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f000 ff21 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->in2GPIOx, motor->in2GPIOxPin, GPIO_PIN_SET);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6898      	ldr	r0, [r3, #8]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	2201      	movs	r2, #1
 8000d02:	4619      	mov	r1, r3
 8000d04:	f000 ff18 	bl	8001b38 <HAL_GPIO_WritePin>
	}
	//resume enable signal again
	HAL_TIM_PWM_Start(motor->htim,motor->TIMxEnableChannel);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	699a      	ldr	r2, [r3, #24]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a1b      	ldr	r3, [r3, #32]
 8000d10:	4619      	mov	r1, r3
 8000d12:	4610      	mov	r0, r2
 8000d14:	f002 f908 	bl	8002f28 <HAL_TIM_PWM_Start>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <motorVidStop>:
void motorVidStop(motorInitTypeDef*motor){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(motor->htim, motor->TIMxEnableChannel);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	699a      	ldr	r2, [r3, #24]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a1b      	ldr	r3, [r3, #32]
 8000d30:	4619      	mov	r1, r3
 8000d32:	4610      	mov	r0, r2
 8000d34:	f002 f9a8 	bl	8003088 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(motor->in1GPIOx, motor->in1GPIOxPin, GPIO_PIN_RESET);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	2200      	movs	r2, #0
 8000d44:	4619      	mov	r1, r3
 8000d46:	f000 fef7 	bl	8001b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->in2GPIOx, motor->in2GPIOxPin, GPIO_PIN_RESET);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6898      	ldr	r0, [r3, #8]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	2200      	movs	r2, #0
 8000d56:	4619      	mov	r1, r3
 8000d58:	f000 feee 	bl	8001b38 <HAL_GPIO_WritePin>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <actuatingVidInit>:
	.TIMxEnableChannel = TIM_CHANNEL_2,
	.GPIOEnPinAF = GPIO_AF1_TIM1,
};

// initialize motors from structs that defined above
void actuatingVidInit(void){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	motorVidinit(&LHS_Motor);
 8000d68:	4803      	ldr	r0, [pc, #12]	@ (8000d78 <actuatingVidInit+0x14>)
 8000d6a:	f7ff fe14 	bl	8000996 <motorVidinit>
	motorVidinit(&RHS_Motor);
 8000d6e:	4803      	ldr	r0, [pc, #12]	@ (8000d7c <actuatingVidInit+0x18>)
 8000d70:	f7ff fe11 	bl	8000996 <motorVidinit>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000004 	.word	0x20000004
 8000d7c:	2000002c 	.word	0x2000002c

08000d80 <actuatingVidExecuteCommandTask>:
// receive command and execute it
void actuatingVidExecuteCommandTask(void*pvParameters){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	uint8_t command[10] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
 8000d88:	4a49      	ldr	r2, [pc, #292]	@ (8000eb0 <actuatingVidExecuteCommandTask+0x130>)
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d90:	c303      	stmia	r3!, {r0, r1}
 8000d92:	801a      	strh	r2, [r3, #0]
	uint8_t state = 0x00;
 8000d94:	2300      	movs	r3, #0
 8000d96:	75fb      	strb	r3, [r7, #23]
	for(;;){
		osMutexAcquire(spiMutexHandle, osWaitForever);
 8000d98:	4b46      	ldr	r3, [pc, #280]	@ (8000eb4 <actuatingVidExecuteCommandTask+0x134>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	4618      	mov	r0, r3
 8000da2:	f003 fb2a 	bl	80043fa <osMutexAcquire>
		receptionVidReceiveCommand(command);
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f902 	bl	8000fb4 <receptionVidReceiveCommand>
		osMutexRelease(spiMutexHandle);
 8000db0:	4b40      	ldr	r3, [pc, #256]	@ (8000eb4 <actuatingVidExecuteCommandTask+0x134>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f003 fb6b 	bl	8004490 <osMutexRelease>
    	switch(command[0]){
 8000dba:	7b3b      	ldrb	r3, [r7, #12]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	dc13      	bgt.n	8000de8 <actuatingVidExecuteCommandTask+0x68>
 8000dc0:	2b0a      	cmp	r3, #10
 8000dc2:	db60      	blt.n	8000e86 <actuatingVidExecuteCommandTask+0x106>
 8000dc4:	3b0a      	subs	r3, #10
 8000dc6:	2b05      	cmp	r3, #5
 8000dc8:	d85d      	bhi.n	8000e86 <actuatingVidExecuteCommandTask+0x106>
 8000dca:	a201      	add	r2, pc, #4	@ (adr r2, 8000dd0 <actuatingVidExecuteCommandTask+0x50>)
 8000dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd0:	08000def 	.word	0x08000def
 8000dd4:	08000e0f 	.word	0x08000e0f
 8000dd8:	08000e27 	.word	0x08000e27
 8000ddc:	08000e3f 	.word	0x08000e3f
 8000de0:	08000e57 	.word	0x08000e57
 8000de4:	08000e6f 	.word	0x08000e6f
 8000de8:	2bff      	cmp	r3, #255	@ 0xff
 8000dea:	d04e      	beq.n	8000e8a <actuatingVidExecuteCommandTask+0x10a>
    			}
    			break;
    		case 0xff:
    			break;
    		default:
    			break;
 8000dec:	e04b      	b.n	8000e86 <actuatingVidExecuteCommandTask+0x106>
   				if(state == 0x00){
 8000dee:	7dfb      	ldrb	r3, [r7, #23]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d14c      	bne.n	8000e8e <actuatingVidExecuteCommandTask+0x10e>
   	   				motorVidStart(&LHS_Motor,INITIAL_SPEED,CW);
 8000df4:	2200      	movs	r2, #0
 8000df6:	211e      	movs	r1, #30
 8000df8:	482f      	ldr	r0, [pc, #188]	@ (8000eb8 <actuatingVidExecuteCommandTask+0x138>)
 8000dfa:	f7ff fe56 	bl	8000aaa <motorVidStart>
   	   				motorVidStart(&RHS_Motor,INITIAL_SPEED,CW);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	211e      	movs	r1, #30
 8000e02:	482e      	ldr	r0, [pc, #184]	@ (8000ebc <actuatingVidExecuteCommandTask+0x13c>)
 8000e04:	f7ff fe51 	bl	8000aaa <motorVidStart>
   	   				state  = 0x01;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	75fb      	strb	r3, [r7, #23]
    			break;
 8000e0c:	e03f      	b.n	8000e8e <actuatingVidExecuteCommandTask+0x10e>
    			if(state == 0x01){
 8000e0e:	7dfb      	ldrb	r3, [r7, #23]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d13e      	bne.n	8000e92 <actuatingVidExecuteCommandTask+0x112>
        			motorVidSetMotorDirection(&LHS_Motor,CW);
 8000e14:	2100      	movs	r1, #0
 8000e16:	4828      	ldr	r0, [pc, #160]	@ (8000eb8 <actuatingVidExecuteCommandTask+0x138>)
 8000e18:	f7ff ff12 	bl	8000c40 <motorVidSetMotorDirection>
        			motorVidSetMotorDirection(&RHS_Motor,CW);
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4827      	ldr	r0, [pc, #156]	@ (8000ebc <actuatingVidExecuteCommandTask+0x13c>)
 8000e20:	f7ff ff0e 	bl	8000c40 <motorVidSetMotorDirection>
    			break;
 8000e24:	e035      	b.n	8000e92 <actuatingVidExecuteCommandTask+0x112>
    			if(state == 0x01){
 8000e26:	7dfb      	ldrb	r3, [r7, #23]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d134      	bne.n	8000e96 <actuatingVidExecuteCommandTask+0x116>
        			motorVidSetMotorDirection(&LHS_Motor,CCW);
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4822      	ldr	r0, [pc, #136]	@ (8000eb8 <actuatingVidExecuteCommandTask+0x138>)
 8000e30:	f7ff ff06 	bl	8000c40 <motorVidSetMotorDirection>
        			motorVidSetMotorDirection(&RHS_Motor,CCW);
 8000e34:	2101      	movs	r1, #1
 8000e36:	4821      	ldr	r0, [pc, #132]	@ (8000ebc <actuatingVidExecuteCommandTask+0x13c>)
 8000e38:	f7ff ff02 	bl	8000c40 <motorVidSetMotorDirection>
    			break;
 8000e3c:	e02b      	b.n	8000e96 <actuatingVidExecuteCommandTask+0x116>
    			if(state == 0x01){
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d12a      	bne.n	8000e9a <actuatingVidExecuteCommandTask+0x11a>
        			motorVidSetMotorDirection(&LHS_Motor,CW);
 8000e44:	2100      	movs	r1, #0
 8000e46:	481c      	ldr	r0, [pc, #112]	@ (8000eb8 <actuatingVidExecuteCommandTask+0x138>)
 8000e48:	f7ff fefa 	bl	8000c40 <motorVidSetMotorDirection>
        			motorVidSetMotorDirection(&RHS_Motor,CCW);
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	481b      	ldr	r0, [pc, #108]	@ (8000ebc <actuatingVidExecuteCommandTask+0x13c>)
 8000e50:	f7ff fef6 	bl	8000c40 <motorVidSetMotorDirection>
    			break;
 8000e54:	e021      	b.n	8000e9a <actuatingVidExecuteCommandTask+0x11a>
    			if(state == 0x01){
 8000e56:	7dfb      	ldrb	r3, [r7, #23]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d120      	bne.n	8000e9e <actuatingVidExecuteCommandTask+0x11e>
        			motorVidSetMotorDirection(&LHS_Motor,CCW);
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4816      	ldr	r0, [pc, #88]	@ (8000eb8 <actuatingVidExecuteCommandTask+0x138>)
 8000e60:	f7ff feee 	bl	8000c40 <motorVidSetMotorDirection>
        			motorVidSetMotorDirection(&RHS_Motor,CW);
 8000e64:	2100      	movs	r1, #0
 8000e66:	4815      	ldr	r0, [pc, #84]	@ (8000ebc <actuatingVidExecuteCommandTask+0x13c>)
 8000e68:	f7ff feea 	bl	8000c40 <motorVidSetMotorDirection>
    			break;
 8000e6c:	e017      	b.n	8000e9e <actuatingVidExecuteCommandTask+0x11e>
    			if(state == 0x01){
 8000e6e:	7dfb      	ldrb	r3, [r7, #23]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d116      	bne.n	8000ea2 <actuatingVidExecuteCommandTask+0x122>
        			motorVidStop(&LHS_Motor);
 8000e74:	4810      	ldr	r0, [pc, #64]	@ (8000eb8 <actuatingVidExecuteCommandTask+0x138>)
 8000e76:	f7ff ff53 	bl	8000d20 <motorVidStop>
        			motorVidStop(&RHS_Motor);
 8000e7a:	4810      	ldr	r0, [pc, #64]	@ (8000ebc <actuatingVidExecuteCommandTask+0x13c>)
 8000e7c:	f7ff ff50 	bl	8000d20 <motorVidStop>
        			state = 0x00;
 8000e80:	2300      	movs	r3, #0
 8000e82:	75fb      	strb	r3, [r7, #23]
    			break;
 8000e84:	e00d      	b.n	8000ea2 <actuatingVidExecuteCommandTask+0x122>
    			break;
 8000e86:	bf00      	nop
 8000e88:	e00c      	b.n	8000ea4 <actuatingVidExecuteCommandTask+0x124>
    			break;
 8000e8a:	bf00      	nop
 8000e8c:	e00a      	b.n	8000ea4 <actuatingVidExecuteCommandTask+0x124>
    			break;
 8000e8e:	bf00      	nop
 8000e90:	e008      	b.n	8000ea4 <actuatingVidExecuteCommandTask+0x124>
    			break;
 8000e92:	bf00      	nop
 8000e94:	e006      	b.n	8000ea4 <actuatingVidExecuteCommandTask+0x124>
    			break;
 8000e96:	bf00      	nop
 8000e98:	e004      	b.n	8000ea4 <actuatingVidExecuteCommandTask+0x124>
    			break;
 8000e9a:	bf00      	nop
 8000e9c:	e002      	b.n	8000ea4 <actuatingVidExecuteCommandTask+0x124>
    			break;
 8000e9e:	bf00      	nop
 8000ea0:	e000      	b.n	8000ea4 <actuatingVidExecuteCommandTask+0x124>
    			break;
 8000ea2:	bf00      	nop
    	}command[0]= 0xff;
 8000ea4:	23ff      	movs	r3, #255	@ 0xff
 8000ea6:	733b      	strb	r3, [r7, #12]
		osDelay(10);
 8000ea8:	200a      	movs	r0, #10
 8000eaa:	f003 fa05 	bl	80042b8 <osDelay>
		osMutexAcquire(spiMutexHandle, osWaitForever);
 8000eae:	e773      	b.n	8000d98 <actuatingVidExecuteCommandTask+0x18>
 8000eb0:	0800707c 	.word	0x0800707c
 8000eb4:	20000218 	.word	0x20000218
 8000eb8:	20000004 	.word	0x20000004
 8000ebc:	2000002c 	.word	0x2000002c

08000ec0 <actuatingVidBegin>:
	}
}
// create actuating task
void actuatingVidBegin(){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	@ 0x28
 8000ec4:	af00      	add	r7, sp, #0
	//define freeRTOS Tasks Parameters
	osThreadId_t executeCommandTaskHandle;
	const osThreadAttr_t executeCommandTask_attributes = {
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2224      	movs	r2, #36	@ 0x24
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f005 ffe1 	bl	8006e94 <memset>
 8000ed2:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <actuatingVidBegin+0x38>)
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	2328      	movs	r3, #40	@ 0x28
 8000ede:	61bb      	str	r3, [r7, #24]
	  .name = "exeCommand",
	  .stack_size = 128 * 4,
	  .priority = (osPriority_t) osPriorityHigh,
	};
	executeCommandTaskHandle = osThreadNew(actuatingVidExecuteCommandTask, NULL, &executeCommandTask_attributes);
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4805      	ldr	r0, [pc, #20]	@ (8000efc <actuatingVidBegin+0x3c>)
 8000ee8:	f003 f954 	bl	8004194 <osThreadNew>
 8000eec:	6278      	str	r0, [r7, #36]	@ 0x24
}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	@ 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	08007088 	.word	0x08007088
 8000efc:	08000d81 	.word	0x08000d81

08000f00 <communicationVidInit>:
SPI_HandleTypeDef hspi2 = {0};
osMutexId_t spiMutexHandle;
const osMutexAttr_t spiMutex_attributes = {
  .name = "spiMutex"
};
void communicationVidInit(){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
	// initialize GPIO PINS to its alternate function
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin =  SS_PIN | SCLK_PIN | MISO_PIN | MOSI_PIN;
 8000f14:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000f18:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = SPI_ALTERNATE_FUNCTION;
 8000f26:	2305      	movs	r3, #5
 8000f28:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SPI_PORT, &GPIO_InitStruct);
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	481c      	ldr	r0, [pc, #112]	@ (8000fa0 <communicationVidInit+0xa0>)
 8000f30:	f000 fc66 	bl	8001800 <HAL_GPIO_Init>
	//congigure spi as slave
	hspi2.Instance = COMMUNICATION_SPI;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <communicationVidInit+0xa4>)
 8000f36:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa8 <communicationVidInit+0xa8>)
 8000f38:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <communicationVidInit+0xa4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f40:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <communicationVidInit+0xa4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = DATA_SIZE;
 8000f46:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <communicationVidInit+0xa4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <communicationVidInit+0xa4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f52:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <communicationVidInit+0xa4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000f58:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <communicationVidInit+0xa4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
	hspi2.Init.FirstBit = ENDIAN;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <communicationVidInit+0xa4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <communicationVidInit+0xa4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <communicationVidInit+0xa4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <communicationVidInit+0xa4>)
 8000f72:	220a      	movs	r2, #10
 8000f74:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_SPI_Init(&hspi2);
 8000f76:	480b      	ldr	r0, [pc, #44]	@ (8000fa4 <communicationVidInit+0xa4>)
 8000f78:	f001 fa6e 	bl	8002458 <HAL_SPI_Init>
	__HAL_SPI_ENABLE(&hspi2);
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <communicationVidInit+0xa4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <communicationVidInit+0xa4>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f8a:	601a      	str	r2, [r3, #0]
	spiMutexHandle = osMutexNew(&spiMutex_attributes);
 8000f8c:	4807      	ldr	r0, [pc, #28]	@ (8000fac <communicationVidInit+0xac>)
 8000f8e:	f003 f9ae 	bl	80042ee <osMutexNew>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a06      	ldr	r2, [pc, #24]	@ (8000fb0 <communicationVidInit+0xb0>)
 8000f96:	6013      	str	r3, [r2, #0]

}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	200001c0 	.word	0x200001c0
 8000fa8:	40003800 	.word	0x40003800
 8000fac:	080070fc 	.word	0x080070fc
 8000fb0:	20000218 	.word	0x20000218

08000fb4 <receptionVidReceiveCommand>:
#include "stm32f4xx_hal_spi.h"
#include "../../communication.h"
#include "./reception.h"
extern SPI_HandleTypeDef hspi2 ;
uint8_t checkValidityFrame = {START_FRAME,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,END_FRAME};
void receptionVidReceiveCommand(uint8_t*command){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	6078      	str	r0, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, checkValidityFrame, command, FRAME_SIZE, HAL_MAX_DELAY);
 8000fbc:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <receptionVidReceiveCommand+0x28>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	230a      	movs	r3, #10
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	4804      	ldr	r0, [pc, #16]	@ (8000fe0 <receptionVidReceiveCommand+0x2c>)
 8000fce:	f001 fc10 	bl	80027f2 <HAL_SPI_TransmitReceive>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000054 	.word	0x20000054
 8000fe0:	200001c0 	.word	0x200001c0

08000fe4 <serializeSensorData>:
 *      Author: ASHRY
 */
#include <stdint.h>
#include "../typesdefinition/typedefinitions.h"
#include "./serialization.h"
uint8_t* serializeSensorData(sensorTypeDef* sensorData){
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	uint8_t* serializedData = (uint8_t*) sensorData;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	60fb      	str	r3, [r7, #12]
	return serializedData;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <transmissionVidSendSensorData>:
#include <string.h>
#include "../typesdefinition/typedefinitions.h"
#include "../formatter/serialization.h"
#include "./transmission.h"
extern SPI_HandleTypeDef hspi2;
void transmissionVidSendSensorData(sensorTypeDef*sensorData){
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
    uint8_t packet[FRAME_SIZE];  // 1 byte start + 8 byte data + 1 byte end

    packet[0] = START_FRAME;
 8001008:	23a0      	movs	r3, #160	@ 0xa0
 800100a:	723b      	strb	r3, [r7, #8]

    uint8_t* serialized = serializeSensorData(sensorData);  // returns 8 bytes (ID + float)
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ffe9 	bl	8000fe4 <serializeSensorData>
 8001012:	6178      	str	r0, [r7, #20]
    memcpy(&packet[1], serialized, SENSOR_DATA_SIZE);
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	3301      	adds	r3, #1
 800101a:	2208      	movs	r2, #8
 800101c:	6979      	ldr	r1, [r7, #20]
 800101e:	4618      	mov	r0, r3
 8001020:	f005 ffbc 	bl	8006f9c <memcpy>

    packet[SENSOR_DATA_SIZE + 1] = END_FRAME;
 8001024:	23b0      	movs	r3, #176	@ 0xb0
 8001026:	747b      	strb	r3, [r7, #17]
    HAL_SPI_Transmit(&hspi2, packet,FRAME_SIZE,HAL_MAX_DELAY);
 8001028:	f107 0108 	add.w	r1, r7, #8
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	220a      	movs	r2, #10
 8001032:	4803      	ldr	r0, [pc, #12]	@ (8001040 <transmissionVidSendSensorData+0x40>)
 8001034:	f001 fa99 	bl	800256a <HAL_SPI_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200001c0 	.word	0x200001c0

08001044 <ultraSonicVidInit>:
 */
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_gpio.h"
#include "stm32f4xx_hal_tim.h"
#include "./ultraSonic.h"
void ultraSonicVidInit(ultraSonicInitTypeDef* sensor) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	@ 0x30
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
    TIM_IC_InitTypeDef sConfigIC = {0};
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]

    // === Trigger Pin Init ===
    GPIO_InitStruct.Pin = sensor->GPIOxTriggerPin;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(sensor->GPIOxTrigger, &GPIO_InitStruct);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f107 021c 	add.w	r2, r7, #28
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f000 fbba 	bl	8001800 <HAL_GPIO_Init>

    // ===  init Echo Pin  ===
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001090:	2302      	movs	r3, #2
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001094:	2302      	movs	r3, #2
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = sensor->GPIOxEchoPin;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = sensor->GPIOxEchoPinAF;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(sensor->GPIOxEcho, &GPIO_InitStruct);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f107 021c 	add.w	r2, r7, #28
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 fba6 	bl	8001800 <HAL_GPIO_Init>


    // Timer Base for Echo Channel
    sensor->htimEcho->Instance = sensor->TIMxEcho;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	6952      	ldr	r2, [r2, #20]
 80010bc:	601a      	str	r2, [r3, #0]
    sensor->htimEcho->Init.Prescaler = GET_PSC();
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	220f      	movs	r2, #15
 80010c4:	605a      	str	r2, [r3, #4]
    sensor->htimEcho->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	2200      	movs	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
    sensor->htimEcho->Init.ClockDivision = TIMER_CLOCK_DIVISON;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
    sensor->htimEcho->Init.CounterMode  = TIMER_COUNTER_MODE;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
    sensor->htimEcho->Init.Period = GET_ARR();
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010e6:	60da      	str	r2, [r3, #12]
    HAL_TIM_IC_Init(sensor->htimEcho);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 f82f 	bl	8003150 <HAL_TIM_IC_Init>

    // Input Capture Channel 1 Config
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010f6:	2301      	movs	r3, #1
 80010f8:	613b      	str	r3, [r7, #16]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
    sConfigIC.ICFilter = DIGITAL_FILTER;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
    HAL_TIM_IC_ConfigChannel(sensor->htimEcho, &sConfigIC, ECHO_CHANNEL);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	f107 010c 	add.w	r1, r7, #12
 800110a:	2200      	movs	r2, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f002 fa83 	bl	8003618 <HAL_TIM_IC_ConfigChannel>


    //Enable interrupts
    HAL_NVIC_SetPriority(sensor->EchoIRQ, ECHO_PRIORITY, 0);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8001118:	2200      	movs	r2, #0
 800111a:	2105      	movs	r1, #5
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fb45 	bl	80017ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(sensor->EchoIRQ);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fb5b 	bl	80017e4 <HAL_NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	@ 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <ultraSonicVidStart>:

void ultraSonicVidStart(ultraSonicInitTypeDef* sensor) {
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
    HAL_TIM_IC_Start_IT(sensor->htimEcho, ECHO_CHANNEL);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f002 f85d 	bl	8003204 <HAL_TIM_IC_Start_IT>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <ultraSonicFloatGetDistance>:

float ultraSonicFloatGetDistance(uint32_t* firstICVal, uint32_t* secondICVal) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
	uint32_t difference = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
	float distance = 4.00;
 8001162:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001166:	60bb      	str	r3, [r7, #8]
	if(*secondICVal >= *firstICVal){
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	d306      	bcc.n	8001182 <ultraSonicFloatGetDistance+0x2e>
		difference = (*secondICVal) - (*firstICVal);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	e008      	b.n	8001194 <ultraSonicFloatGetDistance+0x40>
	}else{
		difference = GET_ARR() - (*firstICVal) + (*secondICVal);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001190:	33ff      	adds	r3, #255	@ 0xff
 8001192:	60fb      	str	r3, [r7, #12]
	}
	distance = (difference * SOUND_SPEED) / 2.0f; // in cm
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800119e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80011c8 <ultraSonicFloatGetDistance+0x74>
 80011a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011a6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80011aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ae:	edc7 7a02 	vstr	s15, [r7, #8]
	return distance;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	ee07 3a90 	vmov	s15, r3
}
 80011b8:	eeb0 0a67 	vmov.f32	s0, s15
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	3d0c7e28 	.word	0x3d0c7e28

080011cc <ultraSonicVidInputCaptureHandler>:
void ultraSonicVidInputCaptureHandler(TIM_HandleTypeDef*htim, uint32_t*firstICVal, uint32_t* secondICVal,uint8_t*flag ,uint32_t ID, void*fPtr(uint32_t,float)){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	7f1b      	ldrb	r3, [r3, #28]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d175      	bne.n	80012ce <ultraSonicVidInputCaptureHandler+0x102>
		if(*flag == FIRST_CAPTURE){
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d12a      	bne.n	8001240 <ultraSonicVidInputCaptureHandler+0x74>
			// Rising edge captured
			*firstICVal = HAL_TIM_ReadCapturedValue(htim, ECHO_CHANNEL);
 80011ea:	2100      	movs	r1, #0
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f002 fb71 	bl	80038d4 <HAL_TIM_ReadCapturedValue>
 80011f2:	4602      	mov	r2, r0
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	601a      	str	r2, [r3, #0]
			__HAL_TIM_DISABLE_IT(htim, IT_CC_CHANNEL);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0202 	bic.w	r2, r2, #2
 8001206:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,ECHO_CHANNEL,TIM_INPUTCHANNELPOLARITY_FALLING);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6a1a      	ldr	r2, [r3, #32]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 020a 	bic.w	r2, r2, #10
 8001216:	621a      	str	r2, [r3, #32]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6a1a      	ldr	r2, [r3, #32]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0202 	orr.w	r2, r2, #2
 8001226:	621a      	str	r2, [r3, #32]
			__HAL_TIM_ENABLE_IT(htim, IT_CC_CHANNEL);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0202 	orr.w	r2, r2, #2
 8001236:	60da      	str	r2, [r3, #12]
			*flag = SECOND_CAPTURE;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
 800123e:	e046      	b.n	80012ce <ultraSonicVidInputCaptureHandler+0x102>
		}else{
		    // Falling edge captured
			*secondICVal = HAL_TIM_ReadCapturedValue(htim, ECHO_CHANNEL);
 8001240:	2100      	movs	r1, #0
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f002 fb46 	bl	80038d4 <HAL_TIM_ReadCapturedValue>
 8001248:	4602      	mov	r2, r0
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	601a      	str	r2, [r3, #0]
			__HAL_TIM_DISABLE_IT(htim, IT_CC_CHANNEL);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0202 	bic.w	r2, r2, #2
 800125c:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,ECHO_CHANNEL,TIM_INPUTCHANNELPOLARITY_RISING);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6a1a      	ldr	r2, [r3, #32]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 020a 	bic.w	r2, r2, #10
 800126c:	621a      	str	r2, [r3, #32]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6a12      	ldr	r2, [r2, #32]
 8001278:	621a      	str	r2, [r3, #32]
			__HAL_TIM_ENABLE_IT(htim, IT_CC_CHANNEL);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 0202 	orr.w	r2, r2, #2
 8001288:	60da      	str	r2, [r3, #12]
		    *flag = FIRST_CAPTURE;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
		    float distance = ultraSonicFloatGetDistance(firstICVal, secondICVal);
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	68b8      	ldr	r0, [r7, #8]
 8001294:	f7ff ff5e 	bl	8001154 <ultraSonicFloatGetDistance>
 8001298:	ed87 0a05 	vstr	s0, [r7, #20]
		    if (distance < MINIMUM_DISTANCE || distance > MAXIMUM_DISTANCE) return;
 800129c:	edd7 7a05 	vldr	s15, [r7, #20]
 80012a0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80012a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ac:	d40e      	bmi.n	80012cc <ultraSonicVidInputCaptureHandler+0x100>
 80012ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80012b2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80012d4 <ultraSonicVidInputCaptureHandler+0x108>
 80012b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012be:	dc05      	bgt.n	80012cc <ultraSonicVidInputCaptureHandler+0x100>
		     // processData
		    fPtr(ID,distance);
 80012c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c2:	ed97 0a05 	vldr	s0, [r7, #20]
 80012c6:	6a38      	ldr	r0, [r7, #32]
 80012c8:	4798      	blx	r3
 80012ca:	e000      	b.n	80012ce <ultraSonicVidInputCaptureHandler+0x102>
		    if (distance < MINIMUM_DISTANCE || distance > MAXIMUM_DISTANCE) return;
 80012cc:	bf00      	nop
		}
	}

}
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	43c80000 	.word	0x43c80000

080012d8 <ultraSonicVidTrig>:
void ultraSonicVidTrig(ultraSonicInitTypeDef* sensor){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->GPIOxTrigger, sensor->GPIOxTriggerPin, GPIO_PIN_SET);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	2201      	movs	r2, #1
 80012ec:	4619      	mov	r1, r3
 80012ee:	f000 fc23 	bl	8001b38 <HAL_GPIO_WritePin>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <ultraSonicVidHaltTrig>:
void ultraSonicVidHaltTrig(ultraSonicInitTypeDef* sensor){
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->GPIOxTrigger, sensor->GPIOxTriggerPin, GPIO_PIN_RESET);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	b29b      	uxth	r3, r3
 800130c:	2200      	movs	r2, #0
 800130e:	4619      	mov	r1, r3
 8001310:	f000 fc12 	bl	8001b38 <HAL_GPIO_WritePin>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <ultraSonicVidDelayMicroSeconds>:
void ultraSonicVidDelayMicroSeconds(uint32_t us)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
    volatile uint32_t count = us * 16;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	60fb      	str	r3, [r7, #12]

    while (count--)
 800132a:	e000      	b.n	800132e <ultraSonicVidDelayMicroSeconds+0x12>
    {
        __asm__ volatile ("nop");
 800132c:	bf00      	nop
    while (count--)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1e5a      	subs	r2, r3, #1
 8001332:	60fa      	str	r2, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f9      	bne.n	800132c <ultraSonicVidDelayMicroSeconds+0x10>
    }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <sendDataToQueue>:
volatile uint32_t FRONT_firstCap = 0, FRONT_secondCap = 0;
volatile uint32_t LHS_firstCap = 0, LHS_secondCap = 0;
volatile uint32_t RHS_firstCap = 0, RHS_secondCap = 0;
volatile uint8_t FRONT_flag = 0, LHS_flag= 0, RHS_flag= 0;

void sendDataToQueue(uint32_t sensorId, float distance){
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	ed87 0a00 	vstr	s0, [r7]
    sensorTypeDef sensorData = { sensorId, distance };
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	613b      	str	r3, [r7, #16]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
    osMessageQueuePut(sensorQueueHandle, &sensorData, 0, 0);
 8001360:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <sendDataToQueue+0x48>)
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	f107 010c 	add.w	r1, r7, #12
 8001368:	2300      	movs	r3, #0
 800136a:	2200      	movs	r2, #0
 800136c:	f003 f940 	bl	80045f0 <osMessageQueuePut>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d007      	beq.n	8001386 <sendDataToQueue+0x3e>
 8001376:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <sendDataToQueue+0x4c>)
 8001378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	f3bf 8f4f 	dsb	sy
 8001382:	f3bf 8f6f 	isb	sy
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200002f4 	.word	0x200002f4
 8001394:	e000ed04 	.word	0xe000ed04

08001398 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af02      	add	r7, sp, #8
 800139e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a18      	ldr	r2, [pc, #96]	@ (8001408 <HAL_TIM_IC_CaptureCallback+0x70>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d10a      	bne.n	80013c0 <HAL_TIM_IC_CaptureCallback+0x28>
    	ultraSonicVidInputCaptureHandler(htim, (uint32_t*)&FRONT_firstCap, (uint32_t*)&FRONT_secondCap, (uint8_t*)&FRONT_flag,1,sendDataToQueue);
 80013aa:	4b18      	ldr	r3, [pc, #96]	@ (800140c <HAL_TIM_IC_CaptureCallback+0x74>)
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	2301      	movs	r3, #1
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <HAL_TIM_IC_CaptureCallback+0x78>)
 80013b4:	4a17      	ldr	r2, [pc, #92]	@ (8001414 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80013b6:	4918      	ldr	r1, [pc, #96]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0x80>)
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff07 	bl	80011cc <ultraSonicVidInputCaptureHandler>
    } else if (htim->Instance == TIM4) {
    	ultraSonicVidInputCaptureHandler(htim, (uint32_t*)&LHS_firstCap, (uint32_t*)&LHS_secondCap, (uint8_t*)&LHS_flag,2, sendDataToQueue);
    } else if (htim->Instance == TIM5) {
    	ultraSonicVidInputCaptureHandler(htim, (uint32_t*)&RHS_firstCap, (uint32_t*)&RHS_secondCap, (uint8_t*)&RHS_flag,3,sendDataToQueue );
    }
}
 80013be:	e01e      	b.n	80013fe <HAL_TIM_IC_CaptureCallback+0x66>
    } else if (htim->Instance == TIM4) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a15      	ldr	r2, [pc, #84]	@ (800141c <HAL_TIM_IC_CaptureCallback+0x84>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d10a      	bne.n	80013e0 <HAL_TIM_IC_CaptureCallback+0x48>
    	ultraSonicVidInputCaptureHandler(htim, (uint32_t*)&LHS_firstCap, (uint32_t*)&LHS_secondCap, (uint8_t*)&LHS_flag,2, sendDataToQueue);
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <HAL_TIM_IC_CaptureCallback+0x74>)
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	2302      	movs	r3, #2
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <HAL_TIM_IC_CaptureCallback+0x88>)
 80013d4:	4a13      	ldr	r2, [pc, #76]	@ (8001424 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80013d6:	4914      	ldr	r1, [pc, #80]	@ (8001428 <HAL_TIM_IC_CaptureCallback+0x90>)
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff fef7 	bl	80011cc <ultraSonicVidInputCaptureHandler>
}
 80013de:	e00e      	b.n	80013fe <HAL_TIM_IC_CaptureCallback+0x66>
    } else if (htim->Instance == TIM5) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a11      	ldr	r2, [pc, #68]	@ (800142c <HAL_TIM_IC_CaptureCallback+0x94>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d109      	bne.n	80013fe <HAL_TIM_IC_CaptureCallback+0x66>
    	ultraSonicVidInputCaptureHandler(htim, (uint32_t*)&RHS_firstCap, (uint32_t*)&RHS_secondCap, (uint8_t*)&RHS_flag,3,sendDataToQueue );
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <HAL_TIM_IC_CaptureCallback+0x74>)
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	2303      	movs	r3, #3
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <HAL_TIM_IC_CaptureCallback+0x98>)
 80013f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001434 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80013f6:	4910      	ldr	r1, [pc, #64]	@ (8001438 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fee7 	bl	80011cc <ultraSonicVidInputCaptureHandler>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40000400 	.word	0x40000400
 800140c:	08001349 	.word	0x08001349
 8001410:	20000310 	.word	0x20000310
 8001414:	200002fc 	.word	0x200002fc
 8001418:	200002f8 	.word	0x200002f8
 800141c:	40000800 	.word	0x40000800
 8001420:	20000311 	.word	0x20000311
 8001424:	20000304 	.word	0x20000304
 8001428:	20000300 	.word	0x20000300
 800142c:	40000c00 	.word	0x40000c00
 8001430:	20000312 	.word	0x20000312
 8001434:	2000030c 	.word	0x2000030c
 8001438:	20000308 	.word	0x20000308

0800143c <perceptionVidTriggerSensorsTask>:
void perceptionVidTriggerSensorsTask(void* pvParameters){
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	for(;;){
		ultraSonicVidTrig(&FRONT_ultraSonic);
 8001444:	4812      	ldr	r0, [pc, #72]	@ (8001490 <perceptionVidTriggerSensorsTask+0x54>)
 8001446:	f7ff ff47 	bl	80012d8 <ultraSonicVidTrig>
		ultraSonicVidDelayMicroSeconds(10);
 800144a:	200a      	movs	r0, #10
 800144c:	f7ff ff66 	bl	800131c <ultraSonicVidDelayMicroSeconds>
		ultraSonicVidHaltTrig(&FRONT_ultraSonic);
 8001450:	480f      	ldr	r0, [pc, #60]	@ (8001490 <perceptionVidTriggerSensorsTask+0x54>)
 8001452:	f7ff ff52 	bl	80012fa <ultraSonicVidHaltTrig>
		osDelay(40);
 8001456:	2028      	movs	r0, #40	@ 0x28
 8001458:	f002 ff2e 	bl	80042b8 <osDelay>
		ultraSonicVidTrig(&LHS_ultraSonic);
 800145c:	480d      	ldr	r0, [pc, #52]	@ (8001494 <perceptionVidTriggerSensorsTask+0x58>)
 800145e:	f7ff ff3b 	bl	80012d8 <ultraSonicVidTrig>
		ultraSonicVidDelayMicroSeconds(10);
 8001462:	200a      	movs	r0, #10
 8001464:	f7ff ff5a 	bl	800131c <ultraSonicVidDelayMicroSeconds>
		ultraSonicVidHaltTrig(&LHS_ultraSonic);
 8001468:	480a      	ldr	r0, [pc, #40]	@ (8001494 <perceptionVidTriggerSensorsTask+0x58>)
 800146a:	f7ff ff46 	bl	80012fa <ultraSonicVidHaltTrig>
		osDelay(40);
 800146e:	2028      	movs	r0, #40	@ 0x28
 8001470:	f002 ff22 	bl	80042b8 <osDelay>
		ultraSonicVidTrig(&RHS_ultraSonic);
 8001474:	4808      	ldr	r0, [pc, #32]	@ (8001498 <perceptionVidTriggerSensorsTask+0x5c>)
 8001476:	f7ff ff2f 	bl	80012d8 <ultraSonicVidTrig>
		ultraSonicVidDelayMicroSeconds(20);
 800147a:	2014      	movs	r0, #20
 800147c:	f7ff ff4e 	bl	800131c <ultraSonicVidDelayMicroSeconds>
		ultraSonicVidHaltTrig(&RHS_ultraSonic);
 8001480:	4805      	ldr	r0, [pc, #20]	@ (8001498 <perceptionVidTriggerSensorsTask+0x5c>)
 8001482:	f7ff ff3a 	bl	80012fa <ultraSonicVidHaltTrig>
		osDelay(40);
 8001486:	2028      	movs	r0, #40	@ 0x28
 8001488:	f002 ff16 	bl	80042b8 <osDelay>
		ultraSonicVidTrig(&FRONT_ultraSonic);
 800148c:	bf00      	nop
 800148e:	e7d9      	b.n	8001444 <perceptionVidTriggerSensorsTask+0x8>
 8001490:	20000058 	.word	0x20000058
 8001494:	20000078 	.word	0x20000078
 8001498:	20000098 	.word	0x20000098

0800149c <perceptionVidSendSensorDataTask>:
	}
}
void perceptionVidSendSensorDataTask(void* pvParameters) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	sensorTypeDef sensorToSend = {0};
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
    for (;;) {
        osDelay(50);
 80014ae:	2032      	movs	r0, #50	@ 0x32
 80014b0:	f002 ff02 	bl	80042b8 <osDelay>
        if (osMessageQueueGet(sensorQueueHandle, &sensorToSend , NULL, 0) == osOK) {
 80014b4:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <perceptionVidSendSensorDataTask+0x54>)
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	f107 0108 	add.w	r1, r7, #8
 80014bc:	2300      	movs	r3, #0
 80014be:	2200      	movs	r2, #0
 80014c0:	f003 f8f6 	bl	80046b0 <osMessageQueueGet>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f1      	bne.n	80014ae <perceptionVidSendSensorDataTask+0x12>
        	osMutexAcquire(spiMutexHandle, osWaitForever);
 80014ca:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <perceptionVidSendSensorDataTask+0x58>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f04f 31ff 	mov.w	r1, #4294967295
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 ff91 	bl	80043fa <osMutexAcquire>
        	transmissionVidSendSensorData(&sensorToSend);
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fd8f 	bl	8001000 <transmissionVidSendSensorData>
        	osMutexRelease(spiMutexHandle);
 80014e2:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <perceptionVidSendSensorDataTask+0x58>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 ffd2 	bl	8004490 <osMutexRelease>
        osDelay(50);
 80014ec:	e7df      	b.n	80014ae <perceptionVidSendSensorDataTask+0x12>
 80014ee:	bf00      	nop
 80014f0:	200002f4 	.word	0x200002f4
 80014f4:	20000218 	.word	0x20000218

080014f8 <perceptionVidInit>:
        }
    }
}
void perceptionVidInit(void) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
    sensorQueueHandle = osMessageQueueNew(10, sizeof(sensorTypeDef), &sensorQueue_attr);
 80014fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001534 <perceptionVidInit+0x3c>)
 80014fe:	2108      	movs	r1, #8
 8001500:	200a      	movs	r0, #10
 8001502:	f003 f802 	bl	800450a <osMessageQueueNew>
 8001506:	4603      	mov	r3, r0
 8001508:	4a0b      	ldr	r2, [pc, #44]	@ (8001538 <perceptionVidInit+0x40>)
 800150a:	6013      	str	r3, [r2, #0]
    ultraSonicVidInit(&FRONT_ultraSonic);
 800150c:	480b      	ldr	r0, [pc, #44]	@ (800153c <perceptionVidInit+0x44>)
 800150e:	f7ff fd99 	bl	8001044 <ultraSonicVidInit>
    ultraSonicVidInit(&LHS_ultraSonic);
 8001512:	480b      	ldr	r0, [pc, #44]	@ (8001540 <perceptionVidInit+0x48>)
 8001514:	f7ff fd96 	bl	8001044 <ultraSonicVidInit>
    ultraSonicVidInit(&RHS_ultraSonic);
 8001518:	480a      	ldr	r0, [pc, #40]	@ (8001544 <perceptionVidInit+0x4c>)
 800151a:	f7ff fd93 	bl	8001044 <ultraSonicVidInit>
    ultraSonicVidStart(&FRONT_ultraSonic);
 800151e:	4807      	ldr	r0, [pc, #28]	@ (800153c <perceptionVidInit+0x44>)
 8001520:	f7ff fe09 	bl	8001136 <ultraSonicVidStart>
    ultraSonicVidStart(&LHS_ultraSonic);
 8001524:	4806      	ldr	r0, [pc, #24]	@ (8001540 <perceptionVidInit+0x48>)
 8001526:	f7ff fe06 	bl	8001136 <ultraSonicVidStart>
    ultraSonicVidStart(&RHS_ultraSonic);
 800152a:	4806      	ldr	r0, [pc, #24]	@ (8001544 <perceptionVidInit+0x4c>)
 800152c:	f7ff fe03 	bl	8001136 <ultraSonicVidStart>
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	0800710c 	.word	0x0800710c
 8001538:	200002f4 	.word	0x200002f4
 800153c:	20000058 	.word	0x20000058
 8001540:	20000078 	.word	0x20000078
 8001544:	20000098 	.word	0x20000098

08001548 <perceptionVidBegin>:

void perceptionVidBegin(void) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b092      	sub	sp, #72	@ 0x48
 800154c:	af00      	add	r7, sp, #0
	const osThreadAttr_t sendDateTaskAttr = {
 800154e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001552:	2224      	movs	r2, #36	@ 0x24
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f005 fc9c 	bl	8006e94 <memset>
 800155c:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <perceptionVidBegin+0x60>)
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001560:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001564:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001566:	2308      	movs	r3, #8
 8001568:	63fb      	str	r3, [r7, #60]	@ 0x3c
	    .name = "SendDataTask",
	    .priority = osPriorityLow,
	    .stack_size = 128 * 4
	};
	const osThreadAttr_t TrigSenorsTaskAttr = {
 800156a:	463b      	mov	r3, r7
 800156c:	2224      	movs	r2, #36	@ 0x24
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f005 fc8f 	bl	8006e94 <memset>
 8001576:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <perceptionVidBegin+0x64>)
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	2328      	movs	r3, #40	@ 0x28
 8001582:	61bb      	str	r3, [r7, #24]
			.name = "TriggerSensors",
		    .priority = osPriorityHigh,
		    .stack_size = 128 * 4

	};
	osThreadNew(perceptionVidTriggerSensorsTask, NULL, &TrigSenorsTaskAttr);
 8001584:	463b      	mov	r3, r7
 8001586:	461a      	mov	r2, r3
 8001588:	2100      	movs	r1, #0
 800158a:	4809      	ldr	r0, [pc, #36]	@ (80015b0 <perceptionVidBegin+0x68>)
 800158c:	f002 fe02 	bl	8004194 <osThreadNew>
    osThreadNew(perceptionVidSendSensorDataTask, NULL, &sendDateTaskAttr);
 8001590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001594:	461a      	mov	r2, r3
 8001596:	2100      	movs	r1, #0
 8001598:	4806      	ldr	r0, [pc, #24]	@ (80015b4 <perceptionVidBegin+0x6c>)
 800159a:	f002 fdfb 	bl	8004194 <osThreadNew>
}
 800159e:	bf00      	nop
 80015a0:	3748      	adds	r7, #72	@ 0x48
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	080070ac 	.word	0x080070ac
 80015ac:	080070bc 	.word	0x080070bc
 80015b0:	0800143d 	.word	0x0800143d
 80015b4:	0800149d 	.word	0x0800149d

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015bc:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	@ (80015f8 <HAL_Init+0x40>)
 80015c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c8:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	@ (80015f8 <HAL_Init+0x40>)
 80015ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a07      	ldr	r2, [pc, #28]	@ (80015f8 <HAL_Init+0x40>)
 80015da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 f8d8 	bl	8001796 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e6:	200f      	movs	r0, #15
 80015e8:	f7ff f8e4 	bl	80007b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ec:	f7ff f86e 	bl	80006cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023c00 	.word	0x40023c00

080015fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_IncTick+0x20>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_IncTick+0x24>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <HAL_IncTick+0x24>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	200000bc 	.word	0x200000bc
 8001620:	20000314 	.word	0x20000314

08001624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b03      	ldr	r3, [pc, #12]	@ (8001638 <HAL_GetTick+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000314 	.word	0x20000314

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	@ (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	@ (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db0b      	blt.n	80016ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4907      	ldr	r1, [pc, #28]	@ (80016d8 <__NVIC_EnableIRQ+0x38>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000e100 	.word	0xe000e100

080016dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	@ (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	@ (800172c <__NVIC_SetPriority+0x50>)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	@ 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
         );
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	@ 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ff4c 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017be:	f7ff ff61 	bl	8001684 <__NVIC_GetPriorityGrouping>
 80017c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	68b9      	ldr	r1, [r7, #8]
 80017c8:	6978      	ldr	r0, [r7, #20]
 80017ca:	f7ff ffb1 	bl	8001730 <NVIC_EncodePriority>
 80017ce:	4602      	mov	r2, r0
 80017d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff80 	bl	80016dc <__NVIC_SetPriority>
}
 80017dc:	bf00      	nop
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff54 	bl	80016a0 <__NVIC_EnableIRQ>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	@ 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	e159      	b.n	8001ad0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800181c:	2201      	movs	r2, #1
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	429a      	cmp	r2, r3
 8001836:	f040 8148 	bne.w	8001aca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b01      	cmp	r3, #1
 8001844:	d005      	beq.n	8001852 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800184e:	2b02      	cmp	r3, #2
 8001850:	d130      	bne.n	80018b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2203      	movs	r2, #3
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001888:	2201      	movs	r2, #1
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 0201 	and.w	r2, r3, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d017      	beq.n	80018f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d123      	bne.n	8001944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	08da      	lsrs	r2, r3, #3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3208      	adds	r2, #8
 8001904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	691a      	ldr	r2, [r3, #16]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	08da      	lsrs	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3208      	adds	r2, #8
 800193e:	69b9      	ldr	r1, [r7, #24]
 8001940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0203 	and.w	r2, r3, #3
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80a2 	beq.w	8001aca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	4b57      	ldr	r3, [pc, #348]	@ (8001ae8 <HAL_GPIO_Init+0x2e8>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198e:	4a56      	ldr	r2, [pc, #344]	@ (8001ae8 <HAL_GPIO_Init+0x2e8>)
 8001990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001994:	6453      	str	r3, [r2, #68]	@ 0x44
 8001996:	4b54      	ldr	r3, [pc, #336]	@ (8001ae8 <HAL_GPIO_Init+0x2e8>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a2:	4a52      	ldr	r2, [pc, #328]	@ (8001aec <HAL_GPIO_Init+0x2ec>)
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	3302      	adds	r3, #2
 80019aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	220f      	movs	r2, #15
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a49      	ldr	r2, [pc, #292]	@ (8001af0 <HAL_GPIO_Init+0x2f0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d019      	beq.n	8001a02 <HAL_GPIO_Init+0x202>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a48      	ldr	r2, [pc, #288]	@ (8001af4 <HAL_GPIO_Init+0x2f4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d013      	beq.n	80019fe <HAL_GPIO_Init+0x1fe>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a47      	ldr	r2, [pc, #284]	@ (8001af8 <HAL_GPIO_Init+0x2f8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00d      	beq.n	80019fa <HAL_GPIO_Init+0x1fa>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a46      	ldr	r2, [pc, #280]	@ (8001afc <HAL_GPIO_Init+0x2fc>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d007      	beq.n	80019f6 <HAL_GPIO_Init+0x1f6>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a45      	ldr	r2, [pc, #276]	@ (8001b00 <HAL_GPIO_Init+0x300>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d101      	bne.n	80019f2 <HAL_GPIO_Init+0x1f2>
 80019ee:	2304      	movs	r3, #4
 80019f0:	e008      	b.n	8001a04 <HAL_GPIO_Init+0x204>
 80019f2:	2307      	movs	r3, #7
 80019f4:	e006      	b.n	8001a04 <HAL_GPIO_Init+0x204>
 80019f6:	2303      	movs	r3, #3
 80019f8:	e004      	b.n	8001a04 <HAL_GPIO_Init+0x204>
 80019fa:	2302      	movs	r3, #2
 80019fc:	e002      	b.n	8001a04 <HAL_GPIO_Init+0x204>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_GPIO_Init+0x204>
 8001a02:	2300      	movs	r3, #0
 8001a04:	69fa      	ldr	r2, [r7, #28]
 8001a06:	f002 0203 	and.w	r2, r2, #3
 8001a0a:	0092      	lsls	r2, r2, #2
 8001a0c:	4093      	lsls	r3, r2
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a14:	4935      	ldr	r1, [pc, #212]	@ (8001aec <HAL_GPIO_Init+0x2ec>)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a22:	4b38      	ldr	r3, [pc, #224]	@ (8001b04 <HAL_GPIO_Init+0x304>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a46:	4a2f      	ldr	r2, [pc, #188]	@ (8001b04 <HAL_GPIO_Init+0x304>)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b04 <HAL_GPIO_Init+0x304>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a70:	4a24      	ldr	r2, [pc, #144]	@ (8001b04 <HAL_GPIO_Init+0x304>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a76:	4b23      	ldr	r3, [pc, #140]	@ (8001b04 <HAL_GPIO_Init+0x304>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a9a:	4a1a      	ldr	r2, [pc, #104]	@ (8001b04 <HAL_GPIO_Init+0x304>)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa0:	4b18      	ldr	r3, [pc, #96]	@ (8001b04 <HAL_GPIO_Init+0x304>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac4:	4a0f      	ldr	r2, [pc, #60]	@ (8001b04 <HAL_GPIO_Init+0x304>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3301      	adds	r3, #1
 8001ace:	61fb      	str	r3, [r7, #28]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	2b0f      	cmp	r3, #15
 8001ad4:	f67f aea2 	bls.w	800181c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	3724      	adds	r7, #36	@ 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40013800 	.word	0x40013800
 8001af0:	40020000 	.word	0x40020000
 8001af4:	40020400 	.word	0x40020400
 8001af8:	40020800 	.word	0x40020800
 8001afc:	40020c00 	.word	0x40020c00
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40013c00 	.word	0x40013c00

08001b08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
 8001b24:	e001      	b.n	8001b2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
 8001b44:	4613      	mov	r3, r2
 8001b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b48:	787b      	ldrb	r3, [r7, #1]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b4e:	887a      	ldrh	r2, [r7, #2]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b54:	e003      	b.n	8001b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b56:	887b      	ldrh	r3, [r7, #2]
 8001b58:	041a      	lsls	r2, r3, #16
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	619a      	str	r2, [r3, #24]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e267      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d075      	beq.n	8001c76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b8a:	4b88      	ldr	r3, [pc, #544]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d00c      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b96:	4b85      	ldr	r3, [pc, #532]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d112      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba2:	4b82      	ldr	r3, [pc, #520]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001baa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bae:	d10b      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb0:	4b7e      	ldr	r3, [pc, #504]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d05b      	beq.n	8001c74 <HAL_RCC_OscConfig+0x108>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d157      	bne.n	8001c74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e242      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd0:	d106      	bne.n	8001be0 <HAL_RCC_OscConfig+0x74>
 8001bd2:	4b76      	ldr	r3, [pc, #472]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a75      	ldr	r2, [pc, #468]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e01d      	b.n	8001c1c <HAL_RCC_OscConfig+0xb0>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x98>
 8001bea:	4b70      	ldr	r3, [pc, #448]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a6f      	ldr	r2, [pc, #444]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001bf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	4b6d      	ldr	r3, [pc, #436]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a6c      	ldr	r2, [pc, #432]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e00b      	b.n	8001c1c <HAL_RCC_OscConfig+0xb0>
 8001c04:	4b69      	ldr	r3, [pc, #420]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a68      	ldr	r2, [pc, #416]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001c0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b66      	ldr	r3, [pc, #408]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a65      	ldr	r2, [pc, #404]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001c16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d013      	beq.n	8001c4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fcfe 	bl	8001624 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff fcfa 	bl	8001624 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	@ 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e207      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	4b5b      	ldr	r3, [pc, #364]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0xc0>
 8001c4a:	e014      	b.n	8001c76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fcea 	bl	8001624 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c54:	f7ff fce6 	bl	8001624 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b64      	cmp	r3, #100	@ 0x64
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e1f3      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c66:	4b51      	ldr	r3, [pc, #324]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0xe8>
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d063      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c82:	4b4a      	ldr	r3, [pc, #296]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00b      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8e:	4b47      	ldr	r3, [pc, #284]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d11c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c9a:	4b44      	ldr	r3, [pc, #272]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d116      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca6:	4b41      	ldr	r3, [pc, #260]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_RCC_OscConfig+0x152>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d001      	beq.n	8001cbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e1c7      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4937      	ldr	r1, [pc, #220]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd2:	e03a      	b.n	8001d4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d020      	beq.n	8001d1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cdc:	4b34      	ldr	r3, [pc, #208]	@ (8001db0 <HAL_RCC_OscConfig+0x244>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce2:	f7ff fc9f 	bl	8001624 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cea:	f7ff fc9b 	bl	8001624 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e1a8      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d08:	4b28      	ldr	r3, [pc, #160]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4925      	ldr	r1, [pc, #148]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]
 8001d1c:	e015      	b.n	8001d4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1e:	4b24      	ldr	r3, [pc, #144]	@ (8001db0 <HAL_RCC_OscConfig+0x244>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7ff fc7e 	bl	8001624 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2c:	f7ff fc7a 	bl	8001624 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e187      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d036      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d016      	beq.n	8001d8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5e:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <HAL_RCC_OscConfig+0x248>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d64:	f7ff fc5e 	bl	8001624 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6c:	f7ff fc5a 	bl	8001624 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e167      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <HAL_RCC_OscConfig+0x240>)
 8001d80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x200>
 8001d8a:	e01b      	b.n	8001dc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8c:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <HAL_RCC_OscConfig+0x248>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d92:	f7ff fc47 	bl	8001624 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d98:	e00e      	b.n	8001db8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9a:	f7ff fc43 	bl	8001624 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d907      	bls.n	8001db8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e150      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
 8001dac:	40023800 	.word	0x40023800
 8001db0:	42470000 	.word	0x42470000
 8001db4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db8:	4b88      	ldr	r3, [pc, #544]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001dba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1ea      	bne.n	8001d9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 8097 	beq.w	8001f00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd6:	4b81      	ldr	r3, [pc, #516]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10f      	bne.n	8001e02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	4b7d      	ldr	r3, [pc, #500]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	4a7c      	ldr	r2, [pc, #496]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df2:	4b7a      	ldr	r3, [pc, #488]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e02:	4b77      	ldr	r3, [pc, #476]	@ (8001fe0 <HAL_RCC_OscConfig+0x474>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d118      	bne.n	8001e40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0e:	4b74      	ldr	r3, [pc, #464]	@ (8001fe0 <HAL_RCC_OscConfig+0x474>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a73      	ldr	r2, [pc, #460]	@ (8001fe0 <HAL_RCC_OscConfig+0x474>)
 8001e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff fc03 	bl	8001624 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e22:	f7ff fbff 	bl	8001624 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e10c      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e34:	4b6a      	ldr	r3, [pc, #424]	@ (8001fe0 <HAL_RCC_OscConfig+0x474>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x2ea>
 8001e48:	4b64      	ldr	r3, [pc, #400]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4c:	4a63      	ldr	r2, [pc, #396]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e54:	e01c      	b.n	8001e90 <HAL_RCC_OscConfig+0x324>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b05      	cmp	r3, #5
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x30c>
 8001e5e:	4b5f      	ldr	r3, [pc, #380]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e62:	4a5e      	ldr	r2, [pc, #376]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e6a:	4b5c      	ldr	r3, [pc, #368]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6e:	4a5b      	ldr	r2, [pc, #364]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0x324>
 8001e78:	4b58      	ldr	r3, [pc, #352]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7c:	4a57      	ldr	r2, [pc, #348]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e84:	4b55      	ldr	r3, [pc, #340]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e88:	4a54      	ldr	r2, [pc, #336]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e8a:	f023 0304 	bic.w	r3, r3, #4
 8001e8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d015      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7ff fbc4 	bl	8001624 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea0:	f7ff fbc0 	bl	8001624 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e0cb      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb6:	4b49      	ldr	r3, [pc, #292]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0ee      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x334>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec4:	f7ff fbae 	bl	8001624 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ecc:	f7ff fbaa 	bl	8001624 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e0b5      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1ee      	bne.n	8001ecc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eee:	7dfb      	ldrb	r3, [r7, #23]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d105      	bne.n	8001f00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef4:	4b39      	ldr	r3, [pc, #228]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	4a38      	ldr	r2, [pc, #224]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001efe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 80a1 	beq.w	800204c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f0a:	4b34      	ldr	r3, [pc, #208]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d05c      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d141      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1e:	4b31      	ldr	r3, [pc, #196]	@ (8001fe4 <HAL_RCC_OscConfig+0x478>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff fb7e 	bl	8001624 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7ff fb7a 	bl	8001624 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e087      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3e:	4b27      	ldr	r3, [pc, #156]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69da      	ldr	r2, [r3, #28]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f58:	019b      	lsls	r3, r3, #6
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	041b      	lsls	r3, r3, #16
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6c:	061b      	lsls	r3, r3, #24
 8001f6e:	491b      	ldr	r1, [pc, #108]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f74:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <HAL_RCC_OscConfig+0x478>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7a:	f7ff fb53 	bl	8001624 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f82:	f7ff fb4f 	bl	8001624 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e05c      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f94:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x416>
 8001fa0:	e054      	b.n	800204c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <HAL_RCC_OscConfig+0x478>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7ff fb3c 	bl	8001624 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7ff fb38 	bl	8001624 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e045      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc2:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x444>
 8001fce:	e03d      	b.n	800204c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d107      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e038      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40007000 	.word	0x40007000
 8001fe4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <HAL_RCC_OscConfig+0x4ec>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d028      	beq.n	8002048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002000:	429a      	cmp	r2, r3
 8002002:	d121      	bne.n	8002048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	429a      	cmp	r2, r3
 8002010:	d11a      	bne.n	8002048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002018:	4013      	ands	r3, r2
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800201e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002020:	4293      	cmp	r3, r2
 8002022:	d111      	bne.n	8002048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202e:	085b      	lsrs	r3, r3, #1
 8002030:	3b01      	subs	r3, #1
 8002032:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002034:	429a      	cmp	r2, r3
 8002036:	d107      	bne.n	8002048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002042:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800

0800205c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0cc      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002070:	4b68      	ldr	r3, [pc, #416]	@ (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d90c      	bls.n	8002098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b65      	ldr	r3, [pc, #404]	@ (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b63      	ldr	r3, [pc, #396]	@ (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0b8      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d020      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b0:	4b59      	ldr	r3, [pc, #356]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4a58      	ldr	r2, [pc, #352]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c8:	4b53      	ldr	r3, [pc, #332]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4a52      	ldr	r2, [pc, #328]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d4:	4b50      	ldr	r3, [pc, #320]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	494d      	ldr	r1, [pc, #308]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d044      	beq.n	800217c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	4b47      	ldr	r3, [pc, #284]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d119      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e07f      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d003      	beq.n	800211a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002116:	2b03      	cmp	r3, #3
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211a:	4b3f      	ldr	r3, [pc, #252]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e06f      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212a:	4b3b      	ldr	r3, [pc, #236]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e067      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213a:	4b37      	ldr	r3, [pc, #220]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f023 0203 	bic.w	r2, r3, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4934      	ldr	r1, [pc, #208]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	4313      	orrs	r3, r2
 800214a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800214c:	f7ff fa6a 	bl	8001624 <HAL_GetTick>
 8002150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	e00a      	b.n	800216a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002154:	f7ff fa66 	bl	8001624 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e04f      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	4b2b      	ldr	r3, [pc, #172]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 020c 	and.w	r2, r3, #12
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	429a      	cmp	r2, r3
 800217a:	d1eb      	bne.n	8002154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800217c:	4b25      	ldr	r3, [pc, #148]	@ (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d20c      	bcs.n	80021a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b22      	ldr	r3, [pc, #136]	@ (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002192:	4b20      	ldr	r3, [pc, #128]	@ (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d001      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e032      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b0:	4b19      	ldr	r3, [pc, #100]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4916      	ldr	r1, [pc, #88]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ce:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	490e      	ldr	r1, [pc, #56]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021e2:	f000 f821 	bl	8002228 <HAL_RCC_GetSysClockFreq>
 80021e6:	4602      	mov	r2, r0
 80021e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	490a      	ldr	r1, [pc, #40]	@ (800221c <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	5ccb      	ldrb	r3, [r1, r3]
 80021f6:	fa22 f303 	lsr.w	r3, r2, r3
 80021fa:	4a09      	ldr	r2, [pc, #36]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021fe:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <HAL_RCC_ClockConfig+0x1c8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fad6 	bl	80007b4 <HAL_InitTick>

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023c00 	.word	0x40023c00
 8002218:	40023800 	.word	0x40023800
 800221c:	080070e4 	.word	0x080070e4
 8002220:	20000000 	.word	0x20000000
 8002224:	200000b8 	.word	0x200000b8

08002228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800222c:	b090      	sub	sp, #64	@ 0x40
 800222e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002240:	4b59      	ldr	r3, [pc, #356]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b08      	cmp	r3, #8
 800224a:	d00d      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x40>
 800224c:	2b08      	cmp	r3, #8
 800224e:	f200 80a1 	bhi.w	8002394 <HAL_RCC_GetSysClockFreq+0x16c>
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x34>
 8002256:	2b04      	cmp	r3, #4
 8002258:	d003      	beq.n	8002262 <HAL_RCC_GetSysClockFreq+0x3a>
 800225a:	e09b      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800225c:	4b53      	ldr	r3, [pc, #332]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x184>)
 800225e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002260:	e09b      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002262:	4b53      	ldr	r3, [pc, #332]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002264:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002266:	e098      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002268:	4b4f      	ldr	r3, [pc, #316]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002270:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002272:	4b4d      	ldr	r3, [pc, #308]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d028      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800227e:	4b4a      	ldr	r3, [pc, #296]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	099b      	lsrs	r3, r3, #6
 8002284:	2200      	movs	r2, #0
 8002286:	623b      	str	r3, [r7, #32]
 8002288:	627a      	str	r2, [r7, #36]	@ 0x24
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002290:	2100      	movs	r1, #0
 8002292:	4b47      	ldr	r3, [pc, #284]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002294:	fb03 f201 	mul.w	r2, r3, r1
 8002298:	2300      	movs	r3, #0
 800229a:	fb00 f303 	mul.w	r3, r0, r3
 800229e:	4413      	add	r3, r2
 80022a0:	4a43      	ldr	r2, [pc, #268]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80022a2:	fba0 1202 	umull	r1, r2, r0, r2
 80022a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022a8:	460a      	mov	r2, r1
 80022aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80022ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022ae:	4413      	add	r3, r2
 80022b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b4:	2200      	movs	r2, #0
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	61fa      	str	r2, [r7, #28]
 80022ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80022c2:	f7fd ff8d 	bl	80001e0 <__aeabi_uldivmod>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4613      	mov	r3, r2
 80022cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022ce:	e053      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d0:	4b35      	ldr	r3, [pc, #212]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	099b      	lsrs	r3, r3, #6
 80022d6:	2200      	movs	r2, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	617a      	str	r2, [r7, #20]
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022e2:	f04f 0b00 	mov.w	fp, #0
 80022e6:	4652      	mov	r2, sl
 80022e8:	465b      	mov	r3, fp
 80022ea:	f04f 0000 	mov.w	r0, #0
 80022ee:	f04f 0100 	mov.w	r1, #0
 80022f2:	0159      	lsls	r1, r3, #5
 80022f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022f8:	0150      	lsls	r0, r2, #5
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	ebb2 080a 	subs.w	r8, r2, sl
 8002302:	eb63 090b 	sbc.w	r9, r3, fp
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002312:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002316:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800231a:	ebb2 0408 	subs.w	r4, r2, r8
 800231e:	eb63 0509 	sbc.w	r5, r3, r9
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	00eb      	lsls	r3, r5, #3
 800232c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002330:	00e2      	lsls	r2, r4, #3
 8002332:	4614      	mov	r4, r2
 8002334:	461d      	mov	r5, r3
 8002336:	eb14 030a 	adds.w	r3, r4, sl
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	eb45 030b 	adc.w	r3, r5, fp
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800234e:	4629      	mov	r1, r5
 8002350:	028b      	lsls	r3, r1, #10
 8002352:	4621      	mov	r1, r4
 8002354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002358:	4621      	mov	r1, r4
 800235a:	028a      	lsls	r2, r1, #10
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002362:	2200      	movs	r2, #0
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	60fa      	str	r2, [r7, #12]
 8002368:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800236c:	f7fd ff38 	bl	80001e0 <__aeabi_uldivmod>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4613      	mov	r3, r2
 8002376:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002378:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	3301      	adds	r3, #1
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002388:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800238a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002390:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002392:	e002      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002394:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x184>)
 8002396:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800239a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800239c:	4618      	mov	r0, r3
 800239e:	3740      	adds	r7, #64	@ 0x40
 80023a0:	46bd      	mov	sp, r7
 80023a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	00f42400 	.word	0x00f42400
 80023b0:	017d7840 	.word	0x017d7840

080023b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b8:	4b03      	ldr	r3, [pc, #12]	@ (80023c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000000 	.word	0x20000000

080023cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023d0:	f7ff fff0 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0b5b      	lsrs	r3, r3, #13
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4903      	ldr	r1, [pc, #12]	@ (80023f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023e2:	5ccb      	ldrb	r3, [r1, r3]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	080070f4 	.word	0x080070f4

080023f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	220f      	movs	r2, #15
 8002402:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002404:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <HAL_RCC_GetClockConfig+0x5c>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0203 	and.w	r2, r3, #3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002410:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <HAL_RCC_GetClockConfig+0x5c>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800241c:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <HAL_RCC_GetClockConfig+0x5c>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002428:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <HAL_RCC_GetClockConfig+0x5c>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	08db      	lsrs	r3, r3, #3
 800242e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002436:	4b07      	ldr	r3, [pc, #28]	@ (8002454 <HAL_RCC_GetClockConfig+0x60>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0207 	and.w	r2, r3, #7
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	601a      	str	r2, [r3, #0]
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	40023c00 	.word	0x40023c00

08002458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e07b      	b.n	8002562 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246e:	2b00      	cmp	r3, #0
 8002470:	d108      	bne.n	8002484 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800247a:	d009      	beq.n	8002490 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
 8002482:	e005      	b.n	8002490 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe f93a 	bl	8000724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002514:	ea42 0103 	orr.w	r1, r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	f003 0104 	and.w	r1, r3, #4
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	f003 0210 	and.w	r2, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002550:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b088      	sub	sp, #32
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	4613      	mov	r3, r2
 8002578:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800257a:	f7ff f853 	bl	8001624 <HAL_GetTick>
 800257e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d001      	beq.n	8002594 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002590:	2302      	movs	r3, #2
 8002592:	e12a      	b.n	80027ea <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_SPI_Transmit+0x36>
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e122      	b.n	80027ea <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_SPI_Transmit+0x48>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e11b      	b.n	80027ea <HAL_SPI_Transmit+0x280>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2203      	movs	r2, #3
 80025be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	88fa      	ldrh	r2, [r7, #6]
 80025d2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	88fa      	ldrh	r2, [r7, #6]
 80025d8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002600:	d10f      	bne.n	8002622 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002610:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002620:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800262c:	2b40      	cmp	r3, #64	@ 0x40
 800262e:	d007      	beq.n	8002640 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800263e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002648:	d152      	bne.n	80026f0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_SPI_Transmit+0xee>
 8002652:	8b7b      	ldrh	r3, [r7, #26]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d145      	bne.n	80026e4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265c:	881a      	ldrh	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002668:	1c9a      	adds	r2, r3, #2
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800267c:	e032      	b.n	80026e4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b02      	cmp	r3, #2
 800268a:	d112      	bne.n	80026b2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002690:	881a      	ldrh	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269c:	1c9a      	adds	r2, r3, #2
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	86da      	strh	r2, [r3, #54]	@ 0x36
 80026b0:	e018      	b.n	80026e4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026b2:	f7fe ffb7 	bl	8001624 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d803      	bhi.n	80026ca <HAL_SPI_Transmit+0x160>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d102      	bne.n	80026d0 <HAL_SPI_Transmit+0x166>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d109      	bne.n	80026e4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e082      	b.n	80027ea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1c7      	bne.n	800267e <HAL_SPI_Transmit+0x114>
 80026ee:	e053      	b.n	8002798 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <HAL_SPI_Transmit+0x194>
 80026f8:	8b7b      	ldrh	r3, [r7, #26]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d147      	bne.n	800278e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	330c      	adds	r3, #12
 8002708:	7812      	ldrb	r2, [r2, #0]
 800270a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002724:	e033      	b.n	800278e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	d113      	bne.n	800275c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	330c      	adds	r3, #12
 800273e:	7812      	ldrb	r2, [r2, #0]
 8002740:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	86da      	strh	r2, [r3, #54]	@ 0x36
 800275a:	e018      	b.n	800278e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800275c:	f7fe ff62 	bl	8001624 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d803      	bhi.n	8002774 <HAL_SPI_Transmit+0x20a>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002772:	d102      	bne.n	800277a <HAL_SPI_Transmit+0x210>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e02d      	b.n	80027ea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1c6      	bne.n	8002726 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002798:	69fa      	ldr	r2, [r7, #28]
 800279a:	6839      	ldr	r1, [r7, #0]
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 fa59 	bl	8002c54 <SPI_EndRxTxTransaction>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10a      	bne.n	80027cc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80027e8:	2300      	movs	r3, #0
  }
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3720      	adds	r7, #32
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b08a      	sub	sp, #40	@ 0x28
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002800:	2301      	movs	r3, #1
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002804:	f7fe ff0e 	bl	8001624 <HAL_GetTick>
 8002808:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002810:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002818:	887b      	ldrh	r3, [r7, #2]
 800281a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800281c:	7ffb      	ldrb	r3, [r7, #31]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d00c      	beq.n	800283c <HAL_SPI_TransmitReceive+0x4a>
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002828:	d106      	bne.n	8002838 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <HAL_SPI_TransmitReceive+0x46>
 8002832:	7ffb      	ldrb	r3, [r7, #31]
 8002834:	2b04      	cmp	r3, #4
 8002836:	d001      	beq.n	800283c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002838:	2302      	movs	r3, #2
 800283a:	e17f      	b.n	8002b3c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d005      	beq.n	800284e <HAL_SPI_TransmitReceive+0x5c>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <HAL_SPI_TransmitReceive+0x5c>
 8002848:	887b      	ldrh	r3, [r7, #2]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e174      	b.n	8002b3c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_SPI_TransmitReceive+0x6e>
 800285c:	2302      	movs	r3, #2
 800285e:	e16d      	b.n	8002b3c <HAL_SPI_TransmitReceive+0x34a>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b04      	cmp	r3, #4
 8002872:	d003      	beq.n	800287c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2205      	movs	r2, #5
 8002878:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	887a      	ldrh	r2, [r7, #2]
 8002892:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	887a      	ldrh	r2, [r7, #2]
 800289e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028bc:	2b40      	cmp	r3, #64	@ 0x40
 80028be:	d007      	beq.n	80028d0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028d8:	d17e      	bne.n	80029d8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <HAL_SPI_TransmitReceive+0xf6>
 80028e2:	8afb      	ldrh	r3, [r7, #22]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d16c      	bne.n	80029c2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ec:	881a      	ldrh	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f8:	1c9a      	adds	r2, r3, #2
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800290c:	e059      	b.n	80029c2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b02      	cmp	r3, #2
 800291a:	d11b      	bne.n	8002954 <HAL_SPI_TransmitReceive+0x162>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d016      	beq.n	8002954 <HAL_SPI_TransmitReceive+0x162>
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	2b01      	cmp	r3, #1
 800292a:	d113      	bne.n	8002954 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002930:	881a      	ldrh	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293c:	1c9a      	adds	r2, r3, #2
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b01      	cmp	r3, #1
 8002960:	d119      	bne.n	8002996 <HAL_SPI_TransmitReceive+0x1a4>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d014      	beq.n	8002996 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002976:	b292      	uxth	r2, r2
 8002978:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297e:	1c9a      	adds	r2, r3, #2
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002988:	b29b      	uxth	r3, r3
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002992:	2301      	movs	r3, #1
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002996:	f7fe fe45 	bl	8001624 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d80d      	bhi.n	80029c2 <HAL_SPI_TransmitReceive+0x1d0>
 80029a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d009      	beq.n	80029c2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e0bc      	b.n	8002b3c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1a0      	bne.n	800290e <HAL_SPI_TransmitReceive+0x11c>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d19b      	bne.n	800290e <HAL_SPI_TransmitReceive+0x11c>
 80029d6:	e082      	b.n	8002ade <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <HAL_SPI_TransmitReceive+0x1f4>
 80029e0:	8afb      	ldrh	r3, [r7, #22]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d171      	bne.n	8002aca <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	330c      	adds	r3, #12
 80029f0:	7812      	ldrb	r2, [r2, #0]
 80029f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a0c:	e05d      	b.n	8002aca <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d11c      	bne.n	8002a56 <HAL_SPI_TransmitReceive+0x264>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d017      	beq.n	8002a56 <HAL_SPI_TransmitReceive+0x264>
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d114      	bne.n	8002a56 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	330c      	adds	r3, #12
 8002a36:	7812      	ldrb	r2, [r2, #0]
 8002a38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d119      	bne.n	8002a98 <HAL_SPI_TransmitReceive+0x2a6>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d014      	beq.n	8002a98 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a94:	2301      	movs	r3, #1
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a98:	f7fe fdc4 	bl	8001624 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d803      	bhi.n	8002ab0 <HAL_SPI_TransmitReceive+0x2be>
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aae:	d102      	bne.n	8002ab6 <HAL_SPI_TransmitReceive+0x2c4>
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e038      	b.n	8002b3c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d19c      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x21c>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d197      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ade:	6a3a      	ldr	r2, [r7, #32]
 8002ae0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f8b6 	bl	8002c54 <SPI_EndRxTxTransaction>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d008      	beq.n	8002b00 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e01d      	b.n	8002b3c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
  }
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3728      	adds	r7, #40	@ 0x28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b54:	f7fe fd66 	bl	8001624 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	4413      	add	r3, r2
 8002b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b64:	f7fe fd5e 	bl	8001624 <HAL_GetTick>
 8002b68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b6a:	4b39      	ldr	r3, [pc, #228]	@ (8002c50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	015b      	lsls	r3, r3, #5
 8002b70:	0d1b      	lsrs	r3, r3, #20
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	fb02 f303 	mul.w	r3, r2, r3
 8002b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b7a:	e054      	b.n	8002c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b82:	d050      	beq.n	8002c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b84:	f7fe fd4e 	bl	8001624 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d902      	bls.n	8002b9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d13d      	bne.n	8002c16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ba8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bb2:	d111      	bne.n	8002bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bbc:	d004      	beq.n	8002bc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bc6:	d107      	bne.n	8002bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002be0:	d10f      	bne.n	8002c02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e017      	b.n	8002c46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	bf0c      	ite	eq
 8002c36:	2301      	moveq	r3, #1
 8002c38:	2300      	movne	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d19b      	bne.n	8002b7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000000 	.word	0x20000000

08002c54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2201      	movs	r2, #1
 8002c68:	2102      	movs	r1, #2
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f7ff ff6a 	bl	8002b44 <SPI_WaitFlagStateUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d007      	beq.n	8002c86 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7a:	f043 0220 	orr.w	r2, r3, #32
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e032      	b.n	8002cec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c86:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf4 <SPI_EndRxTxTransaction+0xa0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002cf8 <SPI_EndRxTxTransaction+0xa4>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	0d5b      	lsrs	r3, r3, #21
 8002c92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ca4:	d112      	bne.n	8002ccc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2200      	movs	r2, #0
 8002cae:	2180      	movs	r1, #128	@ 0x80
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f7ff ff47 	bl	8002b44 <SPI_WaitFlagStateUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d016      	beq.n	8002cea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e00f      	b.n	8002cec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce2:	2b80      	cmp	r3, #128	@ 0x80
 8002ce4:	d0f2      	beq.n	8002ccc <SPI_EndRxTxTransaction+0x78>
 8002ce6:	e000      	b.n	8002cea <SPI_EndRxTxTransaction+0x96>
        break;
 8002ce8:	bf00      	nop
  }

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	165e9f81 	.word	0x165e9f81

08002cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e041      	b.n	8002d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f839 	bl	8002d9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f000 fe2c 	bl	8003998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d001      	beq.n	8002dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e044      	b.n	8002e52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1e      	ldr	r2, [pc, #120]	@ (8002e60 <HAL_TIM_Base_Start_IT+0xb0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d018      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x6c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df2:	d013      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x6c>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a1a      	ldr	r2, [pc, #104]	@ (8002e64 <HAL_TIM_Base_Start_IT+0xb4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00e      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x6c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a19      	ldr	r2, [pc, #100]	@ (8002e68 <HAL_TIM_Base_Start_IT+0xb8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d009      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x6c>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a17      	ldr	r2, [pc, #92]	@ (8002e6c <HAL_TIM_Base_Start_IT+0xbc>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d004      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x6c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a16      	ldr	r2, [pc, #88]	@ (8002e70 <HAL_TIM_Base_Start_IT+0xc0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d111      	bne.n	8002e40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b06      	cmp	r3, #6
 8002e2c:	d010      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3e:	e007      	b.n	8002e50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40010000 	.word	0x40010000
 8002e64:	40000400 	.word	0x40000400
 8002e68:	40000800 	.word	0x40000800
 8002e6c:	40000c00 	.word	0x40000c00
 8002e70:	40014000 	.word	0x40014000

08002e74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e041      	b.n	8002f0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f839 	bl	8002f12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f000 fd70 	bl	8003998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <HAL_TIM_PWM_Start+0x24>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	bf14      	ite	ne
 8002f44:	2301      	movne	r3, #1
 8002f46:	2300      	moveq	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	e022      	b.n	8002f92 <HAL_TIM_PWM_Start+0x6a>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d109      	bne.n	8002f66 <HAL_TIM_PWM_Start+0x3e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	bf14      	ite	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	2300      	moveq	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	e015      	b.n	8002f92 <HAL_TIM_PWM_Start+0x6a>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d109      	bne.n	8002f80 <HAL_TIM_PWM_Start+0x58>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e008      	b.n	8002f92 <HAL_TIM_PWM_Start+0x6a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	bf14      	ite	ne
 8002f8c:	2301      	movne	r3, #1
 8002f8e:	2300      	moveq	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e068      	b.n	800306c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d104      	bne.n	8002faa <HAL_TIM_PWM_Start+0x82>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fa8:	e013      	b.n	8002fd2 <HAL_TIM_PWM_Start+0xaa>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d104      	bne.n	8002fba <HAL_TIM_PWM_Start+0x92>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fb8:	e00b      	b.n	8002fd2 <HAL_TIM_PWM_Start+0xaa>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d104      	bne.n	8002fca <HAL_TIM_PWM_Start+0xa2>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fc8:	e003      	b.n	8002fd2 <HAL_TIM_PWM_Start+0xaa>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	6839      	ldr	r1, [r7, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f001 f812 	bl	8004004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a23      	ldr	r2, [pc, #140]	@ (8003074 <HAL_TIM_PWM_Start+0x14c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d107      	bne.n	8002ffa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ff8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1d      	ldr	r2, [pc, #116]	@ (8003074 <HAL_TIM_PWM_Start+0x14c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d018      	beq.n	8003036 <HAL_TIM_PWM_Start+0x10e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800300c:	d013      	beq.n	8003036 <HAL_TIM_PWM_Start+0x10e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a19      	ldr	r2, [pc, #100]	@ (8003078 <HAL_TIM_PWM_Start+0x150>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00e      	beq.n	8003036 <HAL_TIM_PWM_Start+0x10e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a17      	ldr	r2, [pc, #92]	@ (800307c <HAL_TIM_PWM_Start+0x154>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d009      	beq.n	8003036 <HAL_TIM_PWM_Start+0x10e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a16      	ldr	r2, [pc, #88]	@ (8003080 <HAL_TIM_PWM_Start+0x158>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d004      	beq.n	8003036 <HAL_TIM_PWM_Start+0x10e>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a14      	ldr	r2, [pc, #80]	@ (8003084 <HAL_TIM_PWM_Start+0x15c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d111      	bne.n	800305a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b06      	cmp	r3, #6
 8003046:	d010      	beq.n	800306a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003058:	e007      	b.n	800306a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0201 	orr.w	r2, r2, #1
 8003068:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40010000 	.word	0x40010000
 8003078:	40000400 	.word	0x40000400
 800307c:	40000800 	.word	0x40000800
 8003080:	40000c00 	.word	0x40000c00
 8003084:	40014000 	.word	0x40014000

08003088 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2200      	movs	r2, #0
 8003098:	6839      	ldr	r1, [r7, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f000 ffb2 	bl	8004004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a29      	ldr	r2, [pc, #164]	@ (800314c <HAL_TIM_PWM_Stop+0xc4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d117      	bne.n	80030da <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6a1a      	ldr	r2, [r3, #32]
 80030b0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <HAL_TIM_PWM_Stop+0x52>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6a1a      	ldr	r2, [r3, #32]
 80030c0:	f240 4344 	movw	r3, #1092	@ 0x444
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d107      	bne.n	80030da <HAL_TIM_PWM_Stop+0x52>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6a1a      	ldr	r2, [r3, #32]
 80030e0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10f      	bne.n	800310a <HAL_TIM_PWM_Stop+0x82>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a1a      	ldr	r2, [r3, #32]
 80030f0:	f240 4344 	movw	r3, #1092	@ 0x444
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d107      	bne.n	800310a <HAL_TIM_PWM_Stop+0x82>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0201 	bic.w	r2, r2, #1
 8003108:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d104      	bne.n	800311a <HAL_TIM_PWM_Stop+0x92>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003118:	e013      	b.n	8003142 <HAL_TIM_PWM_Stop+0xba>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b04      	cmp	r3, #4
 800311e:	d104      	bne.n	800312a <HAL_TIM_PWM_Stop+0xa2>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003128:	e00b      	b.n	8003142 <HAL_TIM_PWM_Stop+0xba>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d104      	bne.n	800313a <HAL_TIM_PWM_Stop+0xb2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003138:	e003      	b.n	8003142 <HAL_TIM_PWM_Stop+0xba>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40010000 	.word	0x40010000

08003150 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e041      	b.n	80031e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f839 	bl	80031ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	4619      	mov	r1, r3
 800318e:	4610      	mov	r0, r2
 8003190:	f000 fc02 	bl	8003998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d104      	bne.n	8003222 <HAL_TIM_IC_Start_IT+0x1e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800321e:	b2db      	uxtb	r3, r3
 8003220:	e013      	b.n	800324a <HAL_TIM_IC_Start_IT+0x46>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b04      	cmp	r3, #4
 8003226:	d104      	bne.n	8003232 <HAL_TIM_IC_Start_IT+0x2e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800322e:	b2db      	uxtb	r3, r3
 8003230:	e00b      	b.n	800324a <HAL_TIM_IC_Start_IT+0x46>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b08      	cmp	r3, #8
 8003236:	d104      	bne.n	8003242 <HAL_TIM_IC_Start_IT+0x3e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800323e:	b2db      	uxtb	r3, r3
 8003240:	e003      	b.n	800324a <HAL_TIM_IC_Start_IT+0x46>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003248:	b2db      	uxtb	r3, r3
 800324a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <HAL_TIM_IC_Start_IT+0x58>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e013      	b.n	8003284 <HAL_TIM_IC_Start_IT+0x80>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b04      	cmp	r3, #4
 8003260:	d104      	bne.n	800326c <HAL_TIM_IC_Start_IT+0x68>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e00b      	b.n	8003284 <HAL_TIM_IC_Start_IT+0x80>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b08      	cmp	r3, #8
 8003270:	d104      	bne.n	800327c <HAL_TIM_IC_Start_IT+0x78>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e003      	b.n	8003284 <HAL_TIM_IC_Start_IT+0x80>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003282:	b2db      	uxtb	r3, r3
 8003284:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003286:	7bbb      	ldrb	r3, [r7, #14]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d102      	bne.n	8003292 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800328c:	7b7b      	ldrb	r3, [r7, #13]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d001      	beq.n	8003296 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e0c2      	b.n	800341c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d104      	bne.n	80032a6 <HAL_TIM_IC_Start_IT+0xa2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032a4:	e013      	b.n	80032ce <HAL_TIM_IC_Start_IT+0xca>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d104      	bne.n	80032b6 <HAL_TIM_IC_Start_IT+0xb2>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032b4:	e00b      	b.n	80032ce <HAL_TIM_IC_Start_IT+0xca>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d104      	bne.n	80032c6 <HAL_TIM_IC_Start_IT+0xc2>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032c4:	e003      	b.n	80032ce <HAL_TIM_IC_Start_IT+0xca>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2202      	movs	r2, #2
 80032ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d104      	bne.n	80032de <HAL_TIM_IC_Start_IT+0xda>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032dc:	e013      	b.n	8003306 <HAL_TIM_IC_Start_IT+0x102>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d104      	bne.n	80032ee <HAL_TIM_IC_Start_IT+0xea>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032ec:	e00b      	b.n	8003306 <HAL_TIM_IC_Start_IT+0x102>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d104      	bne.n	80032fe <HAL_TIM_IC_Start_IT+0xfa>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032fc:	e003      	b.n	8003306 <HAL_TIM_IC_Start_IT+0x102>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b0c      	cmp	r3, #12
 800330a:	d841      	bhi.n	8003390 <HAL_TIM_IC_Start_IT+0x18c>
 800330c:	a201      	add	r2, pc, #4	@ (adr r2, 8003314 <HAL_TIM_IC_Start_IT+0x110>)
 800330e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003312:	bf00      	nop
 8003314:	08003349 	.word	0x08003349
 8003318:	08003391 	.word	0x08003391
 800331c:	08003391 	.word	0x08003391
 8003320:	08003391 	.word	0x08003391
 8003324:	0800335b 	.word	0x0800335b
 8003328:	08003391 	.word	0x08003391
 800332c:	08003391 	.word	0x08003391
 8003330:	08003391 	.word	0x08003391
 8003334:	0800336d 	.word	0x0800336d
 8003338:	08003391 	.word	0x08003391
 800333c:	08003391 	.word	0x08003391
 8003340:	08003391 	.word	0x08003391
 8003344:	0800337f 	.word	0x0800337f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0202 	orr.w	r2, r2, #2
 8003356:	60da      	str	r2, [r3, #12]
      break;
 8003358:	e01d      	b.n	8003396 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0204 	orr.w	r2, r2, #4
 8003368:	60da      	str	r2, [r3, #12]
      break;
 800336a:	e014      	b.n	8003396 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0208 	orr.w	r2, r2, #8
 800337a:	60da      	str	r2, [r3, #12]
      break;
 800337c:	e00b      	b.n	8003396 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0210 	orr.w	r2, r2, #16
 800338c:	60da      	str	r2, [r3, #12]
      break;
 800338e:	e002      	b.n	8003396 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
      break;
 8003394:	bf00      	nop
  }

  if (status == HAL_OK)
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d13e      	bne.n	800341a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2201      	movs	r2, #1
 80033a2:	6839      	ldr	r1, [r7, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fe2d 	bl	8004004 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003424 <HAL_TIM_IC_Start_IT+0x220>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d018      	beq.n	80033e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033bc:	d013      	beq.n	80033e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a19      	ldr	r2, [pc, #100]	@ (8003428 <HAL_TIM_IC_Start_IT+0x224>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00e      	beq.n	80033e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a17      	ldr	r2, [pc, #92]	@ (800342c <HAL_TIM_IC_Start_IT+0x228>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d009      	beq.n	80033e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a16      	ldr	r2, [pc, #88]	@ (8003430 <HAL_TIM_IC_Start_IT+0x22c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d004      	beq.n	80033e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a14      	ldr	r2, [pc, #80]	@ (8003434 <HAL_TIM_IC_Start_IT+0x230>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d111      	bne.n	800340a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b06      	cmp	r3, #6
 80033f6:	d010      	beq.n	800341a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003408:	e007      	b.n	800341a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0201 	orr.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800341a:	7bfb      	ldrb	r3, [r7, #15]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40010000 	.word	0x40010000
 8003428:	40000400 	.word	0x40000400
 800342c:	40000800 	.word	0x40000800
 8003430:	40000c00 	.word	0x40000c00
 8003434:	40014000 	.word	0x40014000

08003438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d020      	beq.n	800349c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01b      	beq.n	800349c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0202 	mvn.w	r2, #2
 800346c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fd ff88 	bl	8001398 <HAL_TIM_IC_CaptureCallback>
 8003488:	e005      	b.n	8003496 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fa66 	bl	800395c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fa6d 	bl	8003970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d020      	beq.n	80034e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d01b      	beq.n	80034e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0204 	mvn.w	r2, #4
 80034b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd ff62 	bl	8001398 <HAL_TIM_IC_CaptureCallback>
 80034d4:	e005      	b.n	80034e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fa40 	bl	800395c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fa47 	bl	8003970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d020      	beq.n	8003534 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01b      	beq.n	8003534 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0208 	mvn.w	r2, #8
 8003504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2204      	movs	r2, #4
 800350a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd ff3c 	bl	8001398 <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fa1a 	bl	800395c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fa21 	bl	8003970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	2b00      	cmp	r3, #0
 800353c:	d020      	beq.n	8003580 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01b      	beq.n	8003580 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0210 	mvn.w	r2, #16
 8003550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2208      	movs	r2, #8
 8003556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fd ff16 	bl	8001398 <HAL_TIM_IC_CaptureCallback>
 800356c:	e005      	b.n	800357a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f9f4 	bl	800395c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f9fb 	bl	8003970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00c      	beq.n	80035a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d007      	beq.n	80035a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0201 	mvn.w	r2, #1
 800359c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fd f87c 	bl	800069c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00c      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d007      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fd4d 	bl	8004062 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00c      	beq.n	80035ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d007      	beq.n	80035ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f9cc 	bl	8003984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00c      	beq.n	8003610 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d007      	beq.n	8003610 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0220 	mvn.w	r2, #32
 8003608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fd1f 	bl	800404e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003610:	bf00      	nop
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003632:	2302      	movs	r3, #2
 8003634:	e088      	b.n	8003748 <HAL_TIM_IC_ConfigChannel+0x130>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d11b      	bne.n	800367c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003654:	f000 fbb8 	bl	8003dc8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 020c 	bic.w	r2, r2, #12
 8003666:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6999      	ldr	r1, [r3, #24]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	619a      	str	r2, [r3, #24]
 800367a:	e060      	b.n	800373e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b04      	cmp	r3, #4
 8003680:	d11c      	bne.n	80036bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003692:	f000 fc01 	bl	8003e98 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699a      	ldr	r2, [r3, #24]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80036a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6999      	ldr	r1, [r3, #24]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	021a      	lsls	r2, r3, #8
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	619a      	str	r2, [r3, #24]
 80036ba:	e040      	b.n	800373e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d11b      	bne.n	80036fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80036d2:	f000 fc1e 	bl	8003f12 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69da      	ldr	r2, [r3, #28]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 020c 	bic.w	r2, r2, #12
 80036e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69d9      	ldr	r1, [r3, #28]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	61da      	str	r2, [r3, #28]
 80036f8:	e021      	b.n	800373e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b0c      	cmp	r3, #12
 80036fe:	d11c      	bne.n	800373a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003710:	f000 fc3b 	bl	8003f8a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69da      	ldr	r2, [r3, #28]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003722:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69d9      	ldr	r1, [r3, #28]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	021a      	lsls	r2, r3, #8
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	61da      	str	r2, [r3, #28]
 8003738:	e001      	b.n	800373e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003746:	7dfb      	ldrb	r3, [r7, #23]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800376a:	2302      	movs	r3, #2
 800376c:	e0ae      	b.n	80038cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b0c      	cmp	r3, #12
 800377a:	f200 809f 	bhi.w	80038bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800377e:	a201      	add	r2, pc, #4	@ (adr r2, 8003784 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003784:	080037b9 	.word	0x080037b9
 8003788:	080038bd 	.word	0x080038bd
 800378c:	080038bd 	.word	0x080038bd
 8003790:	080038bd 	.word	0x080038bd
 8003794:	080037f9 	.word	0x080037f9
 8003798:	080038bd 	.word	0x080038bd
 800379c:	080038bd 	.word	0x080038bd
 80037a0:	080038bd 	.word	0x080038bd
 80037a4:	0800383b 	.word	0x0800383b
 80037a8:	080038bd 	.word	0x080038bd
 80037ac:	080038bd 	.word	0x080038bd
 80037b0:	080038bd 	.word	0x080038bd
 80037b4:	0800387b 	.word	0x0800387b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f976 	bl	8003ab0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0208 	orr.w	r2, r2, #8
 80037d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0204 	bic.w	r2, r2, #4
 80037e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6999      	ldr	r1, [r3, #24]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	619a      	str	r2, [r3, #24]
      break;
 80037f6:	e064      	b.n	80038c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f9bc 	bl	8003b7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6999      	ldr	r1, [r3, #24]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	021a      	lsls	r2, r3, #8
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	619a      	str	r2, [r3, #24]
      break;
 8003838:	e043      	b.n	80038c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	4618      	mov	r0, r3
 8003842:	f000 fa07 	bl	8003c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69da      	ldr	r2, [r3, #28]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0208 	orr.w	r2, r2, #8
 8003854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0204 	bic.w	r2, r2, #4
 8003864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69d9      	ldr	r1, [r3, #28]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	61da      	str	r2, [r3, #28]
      break;
 8003878:	e023      	b.n	80038c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fa51 	bl	8003d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69da      	ldr	r2, [r3, #28]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69d9      	ldr	r1, [r3, #28]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	021a      	lsls	r2, r3, #8
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	61da      	str	r2, [r3, #28]
      break;
 80038ba:	e002      	b.n	80038c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	75fb      	strb	r3, [r7, #23]
      break;
 80038c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b0c      	cmp	r3, #12
 80038e6:	d831      	bhi.n	800394c <HAL_TIM_ReadCapturedValue+0x78>
 80038e8:	a201      	add	r2, pc, #4	@ (adr r2, 80038f0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003925 	.word	0x08003925
 80038f4:	0800394d 	.word	0x0800394d
 80038f8:	0800394d 	.word	0x0800394d
 80038fc:	0800394d 	.word	0x0800394d
 8003900:	0800392f 	.word	0x0800392f
 8003904:	0800394d 	.word	0x0800394d
 8003908:	0800394d 	.word	0x0800394d
 800390c:	0800394d 	.word	0x0800394d
 8003910:	08003939 	.word	0x08003939
 8003914:	0800394d 	.word	0x0800394d
 8003918:	0800394d 	.word	0x0800394d
 800391c:	0800394d 	.word	0x0800394d
 8003920:	08003943 	.word	0x08003943
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800392a:	60fb      	str	r3, [r7, #12]

      break;
 800392c:	e00f      	b.n	800394e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003934:	60fb      	str	r3, [r7, #12]

      break;
 8003936:	e00a      	b.n	800394e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800393e:	60fb      	str	r3, [r7, #12]

      break;
 8003940:	e005      	b.n	800394e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	60fb      	str	r3, [r7, #12]

      break;
 800394a:	e000      	b.n	800394e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800394c:	bf00      	nop
  }

  return tmpreg;
 800394e:	68fb      	ldr	r3, [r7, #12]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a3a      	ldr	r2, [pc, #232]	@ (8003a94 <TIM_Base_SetConfig+0xfc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00f      	beq.n	80039d0 <TIM_Base_SetConfig+0x38>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039b6:	d00b      	beq.n	80039d0 <TIM_Base_SetConfig+0x38>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a37      	ldr	r2, [pc, #220]	@ (8003a98 <TIM_Base_SetConfig+0x100>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d007      	beq.n	80039d0 <TIM_Base_SetConfig+0x38>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a36      	ldr	r2, [pc, #216]	@ (8003a9c <TIM_Base_SetConfig+0x104>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d003      	beq.n	80039d0 <TIM_Base_SetConfig+0x38>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a35      	ldr	r2, [pc, #212]	@ (8003aa0 <TIM_Base_SetConfig+0x108>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d108      	bne.n	80039e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003a94 <TIM_Base_SetConfig+0xfc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d01b      	beq.n	8003a22 <TIM_Base_SetConfig+0x8a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039f0:	d017      	beq.n	8003a22 <TIM_Base_SetConfig+0x8a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a28      	ldr	r2, [pc, #160]	@ (8003a98 <TIM_Base_SetConfig+0x100>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d013      	beq.n	8003a22 <TIM_Base_SetConfig+0x8a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a27      	ldr	r2, [pc, #156]	@ (8003a9c <TIM_Base_SetConfig+0x104>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00f      	beq.n	8003a22 <TIM_Base_SetConfig+0x8a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a26      	ldr	r2, [pc, #152]	@ (8003aa0 <TIM_Base_SetConfig+0x108>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00b      	beq.n	8003a22 <TIM_Base_SetConfig+0x8a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a25      	ldr	r2, [pc, #148]	@ (8003aa4 <TIM_Base_SetConfig+0x10c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <TIM_Base_SetConfig+0x8a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a24      	ldr	r2, [pc, #144]	@ (8003aa8 <TIM_Base_SetConfig+0x110>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d003      	beq.n	8003a22 <TIM_Base_SetConfig+0x8a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a23      	ldr	r2, [pc, #140]	@ (8003aac <TIM_Base_SetConfig+0x114>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d108      	bne.n	8003a34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8003a94 <TIM_Base_SetConfig+0xfc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d103      	bne.n	8003a68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d105      	bne.n	8003a86 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f023 0201 	bic.w	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	611a      	str	r2, [r3, #16]
  }
}
 8003a86:	bf00      	nop
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40010000 	.word	0x40010000
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800
 8003aa0:	40000c00 	.word	0x40000c00
 8003aa4:	40014000 	.word	0x40014000
 8003aa8:	40014400 	.word	0x40014400
 8003aac:	40014800 	.word	0x40014800

08003ab0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f023 0201 	bic.w	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0303 	bic.w	r3, r3, #3
 8003ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f023 0302 	bic.w	r3, r3, #2
 8003af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a1c      	ldr	r2, [pc, #112]	@ (8003b78 <TIM_OC1_SetConfig+0xc8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d10c      	bne.n	8003b26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 0308 	bic.w	r3, r3, #8
 8003b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f023 0304 	bic.w	r3, r3, #4
 8003b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a13      	ldr	r2, [pc, #76]	@ (8003b78 <TIM_OC1_SetConfig+0xc8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d111      	bne.n	8003b52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	621a      	str	r2, [r3, #32]
}
 8003b6c:	bf00      	nop
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	40010000 	.word	0x40010000

08003b7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	f023 0210 	bic.w	r2, r3, #16
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f023 0320 	bic.w	r3, r3, #32
 8003bc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c50 <TIM_OC2_SetConfig+0xd4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d10d      	bne.n	8003bf8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bf6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a15      	ldr	r2, [pc, #84]	@ (8003c50 <TIM_OC2_SetConfig+0xd4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d113      	bne.n	8003c28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	621a      	str	r2, [r3, #32]
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40010000 	.word	0x40010000

08003c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0303 	bic.w	r3, r3, #3
 8003c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a1d      	ldr	r2, [pc, #116]	@ (8003d24 <TIM_OC3_SetConfig+0xd0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d10d      	bne.n	8003cce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a14      	ldr	r2, [pc, #80]	@ (8003d24 <TIM_OC3_SetConfig+0xd0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d113      	bne.n	8003cfe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	621a      	str	r2, [r3, #32]
}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	40010000 	.word	0x40010000

08003d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	031b      	lsls	r3, r3, #12
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a10      	ldr	r2, [pc, #64]	@ (8003dc4 <TIM_OC4_SetConfig+0x9c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d109      	bne.n	8003d9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	019b      	lsls	r3, r3, #6
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	621a      	str	r2, [r3, #32]
}
 8003db6:	bf00      	nop
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40010000 	.word	0x40010000

08003dc8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	f023 0201 	bic.w	r2, r3, #1
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4a24      	ldr	r2, [pc, #144]	@ (8003e84 <TIM_TI1_SetConfig+0xbc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <TIM_TI1_SetConfig+0x56>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dfc:	d00f      	beq.n	8003e1e <TIM_TI1_SetConfig+0x56>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4a21      	ldr	r2, [pc, #132]	@ (8003e88 <TIM_TI1_SetConfig+0xc0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00b      	beq.n	8003e1e <TIM_TI1_SetConfig+0x56>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4a20      	ldr	r2, [pc, #128]	@ (8003e8c <TIM_TI1_SetConfig+0xc4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d007      	beq.n	8003e1e <TIM_TI1_SetConfig+0x56>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a1f      	ldr	r2, [pc, #124]	@ (8003e90 <TIM_TI1_SetConfig+0xc8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d003      	beq.n	8003e1e <TIM_TI1_SetConfig+0x56>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4a1e      	ldr	r2, [pc, #120]	@ (8003e94 <TIM_TI1_SetConfig+0xcc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d101      	bne.n	8003e22 <TIM_TI1_SetConfig+0x5a>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <TIM_TI1_SetConfig+0x5c>
 8003e22:	2300      	movs	r3, #0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f023 0303 	bic.w	r3, r3, #3
 8003e2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e003      	b.n	8003e42 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f023 030a 	bic.w	r3, r3, #10
 8003e5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f003 030a 	and.w	r3, r3, #10
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	621a      	str	r2, [r3, #32]
}
 8003e76:	bf00      	nop
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800
 8003e90:	40000c00 	.word	0x40000c00
 8003e94:	40014000 	.word	0x40014000

08003e98 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f023 0210 	bic.w	r2, r3, #16
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ec4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	031b      	lsls	r3, r3, #12
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003eea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	621a      	str	r2, [r3, #32]
}
 8003f06:	bf00      	nop
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b087      	sub	sp, #28
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
 8003f1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f023 0303 	bic.w	r3, r3, #3
 8003f3e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f4e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003f62:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	621a      	str	r2, [r3, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b087      	sub	sp, #28
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fb6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fc8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	031b      	lsls	r3, r3, #12
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	031b      	lsls	r3, r3, #12
 8003fe2:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	621a      	str	r2, [r3, #32]
}
 8003ff8:	bf00      	nop
 8003ffa:	371c      	adds	r7, #28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 031f 	and.w	r3, r3, #31
 8004016:	2201      	movs	r2, #1
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a1a      	ldr	r2, [r3, #32]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	43db      	mvns	r3, r3
 8004026:	401a      	ands	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a1a      	ldr	r2, [r3, #32]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	fa01 f303 	lsl.w	r3, r1, r3
 800403c:	431a      	orrs	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	621a      	str	r2, [r3, #32]
}
 8004042:	bf00      	nop
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
	...

08004078 <__NVIC_SetPriority>:
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	6039      	str	r1, [r7, #0]
 8004082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004088:	2b00      	cmp	r3, #0
 800408a:	db0a      	blt.n	80040a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	b2da      	uxtb	r2, r3
 8004090:	490c      	ldr	r1, [pc, #48]	@ (80040c4 <__NVIC_SetPriority+0x4c>)
 8004092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004096:	0112      	lsls	r2, r2, #4
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	440b      	add	r3, r1
 800409c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80040a0:	e00a      	b.n	80040b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	4908      	ldr	r1, [pc, #32]	@ (80040c8 <__NVIC_SetPriority+0x50>)
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	3b04      	subs	r3, #4
 80040b0:	0112      	lsls	r2, r2, #4
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	440b      	add	r3, r1
 80040b6:	761a      	strb	r2, [r3, #24]
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	e000e100 	.word	0xe000e100
 80040c8:	e000ed00 	.word	0xe000ed00

080040cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80040d0:	4b05      	ldr	r3, [pc, #20]	@ (80040e8 <SysTick_Handler+0x1c>)
 80040d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80040d4:	f001 ff5c 	bl	8005f90 <xTaskGetSchedulerState>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d001      	beq.n	80040e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80040de:	f002 fcf3 	bl	8006ac8 <xPortSysTickHandler>
  }
}
 80040e2:	bf00      	nop
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	e000e010 	.word	0xe000e010

080040ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80040f0:	2100      	movs	r1, #0
 80040f2:	f06f 0004 	mvn.w	r0, #4
 80040f6:	f7ff ffbf 	bl	8004078 <__NVIC_SetPriority>
#endif
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004106:	f3ef 8305 	mrs	r3, IPSR
 800410a:	603b      	str	r3, [r7, #0]
  return(result);
 800410c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004112:	f06f 0305 	mvn.w	r3, #5
 8004116:	607b      	str	r3, [r7, #4]
 8004118:	e00c      	b.n	8004134 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800411a:	4b0a      	ldr	r3, [pc, #40]	@ (8004144 <osKernelInitialize+0x44>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d105      	bne.n	800412e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004122:	4b08      	ldr	r3, [pc, #32]	@ (8004144 <osKernelInitialize+0x44>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004128:	2300      	movs	r3, #0
 800412a:	607b      	str	r3, [r7, #4]
 800412c:	e002      	b.n	8004134 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800412e:	f04f 33ff 	mov.w	r3, #4294967295
 8004132:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004134:	687b      	ldr	r3, [r7, #4]
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000318 	.word	0x20000318

08004148 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800414e:	f3ef 8305 	mrs	r3, IPSR
 8004152:	603b      	str	r3, [r7, #0]
  return(result);
 8004154:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <osKernelStart+0x1a>
    stat = osErrorISR;
 800415a:	f06f 0305 	mvn.w	r3, #5
 800415e:	607b      	str	r3, [r7, #4]
 8004160:	e010      	b.n	8004184 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004162:	4b0b      	ldr	r3, [pc, #44]	@ (8004190 <osKernelStart+0x48>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d109      	bne.n	800417e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800416a:	f7ff ffbf 	bl	80040ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800416e:	4b08      	ldr	r3, [pc, #32]	@ (8004190 <osKernelStart+0x48>)
 8004170:	2202      	movs	r2, #2
 8004172:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004174:	f001 fb36 	bl	80057e4 <vTaskStartScheduler>
      stat = osOK;
 8004178:	2300      	movs	r3, #0
 800417a:	607b      	str	r3, [r7, #4]
 800417c:	e002      	b.n	8004184 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800417e:	f04f 33ff 	mov.w	r3, #4294967295
 8004182:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004184:	687b      	ldr	r3, [r7, #4]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000318 	.word	0x20000318

08004194 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004194:	b580      	push	{r7, lr}
 8004196:	b08e      	sub	sp, #56	@ 0x38
 8004198:	af04      	add	r7, sp, #16
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041a0:	2300      	movs	r3, #0
 80041a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041a4:	f3ef 8305 	mrs	r3, IPSR
 80041a8:	617b      	str	r3, [r7, #20]
  return(result);
 80041aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d17e      	bne.n	80042ae <osThreadNew+0x11a>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d07b      	beq.n	80042ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80041b6:	2380      	movs	r3, #128	@ 0x80
 80041b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80041ba:	2318      	movs	r3, #24
 80041bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80041c2:	f04f 33ff 	mov.w	r3, #4294967295
 80041c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d045      	beq.n	800425a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <osThreadNew+0x48>
        name = attr->name;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <osThreadNew+0x6e>
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	2b38      	cmp	r3, #56	@ 0x38
 80041f4:	d805      	bhi.n	8004202 <osThreadNew+0x6e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <osThreadNew+0x72>
        return (NULL);
 8004202:	2300      	movs	r3, #0
 8004204:	e054      	b.n	80042b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00e      	beq.n	800423c <osThreadNew+0xa8>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	2ba7      	cmp	r3, #167	@ 0xa7
 8004224:	d90a      	bls.n	800423c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800422a:	2b00      	cmp	r3, #0
 800422c:	d006      	beq.n	800423c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <osThreadNew+0xa8>
        mem = 1;
 8004236:	2301      	movs	r3, #1
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	e010      	b.n	800425e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10c      	bne.n	800425e <osThreadNew+0xca>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d108      	bne.n	800425e <osThreadNew+0xca>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d104      	bne.n	800425e <osThreadNew+0xca>
          mem = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	61bb      	str	r3, [r7, #24]
 8004258:	e001      	b.n	800425e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d110      	bne.n	8004286 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800426c:	9202      	str	r2, [sp, #8]
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	6a3a      	ldr	r2, [r7, #32]
 8004278:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f001 f912 	bl	80054a4 <xTaskCreateStatic>
 8004280:	4603      	mov	r3, r0
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	e013      	b.n	80042ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d110      	bne.n	80042ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	b29a      	uxth	r2, r3
 8004290:	f107 0310 	add.w	r3, r7, #16
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f001 f930 	bl	8005504 <xTaskCreate>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d001      	beq.n	80042ae <osThreadNew+0x11a>
            hTask = NULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042ae:	693b      	ldr	r3, [r7, #16]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3728      	adds	r7, #40	@ 0x28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042c0:	f3ef 8305 	mrs	r3, IPSR
 80042c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80042c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <osDelay+0x1c>
    stat = osErrorISR;
 80042cc:	f06f 0305 	mvn.w	r3, #5
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	e007      	b.n	80042e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f001 fa5c 	bl	800579c <vTaskDelay>
    }
  }

  return (stat);
 80042e4:	68fb      	ldr	r3, [r7, #12]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b088      	sub	sp, #32
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042fa:	f3ef 8305 	mrs	r3, IPSR
 80042fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004300:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004302:	2b00      	cmp	r3, #0
 8004304:	d174      	bne.n	80043f0 <osMutexNew+0x102>
    if (attr != NULL) {
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <osMutexNew+0x26>
      type = attr->attr_bits;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	e001      	b.n	8004318 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <osMutexNew+0x3a>
      rmtx = 1U;
 8004322:	2301      	movs	r3, #1
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	e001      	b.n	800432c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d15c      	bne.n	80043f0 <osMutexNew+0x102>
      mem = -1;
 8004336:	f04f 33ff 	mov.w	r3, #4294967295
 800433a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d015      	beq.n	800436e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d006      	beq.n	8004358 <osMutexNew+0x6a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	2b4f      	cmp	r3, #79	@ 0x4f
 8004350:	d902      	bls.n	8004358 <osMutexNew+0x6a>
          mem = 1;
 8004352:	2301      	movs	r3, #1
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	e00c      	b.n	8004372 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d108      	bne.n	8004372 <osMutexNew+0x84>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d104      	bne.n	8004372 <osMutexNew+0x84>
            mem = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	613b      	str	r3, [r7, #16]
 800436c:	e001      	b.n	8004372 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800436e:	2300      	movs	r3, #0
 8004370:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d112      	bne.n	800439e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	4619      	mov	r1, r3
 8004384:	2004      	movs	r0, #4
 8004386:	f000 fbd3 	bl	8004b30 <xQueueCreateMutexStatic>
 800438a:	61f8      	str	r0, [r7, #28]
 800438c:	e016      	b.n	80043bc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	4619      	mov	r1, r3
 8004394:	2001      	movs	r0, #1
 8004396:	f000 fbcb 	bl	8004b30 <xQueueCreateMutexStatic>
 800439a:	61f8      	str	r0, [r7, #28]
 800439c:	e00e      	b.n	80043bc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10b      	bne.n	80043bc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d004      	beq.n	80043b4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80043aa:	2004      	movs	r0, #4
 80043ac:	f000 fba8 	bl	8004b00 <xQueueCreateMutex>
 80043b0:	61f8      	str	r0, [r7, #28]
 80043b2:	e003      	b.n	80043bc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80043b4:	2001      	movs	r0, #1
 80043b6:	f000 fba3 	bl	8004b00 <xQueueCreateMutex>
 80043ba:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00c      	beq.n	80043dc <osMutexNew+0xee>
        if (attr != NULL) {
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <osMutexNew+0xe2>
          name = attr->name;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	e001      	b.n	80043d4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80043d4:	68f9      	ldr	r1, [r7, #12]
 80043d6:	69f8      	ldr	r0, [r7, #28]
 80043d8:	f001 f806 	bl	80053e8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d006      	beq.n	80043f0 <osMutexNew+0x102>
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80043f0:	69fb      	ldr	r3, [r7, #28]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b086      	sub	sp, #24
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004418:	f3ef 8305 	mrs	r3, IPSR
 800441c:	60bb      	str	r3, [r7, #8]
  return(result);
 800441e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004424:	f06f 0305 	mvn.w	r3, #5
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	e02c      	b.n	8004486 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d103      	bne.n	800443a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004432:	f06f 0303 	mvn.w	r3, #3
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	e025      	b.n	8004486 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d011      	beq.n	8004464 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004440:	6839      	ldr	r1, [r7, #0]
 8004442:	6938      	ldr	r0, [r7, #16]
 8004444:	f000 fbb5 	bl	8004bb2 <xQueueTakeMutexRecursive>
 8004448:	4603      	mov	r3, r0
 800444a:	2b01      	cmp	r3, #1
 800444c:	d01b      	beq.n	8004486 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004454:	f06f 0301 	mvn.w	r3, #1
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	e014      	b.n	8004486 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800445c:	f06f 0302 	mvn.w	r3, #2
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	e010      	b.n	8004486 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004464:	6839      	ldr	r1, [r7, #0]
 8004466:	6938      	ldr	r0, [r7, #16]
 8004468:	f000 fd76 	bl	8004f58 <xQueueSemaphoreTake>
 800446c:	4603      	mov	r3, r0
 800446e:	2b01      	cmp	r3, #1
 8004470:	d009      	beq.n	8004486 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004478:	f06f 0301 	mvn.w	r3, #1
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	e002      	b.n	8004486 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004480:	f06f 0302 	mvn.w	r3, #2
 8004484:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004486:	697b      	ldr	r3, [r7, #20]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044ac:	f3ef 8305 	mrs	r3, IPSR
 80044b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80044b2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <osMutexRelease+0x30>
    stat = osErrorISR;
 80044b8:	f06f 0305 	mvn.w	r3, #5
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	e01f      	b.n	8004500 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d103      	bne.n	80044ce <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80044c6:	f06f 0303 	mvn.w	r3, #3
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	e018      	b.n	8004500 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d009      	beq.n	80044e8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80044d4:	6938      	ldr	r0, [r7, #16]
 80044d6:	f000 fb46 	bl	8004b66 <xQueueGiveMutexRecursive>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d00f      	beq.n	8004500 <osMutexRelease+0x70>
        stat = osErrorResource;
 80044e0:	f06f 0302 	mvn.w	r3, #2
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	e00b      	b.n	8004500 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80044e8:	2300      	movs	r3, #0
 80044ea:	2200      	movs	r2, #0
 80044ec:	2100      	movs	r1, #0
 80044ee:	6938      	ldr	r0, [r7, #16]
 80044f0:	f000 fb88 	bl	8004c04 <xQueueGenericSend>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d002      	beq.n	8004500 <osMutexRelease+0x70>
        stat = osErrorResource;
 80044fa:	f06f 0302 	mvn.w	r3, #2
 80044fe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004500:	697b      	ldr	r3, [r7, #20]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800450a:	b580      	push	{r7, lr}
 800450c:	b08a      	sub	sp, #40	@ 0x28
 800450e:	af02      	add	r7, sp, #8
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800451a:	f3ef 8305 	mrs	r3, IPSR
 800451e:	613b      	str	r3, [r7, #16]
  return(result);
 8004520:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004522:	2b00      	cmp	r3, #0
 8004524:	d15f      	bne.n	80045e6 <osMessageQueueNew+0xdc>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d05c      	beq.n	80045e6 <osMessageQueueNew+0xdc>
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d059      	beq.n	80045e6 <osMessageQueueNew+0xdc>
    mem = -1;
 8004532:	f04f 33ff 	mov.w	r3, #4294967295
 8004536:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d029      	beq.n	8004592 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d012      	beq.n	800456c <osMessageQueueNew+0x62>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b4f      	cmp	r3, #79	@ 0x4f
 800454c:	d90e      	bls.n	800456c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695a      	ldr	r2, [r3, #20]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	fb01 f303 	mul.w	r3, r1, r3
 8004562:	429a      	cmp	r2, r3
 8004564:	d302      	bcc.n	800456c <osMessageQueueNew+0x62>
        mem = 1;
 8004566:	2301      	movs	r3, #1
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	e014      	b.n	8004596 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d110      	bne.n	8004596 <osMessageQueueNew+0x8c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10c      	bne.n	8004596 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004580:	2b00      	cmp	r3, #0
 8004582:	d108      	bne.n	8004596 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d104      	bne.n	8004596 <osMessageQueueNew+0x8c>
          mem = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	61bb      	str	r3, [r7, #24]
 8004590:	e001      	b.n	8004596 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d10b      	bne.n	80045b4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2100      	movs	r1, #0
 80045a6:	9100      	str	r1, [sp, #0]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 fa20 	bl	80049f0 <xQueueGenericCreateStatic>
 80045b0:	61f8      	str	r0, [r7, #28]
 80045b2:	e008      	b.n	80045c6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d105      	bne.n	80045c6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80045ba:	2200      	movs	r2, #0
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 fa35 	bl	8004a2e <xQueueGenericCreate>
 80045c4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00c      	beq.n	80045e6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <osMessageQueueNew+0xd0>
        name = attr->name;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	e001      	b.n	80045de <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80045de:	6979      	ldr	r1, [r7, #20]
 80045e0:	69f8      	ldr	r0, [r7, #28]
 80045e2:	f000 ff01 	bl	80053e8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80045e6:	69fb      	ldr	r3, [r7, #28]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3720      	adds	r7, #32
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004604:	2300      	movs	r3, #0
 8004606:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004608:	f3ef 8305 	mrs	r3, IPSR
 800460c:	617b      	str	r3, [r7, #20]
  return(result);
 800460e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004610:	2b00      	cmp	r3, #0
 8004612:	d028      	beq.n	8004666 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <osMessageQueuePut+0x36>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <osMessageQueuePut+0x36>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004626:	f06f 0303 	mvn.w	r3, #3
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	e038      	b.n	80046a0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800462e:	2300      	movs	r3, #0
 8004630:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004632:	f107 0210 	add.w	r2, r7, #16
 8004636:	2300      	movs	r3, #0
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	69b8      	ldr	r0, [r7, #24]
 800463c:	f000 fb8c 	bl	8004d58 <xQueueGenericSendFromISR>
 8004640:	4603      	mov	r3, r0
 8004642:	2b01      	cmp	r3, #1
 8004644:	d003      	beq.n	800464e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004646:	f06f 0302 	mvn.w	r3, #2
 800464a:	61fb      	str	r3, [r7, #28]
 800464c:	e028      	b.n	80046a0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d025      	beq.n	80046a0 <osMessageQueuePut+0xb0>
 8004654:	4b15      	ldr	r3, [pc, #84]	@ (80046ac <osMessageQueuePut+0xbc>)
 8004656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	e01c      	b.n	80046a0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <osMessageQueuePut+0x82>
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d103      	bne.n	800467a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004672:	f06f 0303 	mvn.w	r3, #3
 8004676:	61fb      	str	r3, [r7, #28]
 8004678:	e012      	b.n	80046a0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800467a:	2300      	movs	r3, #0
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	69b8      	ldr	r0, [r7, #24]
 8004682:	f000 fabf 	bl	8004c04 <xQueueGenericSend>
 8004686:	4603      	mov	r3, r0
 8004688:	2b01      	cmp	r3, #1
 800468a:	d009      	beq.n	80046a0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004692:	f06f 0301 	mvn.w	r3, #1
 8004696:	61fb      	str	r3, [r7, #28]
 8004698:	e002      	b.n	80046a0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800469a:	f06f 0302 	mvn.w	r3, #2
 800469e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80046a0:	69fb      	ldr	r3, [r7, #28]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3720      	adds	r7, #32
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	e000ed04 	.word	0xe000ed04

080046b0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046c6:	f3ef 8305 	mrs	r3, IPSR
 80046ca:	617b      	str	r3, [r7, #20]
  return(result);
 80046cc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d028      	beq.n	8004724 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <osMessageQueueGet+0x34>
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <osMessageQueueGet+0x34>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80046e4:	f06f 0303 	mvn.w	r3, #3
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	e037      	b.n	800475c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80046f0:	f107 0310 	add.w	r3, r7, #16
 80046f4:	461a      	mov	r2, r3
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	69b8      	ldr	r0, [r7, #24]
 80046fa:	f000 fcf5 	bl	80050e8 <xQueueReceiveFromISR>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b01      	cmp	r3, #1
 8004702:	d003      	beq.n	800470c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004704:	f06f 0302 	mvn.w	r3, #2
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	e027      	b.n	800475c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d024      	beq.n	800475c <osMessageQueueGet+0xac>
 8004712:	4b15      	ldr	r3, [pc, #84]	@ (8004768 <osMessageQueueGet+0xb8>)
 8004714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	e01b      	b.n	800475c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <osMessageQueueGet+0x80>
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d103      	bne.n	8004738 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004730:	f06f 0303 	mvn.w	r3, #3
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	e011      	b.n	800475c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	69b8      	ldr	r0, [r7, #24]
 800473e:	f000 fb69 	bl	8004e14 <xQueueReceive>
 8004742:	4603      	mov	r3, r0
 8004744:	2b01      	cmp	r3, #1
 8004746:	d009      	beq.n	800475c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800474e:	f06f 0301 	mvn.w	r3, #1
 8004752:	61fb      	str	r3, [r7, #28]
 8004754:	e002      	b.n	800475c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004756:	f06f 0302 	mvn.w	r3, #2
 800475a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800475c:	69fb      	ldr	r3, [r7, #28]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3720      	adds	r7, #32
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4a07      	ldr	r2, [pc, #28]	@ (8004798 <vApplicationGetIdleTaskMemory+0x2c>)
 800477c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4a06      	ldr	r2, [pc, #24]	@ (800479c <vApplicationGetIdleTaskMemory+0x30>)
 8004782:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2280      	movs	r2, #128	@ 0x80
 8004788:	601a      	str	r2, [r3, #0]
}
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	2000031c 	.word	0x2000031c
 800479c:	200003c4 	.word	0x200003c4

080047a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4a07      	ldr	r2, [pc, #28]	@ (80047cc <vApplicationGetTimerTaskMemory+0x2c>)
 80047b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	4a06      	ldr	r2, [pc, #24]	@ (80047d0 <vApplicationGetTimerTaskMemory+0x30>)
 80047b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047be:	601a      	str	r2, [r3, #0]
}
 80047c0:	bf00      	nop
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	200005c4 	.word	0x200005c4
 80047d0:	2000066c 	.word	0x2000066c

080047d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f103 0208 	add.w	r2, r3, #8
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f04f 32ff 	mov.w	r2, #4294967295
 80047ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f103 0208 	add.w	r2, r3, #8
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f103 0208 	add.w	r2, r3, #8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800482e:	b480      	push	{r7}
 8004830:	b085      	sub	sp, #20
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	601a      	str	r2, [r3, #0]
}
 800486a:	bf00      	nop
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004876:	b480      	push	{r7}
 8004878:	b085      	sub	sp, #20
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488c:	d103      	bne.n	8004896 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	e00c      	b.n	80048b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3308      	adds	r3, #8
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	e002      	b.n	80048a4 <vListInsert+0x2e>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d2f6      	bcs.n	800489e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	601a      	str	r2, [r3, #0]
}
 80048dc:	bf00      	nop
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6892      	ldr	r2, [r2, #8]
 80048fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6852      	ldr	r2, [r2, #4]
 8004908:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	429a      	cmp	r2, r3
 8004912:	d103      	bne.n	800491c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	1e5a      	subs	r2, r3, #1
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 800494a:	f002 f853 	bl	80069f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004956:	68f9      	ldr	r1, [r7, #12]
 8004958:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800495a:	fb01 f303 	mul.w	r3, r1, r3
 800495e:	441a      	add	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497a:	3b01      	subs	r3, #1
 800497c:	68f9      	ldr	r1, [r7, #12]
 800497e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	441a      	add	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	22ff      	movs	r2, #255	@ 0xff
 800498e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	22ff      	movs	r2, #255	@ 0xff
 8004996:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d114      	bne.n	80049ca <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01a      	beq.n	80049de <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3310      	adds	r3, #16
 80049ac:	4618      	mov	r0, r3
 80049ae:	f001 f957 	bl	8005c60 <xTaskRemoveFromEventList>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d012      	beq.n	80049de <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049b8:	4b0c      	ldr	r3, [pc, #48]	@ (80049ec <xQueueGenericReset+0xb0>)
 80049ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	e009      	b.n	80049de <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3310      	adds	r3, #16
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff ff00 	bl	80047d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3324      	adds	r3, #36	@ 0x24
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff fefb 	bl	80047d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049de:	f002 f823 	bl	8006a28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049e2:	2301      	movs	r3, #1
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	e000ed04 	.word	0xe000ed04

080049f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00d      	beq.n	8004a24 <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a10:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	68b9      	ldr	r1, [r7, #8]
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f831 	bl	8004a86 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a24:	697b      	ldr	r3, [r7, #20]
	}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b08a      	sub	sp, #40	@ 0x28
 8004a32:	af02      	add	r7, sp, #8
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	71fb      	strb	r3, [r7, #7]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	fb02 f303 	mul.w	r3, r2, r3
 8004a44:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3350      	adds	r3, #80	@ 0x50
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f002 f88c 	bl	8006b68 <pvPortMalloc>
 8004a50:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d011      	beq.n	8004a7c <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	3350      	adds	r3, #80	@ 0x50
 8004a60:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a6a:	79fa      	ldrb	r2, [r7, #7]
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	4613      	mov	r3, r2
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 f805 	bl	8004a86 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a7c:	69bb      	ldr	r3, [r7, #24]
	}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3720      	adds	r7, #32
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b084      	sub	sp, #16
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d103      	bne.n	8004aa2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	e002      	b.n	8004aa8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	69b8      	ldr	r0, [r7, #24]
 8004ab8:	f7ff ff40 	bl	800493c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ac4:	bf00      	nop
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00e      	beq.n	8004af8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004aec:	2300      	movs	r3, #0
 8004aee:	2200      	movs	r2, #0
 8004af0:	2100      	movs	r1, #0
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f886 	bl	8004c04 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004af8:	bf00      	nop
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	461a      	mov	r2, r3
 8004b16:	6939      	ldr	r1, [r7, #16]
 8004b18:	6978      	ldr	r0, [r7, #20]
 8004b1a:	f7ff ff88 	bl	8004a2e <xQueueGenericCreate>
 8004b1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7ff ffd3 	bl	8004acc <prvInitialiseMutex>

		return xNewQueue;
 8004b26:	68fb      	ldr	r3, [r7, #12]
	}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	4603      	mov	r3, r0
 8004b38:	6039      	str	r1, [r7, #0]
 8004b3a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	2300      	movs	r3, #0
 8004b42:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	6939      	ldr	r1, [r7, #16]
 8004b4e:	6978      	ldr	r0, [r7, #20]
 8004b50:	f7ff ff4e 	bl	80049f0 <xQueueGenericCreateStatic>
 8004b54:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f7ff ffb8 	bl	8004acc <prvInitialiseMutex>

		return xNewQueue;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
	}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004b66:	b590      	push	{r4, r7, lr}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	60bb      	str	r3, [r7, #8]
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	689c      	ldr	r4, [r3, #8]
 8004b76:	f001 f9fb 	bl	8005f70 <xTaskGetCurrentTaskHandle>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	429c      	cmp	r4, r3
 8004b7e:	d111      	bne.n	8004ba4 <xQueueGiveMutexRecursive+0x3e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	1e5a      	subs	r2, r3, #1
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d105      	bne.n	8004b9e <xQueueGiveMutexRecursive+0x38>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004b92:	2300      	movs	r3, #0
 8004b94:	2200      	movs	r2, #0
 8004b96:	2100      	movs	r1, #0
 8004b98:	68b8      	ldr	r0, [r7, #8]
 8004b9a:	f000 f833 	bl	8004c04 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e001      	b.n	8004ba8 <xQueueGiveMutexRecursive+0x42>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
	}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd90      	pop	{r4, r7, pc}

08004bb2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004bb2:	b590      	push	{r4, r7, lr}
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	60bb      	str	r3, [r7, #8]
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	689c      	ldr	r4, [r3, #8]
 8004bc4:	f001 f9d4 	bl	8005f70 <xTaskGetCurrentTaskHandle>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	429c      	cmp	r4, r3
 8004bcc:	d107      	bne.n	8004bde <xQueueTakeMutexRecursive+0x2c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	e00c      	b.n	8004bf8 <xQueueTakeMutexRecursive+0x46>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004bde:	6839      	ldr	r1, [r7, #0]
 8004be0:	68b8      	ldr	r0, [r7, #8]
 8004be2:	f000 f9b9 	bl	8004f58 <xQueueSemaphoreTake>
 8004be6:	60f8      	str	r0, [r7, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d004      	beq.n	8004bf8 <xQueueTakeMutexRecursive+0x46>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
	}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd90      	pop	{r4, r7, pc}
	...

08004c04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08a      	sub	sp, #40	@ 0x28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c12:	2300      	movs	r3, #0
 8004c14:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c1a:	f001 feeb 	bl	80069f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d302      	bcc.n	8004c30 <xQueueGenericSend+0x2c>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d129      	bne.n	8004c84 <xQueueGenericSend+0x80>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	6a38      	ldr	r0, [r7, #32]
 8004c36:	f000 fac6 	bl	80051c6 <prvCopyDataToQueue>
 8004c3a:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d010      	beq.n	8004c66 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	3324      	adds	r3, #36	@ 0x24
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f001 f809 	bl	8005c60 <xTaskRemoveFromEventList>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d013      	beq.n	8004c7c <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c54:	4b3f      	ldr	r3, [pc, #252]	@ (8004d54 <xQueueGenericSend+0x150>)
 8004c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	e00a      	b.n	8004c7c <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d007      	beq.n	8004c7c <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c6c:	4b39      	ldr	r3, [pc, #228]	@ (8004d54 <xQueueGenericSend+0x150>)
 8004c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c7c:	f001 fed4 	bl	8006a28 <vPortExitCritical>
				return pdPASS;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e063      	b.n	8004d4c <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d103      	bne.n	8004c92 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c8a:	f001 fecd 	bl	8006a28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	e05c      	b.n	8004d4c <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d106      	bne.n	8004ca6 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c98:	f107 0314 	add.w	r3, r7, #20
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f001 f835 	bl	8005d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ca6:	f001 febf 	bl	8006a28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004caa:	f000 fdfb 	bl	80058a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cae:	f001 fea1 	bl	80069f4 <vPortEnterCritical>
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cb8:	b25b      	sxtb	r3, r3
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbe:	d103      	bne.n	8004cc8 <xQueueGenericSend+0xc4>
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cce:	b25b      	sxtb	r3, r3
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd4:	d103      	bne.n	8004cde <xQueueGenericSend+0xda>
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cde:	f001 fea3 	bl	8006a28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ce2:	1d3a      	adds	r2, r7, #4
 8004ce4:	f107 0314 	add.w	r3, r7, #20
 8004ce8:	4611      	mov	r1, r2
 8004cea:	4618      	mov	r0, r3
 8004cec:	f001 f824 	bl	8005d38 <xTaskCheckForTimeOut>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d124      	bne.n	8004d40 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cf6:	6a38      	ldr	r0, [r7, #32]
 8004cf8:	f000 fb5d 	bl	80053b6 <prvIsQueueFull>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d018      	beq.n	8004d34 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	3310      	adds	r3, #16
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	4611      	mov	r1, r2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 ff74 	bl	8005bf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d10:	6a38      	ldr	r0, [r7, #32]
 8004d12:	f000 fae8 	bl	80052e6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d16:	f000 fdd3 	bl	80058c0 <xTaskResumeAll>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f47f af7c 	bne.w	8004c1a <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8004d22:	4b0c      	ldr	r3, [pc, #48]	@ (8004d54 <xQueueGenericSend+0x150>)
 8004d24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	e772      	b.n	8004c1a <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d34:	6a38      	ldr	r0, [r7, #32]
 8004d36:	f000 fad6 	bl	80052e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d3a:	f000 fdc1 	bl	80058c0 <xTaskResumeAll>
 8004d3e:	e76c      	b.n	8004c1a <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d40:	6a38      	ldr	r0, [r7, #32]
 8004d42:	f000 fad0 	bl	80052e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d46:	f000 fdbb 	bl	80058c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3728      	adds	r7, #40	@ 0x28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	e000ed04 	.word	0xe000ed04

08004d58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08c      	sub	sp, #48	@ 0x30
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	62bb      	str	r3, [r7, #40]	@ 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d6a:	f3ef 8211 	mrs	r2, BASEPRI
 8004d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	61ba      	str	r2, [r7, #24]
 8004d80:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d82:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d84:	627b      	str	r3, [r7, #36]	@ 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d302      	bcc.n	8004d98 <xQueueGenericSendFromISR+0x40>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d12f      	bne.n	8004df8 <xQueueGenericSendFromISR+0xa0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da6:	61fb      	str	r3, [r7, #28]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	68b9      	ldr	r1, [r7, #8]
 8004dac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dae:	f000 fa0a 	bl	80051c6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004db2:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8004db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dba:	d112      	bne.n	8004de2 <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d016      	beq.n	8004df2 <xQueueGenericSendFromISR+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc6:	3324      	adds	r3, #36	@ 0x24
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 ff49 	bl	8005c60 <xTaskRemoveFromEventList>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00e      	beq.n	8004df2 <xQueueGenericSendFromISR+0x9a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00b      	beq.n	8004df2 <xQueueGenericSendFromISR+0x9a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	e007      	b.n	8004df2 <xQueueGenericSendFromISR+0x9a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004de2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004de6:	3301      	adds	r3, #1
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	b25a      	sxtb	r2, r3
 8004dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004df2:	2301      	movs	r3, #1
 8004df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
 8004df6:	e001      	b.n	8004dfc <xQueueGenericSendFromISR+0xa4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e06:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3730      	adds	r7, #48	@ 0x30
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08a      	sub	sp, #40	@ 0x28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e20:	2300      	movs	r3, #0
 8004e22:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	623b      	str	r3, [r7, #32]
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e28:	f001 fde4 	bl	80069f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e30:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01f      	beq.n	8004e78 <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	6a38      	ldr	r0, [r7, #32]
 8004e3c:	f000 fa2d 	bl	800529a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	1e5a      	subs	r2, r3, #1
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00f      	beq.n	8004e70 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	3310      	adds	r3, #16
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 ff03 	bl	8005c60 <xTaskRemoveFromEventList>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d007      	beq.n	8004e70 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e60:	4b3c      	ldr	r3, [pc, #240]	@ (8004f54 <xQueueReceive+0x140>)
 8004e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e70:	f001 fdda 	bl	8006a28 <vPortExitCritical>
				return pdPASS;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e069      	b.n	8004f4c <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d103      	bne.n	8004e86 <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e7e:	f001 fdd3 	bl	8006a28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e062      	b.n	8004f4c <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e8c:	f107 0314 	add.w	r3, r7, #20
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 ff3b 	bl	8005d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e96:	2301      	movs	r3, #1
 8004e98:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e9a:	f001 fdc5 	bl	8006a28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e9e:	f000 fd01 	bl	80058a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ea2:	f001 fda7 	bl	80069f4 <vPortEnterCritical>
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004eac:	b25b      	sxtb	r3, r3
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb2:	d103      	bne.n	8004ebc <xQueueReceive+0xa8>
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ec2:	b25b      	sxtb	r3, r3
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d103      	bne.n	8004ed2 <xQueueReceive+0xbe>
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ed2:	f001 fda9 	bl	8006a28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ed6:	1d3a      	adds	r2, r7, #4
 8004ed8:	f107 0314 	add.w	r3, r7, #20
 8004edc:	4611      	mov	r1, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 ff2a 	bl	8005d38 <xTaskCheckForTimeOut>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d123      	bne.n	8004f32 <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004eea:	6a38      	ldr	r0, [r7, #32]
 8004eec:	f000 fa4d 	bl	800538a <prvIsQueueEmpty>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d017      	beq.n	8004f26 <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	3324      	adds	r3, #36	@ 0x24
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	4611      	mov	r1, r2
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fe7a 	bl	8005bf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f04:	6a38      	ldr	r0, [r7, #32]
 8004f06:	f000 f9ee 	bl	80052e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f0a:	f000 fcd9 	bl	80058c0 <xTaskResumeAll>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d189      	bne.n	8004e28 <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 8004f14:	4b0f      	ldr	r3, [pc, #60]	@ (8004f54 <xQueueReceive+0x140>)
 8004f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	e780      	b.n	8004e28 <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f26:	6a38      	ldr	r0, [r7, #32]
 8004f28:	f000 f9dd 	bl	80052e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f2c:	f000 fcc8 	bl	80058c0 <xTaskResumeAll>
 8004f30:	e77a      	b.n	8004e28 <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f32:	6a38      	ldr	r0, [r7, #32]
 8004f34:	f000 f9d7 	bl	80052e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f38:	f000 fcc2 	bl	80058c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f3c:	6a38      	ldr	r0, [r7, #32]
 8004f3e:	f000 fa24 	bl	800538a <prvIsQueueEmpty>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f43f af6f 	beq.w	8004e28 <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3728      	adds	r7, #40	@ 0x28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	e000ed04 	.word	0xe000ed04

08004f58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08a      	sub	sp, #40	@ 0x28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f62:	2300      	movs	r3, #0
 8004f64:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f6e:	f001 fd41 	bl	80069f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f76:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d024      	beq.n	8004fc8 <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	1e5a      	subs	r2, r3, #1
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d104      	bne.n	8004f98 <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004f8e:	f001 f931 	bl	80061f4 <pvTaskIncrementMutexHeldCount>
 8004f92:	4602      	mov	r2, r0
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00f      	beq.n	8004fc0 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	3310      	adds	r3, #16
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 fe5b 	bl	8005c60 <xTaskRemoveFromEventList>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d007      	beq.n	8004fc0 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fb0:	4b4c      	ldr	r3, [pc, #304]	@ (80050e4 <xQueueSemaphoreTake+0x18c>)
 8004fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004fc0:	f001 fd32 	bl	8006a28 <vPortExitCritical>
				return pdPASS;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e089      	b.n	80050dc <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d103      	bne.n	8004fd6 <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004fce:	f001 fd2b 	bl	8006a28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e082      	b.n	80050dc <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d106      	bne.n	8004fea <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fdc:	f107 030c 	add.w	r3, r7, #12
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fe93 	bl	8005d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fea:	f001 fd1d 	bl	8006a28 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fee:	f000 fc59 	bl	80058a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ff2:	f001 fcff 	bl	80069f4 <vPortEnterCritical>
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ffc:	b25b      	sxtb	r3, r3
 8004ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005002:	d103      	bne.n	800500c <xQueueSemaphoreTake+0xb4>
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005012:	b25b      	sxtb	r3, r3
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005018:	d103      	bne.n	8005022 <xQueueSemaphoreTake+0xca>
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005022:	f001 fd01 	bl	8006a28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005026:	463a      	mov	r2, r7
 8005028:	f107 030c 	add.w	r3, r7, #12
 800502c:	4611      	mov	r1, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fe82 	bl	8005d38 <xTaskCheckForTimeOut>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d132      	bne.n	80050a0 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800503a:	69f8      	ldr	r0, [r7, #28]
 800503c:	f000 f9a5 	bl	800538a <prvIsQueueEmpty>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d026      	beq.n	8005094 <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d109      	bne.n	8005062 <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 800504e:	f001 fcd1 	bl	80069f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	4618      	mov	r0, r3
 8005058:	f000 ffb8 	bl	8005fcc <xTaskPriorityInherit>
 800505c:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800505e:	f001 fce3 	bl	8006a28 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	3324      	adds	r3, #36	@ 0x24
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	4611      	mov	r1, r2
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fdc4 	bl	8005bf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005070:	69f8      	ldr	r0, [r7, #28]
 8005072:	f000 f938 	bl	80052e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005076:	f000 fc23 	bl	80058c0 <xTaskResumeAll>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	f47f af76 	bne.w	8004f6e <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 8005082:	4b18      	ldr	r3, [pc, #96]	@ (80050e4 <xQueueSemaphoreTake+0x18c>)
 8005084:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	e76c      	b.n	8004f6e <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005094:	69f8      	ldr	r0, [r7, #28]
 8005096:	f000 f926 	bl	80052e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800509a:	f000 fc11 	bl	80058c0 <xTaskResumeAll>
 800509e:	e766      	b.n	8004f6e <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80050a0:	69f8      	ldr	r0, [r7, #28]
 80050a2:	f000 f920 	bl	80052e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050a6:	f000 fc0b 	bl	80058c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050aa:	69f8      	ldr	r0, [r7, #28]
 80050ac:	f000 f96d 	bl	800538a <prvIsQueueEmpty>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f43f af5b 	beq.w	8004f6e <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00d      	beq.n	80050da <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 80050be:	f001 fc99 	bl	80069f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80050c2:	69f8      	ldr	r0, [r7, #28]
 80050c4:	f000 f867 	bl	8005196 <prvGetDisinheritPriorityAfterTimeout>
 80050c8:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	6979      	ldr	r1, [r7, #20]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f001 f82f 	bl	8006134 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80050d6:	f001 fca7 	bl	8006a28 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3728      	adds	r7, #40	@ 0x28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	e000ed04 	.word	0xe000ed04

080050e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08c      	sub	sp, #48	@ 0x30
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	__asm volatile
 80050f8:	f3ef 8211 	mrs	r2, BASEPRI
 80050fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	61ba      	str	r2, [r7, #24]
 800510e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005110:	69bb      	ldr	r3, [r7, #24]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005112:	627b      	str	r3, [r7, #36]	@ 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005118:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d02d      	beq.n	800517c <xQueueReceiveFromISR+0x94>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005122:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005126:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005128:	68b9      	ldr	r1, [r7, #8]
 800512a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800512c:	f000 f8b5 	bl	800529a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	1e5a      	subs	r2, r3, #1
 8005134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005136:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005138:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800513c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005140:	d112      	bne.n	8005168 <xQueueReceiveFromISR+0x80>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d015      	beq.n	8005176 <xQueueReceiveFromISR+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800514a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514c:	3310      	adds	r3, #16
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fd86 	bl	8005c60 <xTaskRemoveFromEventList>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00d      	beq.n	8005176 <xQueueReceiveFromISR+0x8e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <xQueueReceiveFromISR+0x8e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	e006      	b.n	8005176 <xQueueReceiveFromISR+0x8e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005168:	7ffb      	ldrb	r3, [r7, #31]
 800516a:	3301      	adds	r3, #1
 800516c:	b2db      	uxtb	r3, r3
 800516e:	b25a      	sxtb	r2, r3
 8005170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005172:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005176:	2301      	movs	r3, #1
 8005178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800517a:	e001      	b.n	8005180 <xQueueReceiveFromISR+0x98>
		}
		else
		{
			xReturn = pdFAIL;
 800517c:	2300      	movs	r3, #0
 800517e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f383 8811 	msr	BASEPRI, r3
}
 800518a:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800518c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800518e:	4618      	mov	r0, r3
 8005190:	3730      	adds	r7, #48	@ 0x30
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005196:	b480      	push	{r7}
 8005198:	b085      	sub	sp, #20
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d006      	beq.n	80051b4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	e001      	b.n	80051b8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80051b8:	68fb      	ldr	r3, [r7, #12]
	}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b086      	sub	sp, #24
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10d      	bne.n	8005200 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d14d      	bne.n	8005288 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 ff53 	bl	800609c <xTaskPriorityDisinherit>
 80051f6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	609a      	str	r2, [r3, #8]
 80051fe:	e043      	b.n	8005288 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d119      	bne.n	800523a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6858      	ldr	r0, [r3, #4]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520e:	461a      	mov	r2, r3
 8005210:	68b9      	ldr	r1, [r7, #8]
 8005212:	f001 fec3 	bl	8006f9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521e:	441a      	add	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	429a      	cmp	r2, r3
 800522e:	d32b      	bcc.n	8005288 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	605a      	str	r2, [r3, #4]
 8005238:	e026      	b.n	8005288 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	68d8      	ldr	r0, [r3, #12]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005242:	461a      	mov	r2, r3
 8005244:	68b9      	ldr	r1, [r7, #8]
 8005246:	f001 fea9 	bl	8006f9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005252:	425b      	negs	r3, r3
 8005254:	441a      	add	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	429a      	cmp	r2, r3
 8005264:	d207      	bcs.n	8005276 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526e:	425b      	negs	r3, r3
 8005270:	441a      	add	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d105      	bne.n	8005288 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	3b01      	subs	r3, #1
 8005286:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005290:	697b      	ldr	r3, [r7, #20]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d018      	beq.n	80052de <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b4:	441a      	add	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d303      	bcc.n	80052ce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68d9      	ldr	r1, [r3, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d6:	461a      	mov	r2, r3
 80052d8:	6838      	ldr	r0, [r7, #0]
 80052da:	f001 fe5f 	bl	8006f9c <memcpy>
	}
}
 80052de:	bf00      	nop
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b084      	sub	sp, #16
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052ee:	f001 fb81 	bl	80069f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052f8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052fa:	e011      	b.n	8005320 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005300:	2b00      	cmp	r3, #0
 8005302:	d012      	beq.n	800532a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3324      	adds	r3, #36	@ 0x24
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fca9 	bl	8005c60 <xTaskRemoveFromEventList>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005314:	f000 fd56 	bl	8005dc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	3b01      	subs	r3, #1
 800531c:	b2db      	uxtb	r3, r3
 800531e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005324:	2b00      	cmp	r3, #0
 8005326:	dce9      	bgt.n	80052fc <prvUnlockQueue+0x16>
 8005328:	e000      	b.n	800532c <prvUnlockQueue+0x46>
					break;
 800532a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	22ff      	movs	r2, #255	@ 0xff
 8005330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005334:	f001 fb78 	bl	8006a28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005338:	f001 fb5c 	bl	80069f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005342:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005344:	e011      	b.n	800536a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d012      	beq.n	8005374 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3310      	adds	r3, #16
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fc84 	bl	8005c60 <xTaskRemoveFromEventList>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800535e:	f000 fd31 	bl	8005dc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005362:	7bbb      	ldrb	r3, [r7, #14]
 8005364:	3b01      	subs	r3, #1
 8005366:	b2db      	uxtb	r3, r3
 8005368:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800536a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800536e:	2b00      	cmp	r3, #0
 8005370:	dce9      	bgt.n	8005346 <prvUnlockQueue+0x60>
 8005372:	e000      	b.n	8005376 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005374:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	22ff      	movs	r2, #255	@ 0xff
 800537a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800537e:	f001 fb53 	bl	8006a28 <vPortExitCritical>
}
 8005382:	bf00      	nop
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b084      	sub	sp, #16
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005392:	f001 fb2f 	bl	80069f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539a:	2b00      	cmp	r3, #0
 800539c:	d102      	bne.n	80053a4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800539e:	2301      	movs	r3, #1
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	e001      	b.n	80053a8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053a8:	f001 fb3e 	bl	8006a28 <vPortExitCritical>

	return xReturn;
 80053ac:	68fb      	ldr	r3, [r7, #12]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053be:	f001 fb19 	bl	80069f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d102      	bne.n	80053d4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80053ce:	2301      	movs	r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	e001      	b.n	80053d8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053d8:	f001 fb26 	bl	8006a28 <vPortExitCritical>

	return xReturn;
 80053dc:	68fb      	ldr	r3, [r7, #12]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	e014      	b.n	8005422 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053f8:	4a0f      	ldr	r2, [pc, #60]	@ (8005438 <vQueueAddToRegistry+0x50>)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10b      	bne.n	800541c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005404:	490c      	ldr	r1, [pc, #48]	@ (8005438 <vQueueAddToRegistry+0x50>)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800540e:	4a0a      	ldr	r2, [pc, #40]	@ (8005438 <vQueueAddToRegistry+0x50>)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	4413      	add	r3, r2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800541a:	e006      	b.n	800542a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3301      	adds	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b07      	cmp	r3, #7
 8005426:	d9e7      	bls.n	80053f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005428:	bf00      	nop
 800542a:	bf00      	nop
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000a6c 	.word	0x20000a6c

0800543c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800544c:	f001 fad2 	bl	80069f4 <vPortEnterCritical>
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005456:	b25b      	sxtb	r3, r3
 8005458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545c:	d103      	bne.n	8005466 <vQueueWaitForMessageRestricted+0x2a>
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800546c:	b25b      	sxtb	r3, r3
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005472:	d103      	bne.n	800547c <vQueueWaitForMessageRestricted+0x40>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800547c:	f001 fad4 	bl	8006a28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005484:	2b00      	cmp	r3, #0
 8005486:	d106      	bne.n	8005496 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	3324      	adds	r3, #36	@ 0x24
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fbc7 	bl	8005c24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005496:	6978      	ldr	r0, [r7, #20]
 8005498:	f7ff ff25 	bl	80052e6 <prvUnlockQueue>
	}
 800549c:	bf00      	nop
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08a      	sub	sp, #40	@ 0x28
 80054a8:	af04      	add	r7, sp, #16
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01e      	beq.n	80054f6 <xTaskCreateStatic+0x52>
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d01b      	beq.n	80054f6 <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c0:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054d0:	2300      	movs	r3, #0
 80054d2:	9303      	str	r3, [sp, #12]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	9302      	str	r3, [sp, #8]
 80054d8:	f107 0310 	add.w	r3, r7, #16
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 f851 	bl	8005590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054ee:	6978      	ldr	r0, [r7, #20]
 80054f0:	f000 f8e4 	bl	80056bc <prvAddNewTaskToReadyList>
 80054f4:	e001      	b.n	80054fa <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 80054fa:	693b      	ldr	r3, [r7, #16]
	}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08c      	sub	sp, #48	@ 0x30
 8005508:	af04      	add	r7, sp, #16
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	603b      	str	r3, [r7, #0]
 8005510:	4613      	mov	r3, r2
 8005512:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005514:	88fb      	ldrh	r3, [r7, #6]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4618      	mov	r0, r3
 800551a:	f001 fb25 	bl	8006b68 <pvPortMalloc>
 800551e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00e      	beq.n	8005544 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005526:	20a8      	movs	r0, #168	@ 0xa8
 8005528:	f001 fb1e 	bl	8006b68 <pvPortMalloc>
 800552c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	631a      	str	r2, [r3, #48]	@ 0x30
 800553a:	e005      	b.n	8005548 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800553c:	6978      	ldr	r0, [r7, #20]
 800553e:	f001 fbad 	bl	8006c9c <vPortFree>
 8005542:	e001      	b.n	8005548 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005544:	2300      	movs	r3, #0
 8005546:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d017      	beq.n	800557e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005556:	88fa      	ldrh	r2, [r7, #6]
 8005558:	2300      	movs	r3, #0
 800555a:	9303      	str	r3, [sp, #12]
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	9302      	str	r3, [sp, #8]
 8005560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005562:	9301      	str	r3, [sp, #4]
 8005564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68b9      	ldr	r1, [r7, #8]
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f80f 	bl	8005590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005572:	69f8      	ldr	r0, [r7, #28]
 8005574:	f000 f8a2 	bl	80056bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005578:	2301      	movs	r3, #1
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	e002      	b.n	8005584 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800557e:	f04f 33ff 	mov.w	r3, #4294967295
 8005582:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005584:	69bb      	ldr	r3, [r7, #24]
	}
 8005586:	4618      	mov	r0, r3
 8005588:	3720      	adds	r7, #32
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800559e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	461a      	mov	r2, r3
 80055a8:	21a5      	movs	r1, #165	@ 0xa5
 80055aa:	f001 fc73 	bl	8006e94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055b8:	3b01      	subs	r3, #1
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f023 0307 	bic.w	r3, r3, #7
 80055c6:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01f      	beq.n	800560e <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	e012      	b.n	80055fa <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	4413      	add	r3, r2
 80055da:	7819      	ldrb	r1, [r3, #0]
 80055dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	4413      	add	r3, r2
 80055e2:	3334      	adds	r3, #52	@ 0x34
 80055e4:	460a      	mov	r2, r1
 80055e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	4413      	add	r3, r2
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d006      	beq.n	8005602 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	3301      	adds	r3, #1
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2b0f      	cmp	r3, #15
 80055fe:	d9e9      	bls.n	80055d4 <prvInitialiseNewTask+0x44>
 8005600:	e000      	b.n	8005604 <prvInitialiseNewTask+0x74>
			{
				break;
 8005602:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800560c:	e003      	b.n	8005616 <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800560e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	2b37      	cmp	r3, #55	@ 0x37
 800561a:	d901      	bls.n	8005620 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800561c:	2337      	movs	r3, #55	@ 0x37
 800561e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005622:	6a3a      	ldr	r2, [r7, #32]
 8005624:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005628:	6a3a      	ldr	r2, [r7, #32]
 800562a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800562c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562e:	2200      	movs	r2, #0
 8005630:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005634:	3304      	adds	r3, #4
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff f8ec 	bl	8004814 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800563c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800563e:	3318      	adds	r3, #24
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff f8e7 	bl	8004814 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005648:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800564a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005654:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800565a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800565c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565e:	2200      	movs	r2, #0
 8005660:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005666:	2200      	movs	r2, #0
 8005668:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800566c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566e:	3354      	adds	r3, #84	@ 0x54
 8005670:	224c      	movs	r2, #76	@ 0x4c
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f001 fc0d 	bl	8006e94 <memset>
 800567a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567c:	4a0c      	ldr	r2, [pc, #48]	@ (80056b0 <prvInitialiseNewTask+0x120>)
 800567e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005682:	4a0c      	ldr	r2, [pc, #48]	@ (80056b4 <prvInitialiseNewTask+0x124>)
 8005684:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005688:	4a0b      	ldr	r2, [pc, #44]	@ (80056b8 <prvInitialiseNewTask+0x128>)
 800568a:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	68f9      	ldr	r1, [r7, #12]
 8005690:	6938      	ldr	r0, [r7, #16]
 8005692:	f001 f909 	bl	80068a8 <pxPortInitialiseStack>
 8005696:	4602      	mov	r2, r0
 8005698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056a8:	bf00      	nop
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20004cf8 	.word	0x20004cf8
 80056b4:	20004d60 	.word	0x20004d60
 80056b8:	20004dc8 	.word	0x20004dc8

080056bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056c4:	f001 f996 	bl	80069f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005780 <prvAddNewTaskToReadyList+0xc4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005780 <prvAddNewTaskToReadyList+0xc4>)
 80056d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056d2:	4b2c      	ldr	r3, [pc, #176]	@ (8005784 <prvAddNewTaskToReadyList+0xc8>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d109      	bne.n	80056ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056da:	4a2a      	ldr	r2, [pc, #168]	@ (8005784 <prvAddNewTaskToReadyList+0xc8>)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056e0:	4b27      	ldr	r3, [pc, #156]	@ (8005780 <prvAddNewTaskToReadyList+0xc4>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d110      	bne.n	800570a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056e8:	f000 fb90 	bl	8005e0c <prvInitialiseTaskLists>
 80056ec:	e00d      	b.n	800570a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056ee:	4b26      	ldr	r3, [pc, #152]	@ (8005788 <prvAddNewTaskToReadyList+0xcc>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056f6:	4b23      	ldr	r3, [pc, #140]	@ (8005784 <prvAddNewTaskToReadyList+0xc8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005700:	429a      	cmp	r2, r3
 8005702:	d802      	bhi.n	800570a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005704:	4a1f      	ldr	r2, [pc, #124]	@ (8005784 <prvAddNewTaskToReadyList+0xc8>)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800570a:	4b20      	ldr	r3, [pc, #128]	@ (800578c <prvAddNewTaskToReadyList+0xd0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3301      	adds	r3, #1
 8005710:	4a1e      	ldr	r2, [pc, #120]	@ (800578c <prvAddNewTaskToReadyList+0xd0>)
 8005712:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005714:	4b1d      	ldr	r3, [pc, #116]	@ (800578c <prvAddNewTaskToReadyList+0xd0>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005720:	4b1b      	ldr	r3, [pc, #108]	@ (8005790 <prvAddNewTaskToReadyList+0xd4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d903      	bls.n	8005730 <prvAddNewTaskToReadyList+0x74>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572c:	4a18      	ldr	r2, [pc, #96]	@ (8005790 <prvAddNewTaskToReadyList+0xd4>)
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4a15      	ldr	r2, [pc, #84]	@ (8005794 <prvAddNewTaskToReadyList+0xd8>)
 800573e:	441a      	add	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3304      	adds	r3, #4
 8005744:	4619      	mov	r1, r3
 8005746:	4610      	mov	r0, r2
 8005748:	f7ff f871 	bl	800482e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800574c:	f001 f96c 	bl	8006a28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005750:	4b0d      	ldr	r3, [pc, #52]	@ (8005788 <prvAddNewTaskToReadyList+0xcc>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00e      	beq.n	8005776 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005758:	4b0a      	ldr	r3, [pc, #40]	@ (8005784 <prvAddNewTaskToReadyList+0xc8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005762:	429a      	cmp	r2, r3
 8005764:	d207      	bcs.n	8005776 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005766:	4b0c      	ldr	r3, [pc, #48]	@ (8005798 <prvAddNewTaskToReadyList+0xdc>)
 8005768:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005776:	bf00      	nop
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000f80 	.word	0x20000f80
 8005784:	20000aac 	.word	0x20000aac
 8005788:	20000f8c 	.word	0x20000f8c
 800578c:	20000f9c 	.word	0x20000f9c
 8005790:	20000f88 	.word	0x20000f88
 8005794:	20000ab0 	.word	0x20000ab0
 8005798:	e000ed04 	.word	0xe000ed04

0800579c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d008      	beq.n	80057c0 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 80057ae:	f000 f879 	bl	80058a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057b2:	2100      	movs	r1, #0
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fd31 	bl	800621c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057ba:	f000 f881 	bl	80058c0 <xTaskResumeAll>
 80057be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d107      	bne.n	80057d6 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 80057c6:	4b06      	ldr	r3, [pc, #24]	@ (80057e0 <vTaskDelay+0x44>)
 80057c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057d6:	bf00      	nop
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	e000ed04 	.word	0xe000ed04

080057e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08a      	sub	sp, #40	@ 0x28
 80057e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80057f2:	1d3a      	adds	r2, r7, #4
 80057f4:	f107 0108 	add.w	r1, r7, #8
 80057f8:	f107 030c 	add.w	r3, r7, #12
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fe ffb5 	bl	800476c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005802:	6879      	ldr	r1, [r7, #4]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	9202      	str	r2, [sp, #8]
 800580a:	9301      	str	r3, [sp, #4]
 800580c:	2300      	movs	r3, #0
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	2300      	movs	r3, #0
 8005812:	460a      	mov	r2, r1
 8005814:	491b      	ldr	r1, [pc, #108]	@ (8005884 <vTaskStartScheduler+0xa0>)
 8005816:	481c      	ldr	r0, [pc, #112]	@ (8005888 <vTaskStartScheduler+0xa4>)
 8005818:	f7ff fe44 	bl	80054a4 <xTaskCreateStatic>
 800581c:	4603      	mov	r3, r0
 800581e:	4a1b      	ldr	r2, [pc, #108]	@ (800588c <vTaskStartScheduler+0xa8>)
 8005820:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005822:	4b1a      	ldr	r3, [pc, #104]	@ (800588c <vTaskStartScheduler+0xa8>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 800582a:	2301      	movs	r3, #1
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	e001      	b.n	8005834 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d102      	bne.n	8005840 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800583a:	f000 fd43 	bl	80062c4 <xTimerCreateTimerTask>
 800583e:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d11a      	bne.n	800587c <vTaskStartScheduler+0x98>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	613b      	str	r3, [r7, #16]
}
 8005858:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800585a:	4b0d      	ldr	r3, [pc, #52]	@ (8005890 <vTaskStartScheduler+0xac>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3354      	adds	r3, #84	@ 0x54
 8005860:	4a0c      	ldr	r2, [pc, #48]	@ (8005894 <vTaskStartScheduler+0xb0>)
 8005862:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005864:	4b0c      	ldr	r3, [pc, #48]	@ (8005898 <vTaskStartScheduler+0xb4>)
 8005866:	f04f 32ff 	mov.w	r2, #4294967295
 800586a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800586c:	4b0b      	ldr	r3, [pc, #44]	@ (800589c <vTaskStartScheduler+0xb8>)
 800586e:	2201      	movs	r2, #1
 8005870:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005872:	4b0b      	ldr	r3, [pc, #44]	@ (80058a0 <vTaskStartScheduler+0xbc>)
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005878:	f001 f892 	bl	80069a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800587c:	bf00      	nop
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	080070cc 	.word	0x080070cc
 8005888:	08005ddd 	.word	0x08005ddd
 800588c:	20000fa4 	.word	0x20000fa4
 8005890:	20000aac 	.word	0x20000aac
 8005894:	200000c4 	.word	0x200000c4
 8005898:	20000fa0 	.word	0x20000fa0
 800589c:	20000f8c 	.word	0x20000f8c
 80058a0:	20000f84 	.word	0x20000f84

080058a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058a8:	4b04      	ldr	r3, [pc, #16]	@ (80058bc <vTaskSuspendAll+0x18>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3301      	adds	r3, #1
 80058ae:	4a03      	ldr	r2, [pc, #12]	@ (80058bc <vTaskSuspendAll+0x18>)
 80058b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058b2:	bf00      	nop
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	20000fa8 	.word	0x20000fa8

080058c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80058ce:	f001 f891 	bl	80069f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80058d2:	4b39      	ldr	r3, [pc, #228]	@ (80059b8 <xTaskResumeAll+0xf8>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	4a37      	ldr	r2, [pc, #220]	@ (80059b8 <xTaskResumeAll+0xf8>)
 80058da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058dc:	4b36      	ldr	r3, [pc, #216]	@ (80059b8 <xTaskResumeAll+0xf8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d162      	bne.n	80059aa <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058e4:	4b35      	ldr	r3, [pc, #212]	@ (80059bc <xTaskResumeAll+0xfc>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d05e      	beq.n	80059aa <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058ec:	e02f      	b.n	800594e <xTaskResumeAll+0x8e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ee:	4b34      	ldr	r3, [pc, #208]	@ (80059c0 <xTaskResumeAll+0x100>)
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3318      	adds	r3, #24
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fe fff4 	bl	80048e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3304      	adds	r3, #4
 8005904:	4618      	mov	r0, r3
 8005906:	f7fe ffef 	bl	80048e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800590e:	4b2d      	ldr	r3, [pc, #180]	@ (80059c4 <xTaskResumeAll+0x104>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d903      	bls.n	800591e <xTaskResumeAll+0x5e>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591a:	4a2a      	ldr	r2, [pc, #168]	@ (80059c4 <xTaskResumeAll+0x104>)
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005922:	4613      	mov	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4a27      	ldr	r2, [pc, #156]	@ (80059c8 <xTaskResumeAll+0x108>)
 800592c:	441a      	add	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	3304      	adds	r3, #4
 8005932:	4619      	mov	r1, r3
 8005934:	4610      	mov	r0, r2
 8005936:	f7fe ff7a 	bl	800482e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800593e:	4b23      	ldr	r3, [pc, #140]	@ (80059cc <xTaskResumeAll+0x10c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005944:	429a      	cmp	r2, r3
 8005946:	d302      	bcc.n	800594e <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 8005948:	4b21      	ldr	r3, [pc, #132]	@ (80059d0 <xTaskResumeAll+0x110>)
 800594a:	2201      	movs	r2, #1
 800594c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800594e:	4b1c      	ldr	r3, [pc, #112]	@ (80059c0 <xTaskResumeAll+0x100>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1cb      	bne.n	80058ee <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800595c:	f000 fae8 	bl	8005f30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005960:	4b1c      	ldr	r3, [pc, #112]	@ (80059d4 <xTaskResumeAll+0x114>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d010      	beq.n	800598e <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800596c:	f000 f846 	bl	80059fc <xTaskIncrementTick>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 8005976:	4b16      	ldr	r3, [pc, #88]	@ (80059d0 <xTaskResumeAll+0x110>)
 8005978:	2201      	movs	r2, #1
 800597a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3b01      	subs	r3, #1
 8005980:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1f1      	bne.n	800596c <xTaskResumeAll+0xac>

						xPendedTicks = 0;
 8005988:	4b12      	ldr	r3, [pc, #72]	@ (80059d4 <xTaskResumeAll+0x114>)
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800598e:	4b10      	ldr	r3, [pc, #64]	@ (80059d0 <xTaskResumeAll+0x110>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d009      	beq.n	80059aa <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005996:	2301      	movs	r3, #1
 8005998:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800599a:	4b0f      	ldr	r3, [pc, #60]	@ (80059d8 <xTaskResumeAll+0x118>)
 800599c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059aa:	f001 f83d 	bl	8006a28 <vPortExitCritical>

	return xAlreadyYielded;
 80059ae:	68bb      	ldr	r3, [r7, #8]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20000fa8 	.word	0x20000fa8
 80059bc:	20000f80 	.word	0x20000f80
 80059c0:	20000f40 	.word	0x20000f40
 80059c4:	20000f88 	.word	0x20000f88
 80059c8:	20000ab0 	.word	0x20000ab0
 80059cc:	20000aac 	.word	0x20000aac
 80059d0:	20000f94 	.word	0x20000f94
 80059d4:	20000f90 	.word	0x20000f90
 80059d8:	e000ed04 	.word	0xe000ed04

080059dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80059e2:	4b05      	ldr	r3, [pc, #20]	@ (80059f8 <xTaskGetTickCount+0x1c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80059e8:	687b      	ldr	r3, [r7, #4]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	20000f84 	.word	0x20000f84

080059fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a02:	2300      	movs	r3, #0
 8005a04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a06:	4b46      	ldr	r3, [pc, #280]	@ (8005b20 <xTaskIncrementTick+0x124>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d17e      	bne.n	8005b0c <xTaskIncrementTick+0x110>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a0e:	4b45      	ldr	r3, [pc, #276]	@ (8005b24 <xTaskIncrementTick+0x128>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3301      	adds	r3, #1
 8005a14:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a16:	4a43      	ldr	r2, [pc, #268]	@ (8005b24 <xTaskIncrementTick+0x128>)
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d110      	bne.n	8005a44 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a22:	4b41      	ldr	r3, [pc, #260]	@ (8005b28 <xTaskIncrementTick+0x12c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	4b40      	ldr	r3, [pc, #256]	@ (8005b2c <xTaskIncrementTick+0x130>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a3e      	ldr	r2, [pc, #248]	@ (8005b28 <xTaskIncrementTick+0x12c>)
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	4a3e      	ldr	r2, [pc, #248]	@ (8005b2c <xTaskIncrementTick+0x130>)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	4b3e      	ldr	r3, [pc, #248]	@ (8005b30 <xTaskIncrementTick+0x134>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b30 <xTaskIncrementTick+0x134>)
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	f000 fa76 	bl	8005f30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a44:	4b3b      	ldr	r3, [pc, #236]	@ (8005b34 <xTaskIncrementTick+0x138>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d349      	bcc.n	8005ae2 <xTaskIncrementTick+0xe6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a4e:	4b36      	ldr	r3, [pc, #216]	@ (8005b28 <xTaskIncrementTick+0x12c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d104      	bne.n	8005a62 <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a58:	4b36      	ldr	r3, [pc, #216]	@ (8005b34 <xTaskIncrementTick+0x138>)
 8005a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5e:	601a      	str	r2, [r3, #0]
					break;
 8005a60:	e03f      	b.n	8005ae2 <xTaskIncrementTick+0xe6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a62:	4b31      	ldr	r3, [pc, #196]	@ (8005b28 <xTaskIncrementTick+0x12c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d203      	bcs.n	8005a82 <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a7a:	4a2e      	ldr	r2, [pc, #184]	@ (8005b34 <xTaskIncrementTick+0x138>)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a80:	e02f      	b.n	8005ae2 <xTaskIncrementTick+0xe6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	3304      	adds	r3, #4
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fe ff2e 	bl	80048e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d004      	beq.n	8005a9e <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	3318      	adds	r3, #24
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fe ff25 	bl	80048e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aa2:	4b25      	ldr	r3, [pc, #148]	@ (8005b38 <xTaskIncrementTick+0x13c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d903      	bls.n	8005ab2 <xTaskIncrementTick+0xb6>
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aae:	4a22      	ldr	r2, [pc, #136]	@ (8005b38 <xTaskIncrementTick+0x13c>)
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4a1f      	ldr	r2, [pc, #124]	@ (8005b3c <xTaskIncrementTick+0x140>)
 8005ac0:	441a      	add	r2, r3
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4610      	mov	r0, r2
 8005aca:	f7fe feb0 	bl	800482e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b40 <xTaskIncrementTick+0x144>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d3b8      	bcc.n	8005a4e <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8005adc:	2301      	movs	r3, #1
 8005ade:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ae0:	e7b5      	b.n	8005a4e <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ae2:	4b17      	ldr	r3, [pc, #92]	@ (8005b40 <xTaskIncrementTick+0x144>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae8:	4914      	ldr	r1, [pc, #80]	@ (8005b3c <xTaskIncrementTick+0x140>)
 8005aea:	4613      	mov	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	440b      	add	r3, r1
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d901      	bls.n	8005afe <xTaskIncrementTick+0x102>
			{
				xSwitchRequired = pdTRUE;
 8005afa:	2301      	movs	r3, #1
 8005afc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005afe:	4b11      	ldr	r3, [pc, #68]	@ (8005b44 <xTaskIncrementTick+0x148>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <xTaskIncrementTick+0x11a>
			{
				xSwitchRequired = pdTRUE;
 8005b06:	2301      	movs	r3, #1
 8005b08:	617b      	str	r3, [r7, #20]
 8005b0a:	e004      	b.n	8005b16 <xTaskIncrementTick+0x11a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8005b48 <xTaskIncrementTick+0x14c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3301      	adds	r3, #1
 8005b12:	4a0d      	ldr	r2, [pc, #52]	@ (8005b48 <xTaskIncrementTick+0x14c>)
 8005b14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b16:	697b      	ldr	r3, [r7, #20]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	20000fa8 	.word	0x20000fa8
 8005b24:	20000f84 	.word	0x20000f84
 8005b28:	20000f38 	.word	0x20000f38
 8005b2c:	20000f3c 	.word	0x20000f3c
 8005b30:	20000f98 	.word	0x20000f98
 8005b34:	20000fa0 	.word	0x20000fa0
 8005b38:	20000f88 	.word	0x20000f88
 8005b3c:	20000ab0 	.word	0x20000ab0
 8005b40:	20000aac 	.word	0x20000aac
 8005b44:	20000f94 	.word	0x20000f94
 8005b48:	20000f90 	.word	0x20000f90

08005b4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b52:	4b23      	ldr	r3, [pc, #140]	@ (8005be0 <vTaskSwitchContext+0x94>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b5a:	4b22      	ldr	r3, [pc, #136]	@ (8005be4 <vTaskSwitchContext+0x98>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b60:	e038      	b.n	8005bd4 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8005b62:	4b20      	ldr	r3, [pc, #128]	@ (8005be4 <vTaskSwitchContext+0x98>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b68:	4b1f      	ldr	r3, [pc, #124]	@ (8005be8 <vTaskSwitchContext+0x9c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	607b      	str	r3, [r7, #4]
 8005b6e:	e002      	b.n	8005b76 <vTaskSwitchContext+0x2a>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	607b      	str	r3, [r7, #4]
 8005b76:	491d      	ldr	r1, [pc, #116]	@ (8005bec <vTaskSwitchContext+0xa0>)
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0f2      	beq.n	8005b70 <vTaskSwitchContext+0x24>
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4a15      	ldr	r2, [pc, #84]	@ (8005bec <vTaskSwitchContext+0xa0>)
 8005b96:	4413      	add	r3, r2
 8005b98:	603b      	str	r3, [r7, #0]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	605a      	str	r2, [r3, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	3308      	adds	r3, #8
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d104      	bne.n	8005bba <vTaskSwitchContext+0x6e>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	605a      	str	r2, [r3, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8005bf0 <vTaskSwitchContext+0xa4>)
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	4a08      	ldr	r2, [pc, #32]	@ (8005be8 <vTaskSwitchContext+0x9c>)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bca:	4b09      	ldr	r3, [pc, #36]	@ (8005bf0 <vTaskSwitchContext+0xa4>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3354      	adds	r3, #84	@ 0x54
 8005bd0:	4a08      	ldr	r2, [pc, #32]	@ (8005bf4 <vTaskSwitchContext+0xa8>)
 8005bd2:	6013      	str	r3, [r2, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	20000fa8 	.word	0x20000fa8
 8005be4:	20000f94 	.word	0x20000f94
 8005be8:	20000f88 	.word	0x20000f88
 8005bec:	20000ab0 	.word	0x20000ab0
 8005bf0:	20000aac 	.word	0x20000aac
 8005bf4:	200000c4 	.word	0x200000c4

08005bf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c02:	4b07      	ldr	r3, [pc, #28]	@ (8005c20 <vTaskPlaceOnEventList+0x28>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3318      	adds	r3, #24
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fe fe33 	bl	8004876 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c10:	2101      	movs	r1, #1
 8005c12:	6838      	ldr	r0, [r7, #0]
 8005c14:	f000 fb02 	bl	800621c <prvAddCurrentTaskToDelayedList>
}
 8005c18:	bf00      	nop
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20000aac 	.word	0x20000aac

08005c24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c30:	4b0a      	ldr	r3, [pc, #40]	@ (8005c5c <vTaskPlaceOnEventListRestricted+0x38>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3318      	adds	r3, #24
 8005c36:	4619      	mov	r1, r3
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f7fe fdf8 	bl	800482e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 8005c44:	f04f 33ff 	mov.w	r3, #4294967295
 8005c48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	68b8      	ldr	r0, [r7, #8]
 8005c4e:	f000 fae5 	bl	800621c <prvAddCurrentTaskToDelayedList>
	}
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	20000aac 	.word	0x20000aac

08005c60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	3318      	adds	r3, #24
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fe fe37 	bl	80048e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8005cf4 <xTaskRemoveFromEventList+0x94>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d11d      	bne.n	8005cbe <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	3304      	adds	r3, #4
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe fe2e 	bl	80048e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c90:	4b19      	ldr	r3, [pc, #100]	@ (8005cf8 <xTaskRemoveFromEventList+0x98>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d903      	bls.n	8005ca0 <xTaskRemoveFromEventList+0x40>
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9c:	4a16      	ldr	r2, [pc, #88]	@ (8005cf8 <xTaskRemoveFromEventList+0x98>)
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4a13      	ldr	r2, [pc, #76]	@ (8005cfc <xTaskRemoveFromEventList+0x9c>)
 8005cae:	441a      	add	r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	f7fe fdb9 	bl	800482e <vListInsertEnd>
 8005cbc:	e005      	b.n	8005cca <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	3318      	adds	r3, #24
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	480e      	ldr	r0, [pc, #56]	@ (8005d00 <xTaskRemoveFromEventList+0xa0>)
 8005cc6:	f7fe fdb2 	bl	800482e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cce:	4b0d      	ldr	r3, [pc, #52]	@ (8005d04 <xTaskRemoveFromEventList+0xa4>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d905      	bls.n	8005ce4 <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005d08 <xTaskRemoveFromEventList+0xa8>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	e001      	b.n	8005ce8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000fa8 	.word	0x20000fa8
 8005cf8:	20000f88 	.word	0x20000f88
 8005cfc:	20000ab0 	.word	0x20000ab0
 8005d00:	20000f40 	.word	0x20000f40
 8005d04:	20000aac 	.word	0x20000aac
 8005d08:	20000f94 	.word	0x20000f94

08005d0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d14:	4b06      	ldr	r3, [pc, #24]	@ (8005d30 <vTaskInternalSetTimeOutState+0x24>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d1c:	4b05      	ldr	r3, [pc, #20]	@ (8005d34 <vTaskInternalSetTimeOutState+0x28>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	605a      	str	r2, [r3, #4]
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	20000f98 	.word	0x20000f98
 8005d34:	20000f84 	.word	0x20000f84

08005d38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8005d42:	f000 fe57 	bl	80069f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d46:	4b1d      	ldr	r3, [pc, #116]	@ (8005dbc <xTaskCheckForTimeOut+0x84>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5e:	d102      	bne.n	8005d66 <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e023      	b.n	8005dae <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	4b15      	ldr	r3, [pc, #84]	@ (8005dc0 <xTaskCheckForTimeOut+0x88>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d007      	beq.n	8005d82 <xTaskCheckForTimeOut+0x4a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d302      	bcc.n	8005d82 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	e015      	b.n	8005dae <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d20b      	bcs.n	8005da4 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	1ad2      	subs	r2, r2, r3
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7ff ffb7 	bl	8005d0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	e004      	b.n	8005dae <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005daa:	2301      	movs	r3, #1
 8005dac:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8005dae:	f000 fe3b 	bl	8006a28 <vPortExitCritical>

	return xReturn;
 8005db2:	697b      	ldr	r3, [r7, #20]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20000f84 	.word	0x20000f84
 8005dc0:	20000f98 	.word	0x20000f98

08005dc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005dc8:	4b03      	ldr	r3, [pc, #12]	@ (8005dd8 <vTaskMissedYield+0x14>)
 8005dca:	2201      	movs	r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]
}
 8005dce:	bf00      	nop
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	20000f94 	.word	0x20000f94

08005ddc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005de4:	f000 f852 	bl	8005e8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005de8:	4b06      	ldr	r3, [pc, #24]	@ (8005e04 <prvIdleTask+0x28>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d9f9      	bls.n	8005de4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005df0:	4b05      	ldr	r3, [pc, #20]	@ (8005e08 <prvIdleTask+0x2c>)
 8005df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e00:	e7f0      	b.n	8005de4 <prvIdleTask+0x8>
 8005e02:	bf00      	nop
 8005e04:	20000ab0 	.word	0x20000ab0
 8005e08:	e000ed04 	.word	0xe000ed04

08005e0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e12:	2300      	movs	r3, #0
 8005e14:	607b      	str	r3, [r7, #4]
 8005e16:	e00c      	b.n	8005e32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4a12      	ldr	r2, [pc, #72]	@ (8005e6c <prvInitialiseTaskLists+0x60>)
 8005e24:	4413      	add	r3, r2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fe fcd4 	bl	80047d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	607b      	str	r3, [r7, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b37      	cmp	r3, #55	@ 0x37
 8005e36:	d9ef      	bls.n	8005e18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e38:	480d      	ldr	r0, [pc, #52]	@ (8005e70 <prvInitialiseTaskLists+0x64>)
 8005e3a:	f7fe fccb 	bl	80047d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e3e:	480d      	ldr	r0, [pc, #52]	@ (8005e74 <prvInitialiseTaskLists+0x68>)
 8005e40:	f7fe fcc8 	bl	80047d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e44:	480c      	ldr	r0, [pc, #48]	@ (8005e78 <prvInitialiseTaskLists+0x6c>)
 8005e46:	f7fe fcc5 	bl	80047d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e4a:	480c      	ldr	r0, [pc, #48]	@ (8005e7c <prvInitialiseTaskLists+0x70>)
 8005e4c:	f7fe fcc2 	bl	80047d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e50:	480b      	ldr	r0, [pc, #44]	@ (8005e80 <prvInitialiseTaskLists+0x74>)
 8005e52:	f7fe fcbf 	bl	80047d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e56:	4b0b      	ldr	r3, [pc, #44]	@ (8005e84 <prvInitialiseTaskLists+0x78>)
 8005e58:	4a05      	ldr	r2, [pc, #20]	@ (8005e70 <prvInitialiseTaskLists+0x64>)
 8005e5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e88 <prvInitialiseTaskLists+0x7c>)
 8005e5e:	4a05      	ldr	r2, [pc, #20]	@ (8005e74 <prvInitialiseTaskLists+0x68>)
 8005e60:	601a      	str	r2, [r3, #0]
}
 8005e62:	bf00      	nop
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000ab0 	.word	0x20000ab0
 8005e70:	20000f10 	.word	0x20000f10
 8005e74:	20000f24 	.word	0x20000f24
 8005e78:	20000f40 	.word	0x20000f40
 8005e7c:	20000f54 	.word	0x20000f54
 8005e80:	20000f6c 	.word	0x20000f6c
 8005e84:	20000f38 	.word	0x20000f38
 8005e88:	20000f3c 	.word	0x20000f3c

08005e8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e92:	e019      	b.n	8005ec8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e94:	f000 fdae 	bl	80069f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e98:	4b10      	ldr	r3, [pc, #64]	@ (8005edc <prvCheckTasksWaitingTermination+0x50>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fe fd1f 	bl	80048e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee0 <prvCheckTasksWaitingTermination+0x54>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8005ee0 <prvCheckTasksWaitingTermination+0x54>)
 8005eb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee4 <prvCheckTasksWaitingTermination+0x58>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	4a0a      	ldr	r2, [pc, #40]	@ (8005ee4 <prvCheckTasksWaitingTermination+0x58>)
 8005ebc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ebe:	f000 fdb3 	bl	8006a28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f810 	bl	8005ee8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ec8:	4b06      	ldr	r3, [pc, #24]	@ (8005ee4 <prvCheckTasksWaitingTermination+0x58>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e1      	bne.n	8005e94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ed0:	bf00      	nop
 8005ed2:	bf00      	nop
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000f54 	.word	0x20000f54
 8005ee0:	20000f80 	.word	0x20000f80
 8005ee4:	20000f68 	.word	0x20000f68

08005ee8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3354      	adds	r3, #84	@ 0x54
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 ffd5 	bl	8006ea4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d108      	bne.n	8005f16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 fec7 	bl	8006c9c <vPortFree>
				vPortFree( pxTCB );
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fec4 	bl	8006c9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f14:	e007      	b.n	8005f26 <prvDeleteTCB+0x3e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d102      	bne.n	8005f26 <prvDeleteTCB+0x3e>
				vPortFree( pxTCB );
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 febb 	bl	8006c9c <vPortFree>
	}
 8005f26:	bf00      	nop
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
	...

08005f30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f36:	4b0c      	ldr	r3, [pc, #48]	@ (8005f68 <prvResetNextTaskUnblockTime+0x38>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f40:	4b0a      	ldr	r3, [pc, #40]	@ (8005f6c <prvResetNextTaskUnblockTime+0x3c>)
 8005f42:	f04f 32ff 	mov.w	r2, #4294967295
 8005f46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f48:	e008      	b.n	8005f5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f4a:	4b07      	ldr	r3, [pc, #28]	@ (8005f68 <prvResetNextTaskUnblockTime+0x38>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4a04      	ldr	r2, [pc, #16]	@ (8005f6c <prvResetNextTaskUnblockTime+0x3c>)
 8005f5a:	6013      	str	r3, [r2, #0]
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	20000f38 	.word	0x20000f38
 8005f6c:	20000fa0 	.word	0x20000fa0

08005f70 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005f76:	4b05      	ldr	r3, [pc, #20]	@ (8005f8c <xTaskGetCurrentTaskHandle+0x1c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005f7c:	687b      	ldr	r3, [r7, #4]
	}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	20000aac 	.word	0x20000aac

08005f90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f96:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc4 <xTaskGetSchedulerState+0x34>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d102      	bne.n	8005fa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	607b      	str	r3, [r7, #4]
 8005fa2:	e008      	b.n	8005fb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fa4:	4b08      	ldr	r3, [pc, #32]	@ (8005fc8 <xTaskGetSchedulerState+0x38>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d102      	bne.n	8005fb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fac:	2302      	movs	r3, #2
 8005fae:	607b      	str	r3, [r7, #4]
 8005fb0:	e001      	b.n	8005fb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fb6:	687b      	ldr	r3, [r7, #4]
	}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	20000f8c 	.word	0x20000f8c
 8005fc8:	20000fa8 	.word	0x20000fa8

08005fcc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d051      	beq.n	8006086 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8006090 <xTaskPriorityInherit+0xc4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d241      	bcs.n	8006074 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	db06      	blt.n	8006006 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ff8:	4b25      	ldr	r3, [pc, #148]	@ (8006090 <xTaskPriorityInherit+0xc4>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	6959      	ldr	r1, [r3, #20]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4a1f      	ldr	r2, [pc, #124]	@ (8006094 <xTaskPriorityInherit+0xc8>)
 8006018:	4413      	add	r3, r2
 800601a:	4299      	cmp	r1, r3
 800601c:	d122      	bne.n	8006064 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	3304      	adds	r3, #4
 8006022:	4618      	mov	r0, r3
 8006024:	f7fe fc60 	bl	80048e8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006028:	4b19      	ldr	r3, [pc, #100]	@ (8006090 <xTaskPriorityInherit+0xc4>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006036:	4b18      	ldr	r3, [pc, #96]	@ (8006098 <xTaskPriorityInherit+0xcc>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	429a      	cmp	r2, r3
 800603c:	d903      	bls.n	8006046 <xTaskPriorityInherit+0x7a>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006042:	4a15      	ldr	r2, [pc, #84]	@ (8006098 <xTaskPriorityInherit+0xcc>)
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4a10      	ldr	r2, [pc, #64]	@ (8006094 <xTaskPriorityInherit+0xc8>)
 8006054:	441a      	add	r2, r3
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	3304      	adds	r3, #4
 800605a:	4619      	mov	r1, r3
 800605c:	4610      	mov	r0, r2
 800605e:	f7fe fbe6 	bl	800482e <vListInsertEnd>
 8006062:	e004      	b.n	800606e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006064:	4b0a      	ldr	r3, [pc, #40]	@ (8006090 <xTaskPriorityInherit+0xc4>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800606e:	2301      	movs	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	e008      	b.n	8006086 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006078:	4b05      	ldr	r3, [pc, #20]	@ (8006090 <xTaskPriorityInherit+0xc4>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607e:	429a      	cmp	r2, r3
 8006080:	d201      	bcs.n	8006086 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006082:	2301      	movs	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006086:	68fb      	ldr	r3, [r7, #12]
	}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20000aac 	.word	0x20000aac
 8006094:	20000ab0 	.word	0x20000ab0
 8006098:	20000f88 	.word	0x20000f88

0800609c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d037      	beq.n	8006122 <xTaskPriorityDisinherit+0x86>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b6:	1e5a      	subs	r2, r3, #1
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d02c      	beq.n	8006122 <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d128      	bne.n	8006122 <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fe fc07 	bl	80048e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f2:	4b0e      	ldr	r3, [pc, #56]	@ (800612c <xTaskPriorityDisinherit+0x90>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d903      	bls.n	8006102 <xTaskPriorityDisinherit+0x66>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fe:	4a0b      	ldr	r2, [pc, #44]	@ (800612c <xTaskPriorityDisinherit+0x90>)
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4a08      	ldr	r2, [pc, #32]	@ (8006130 <xTaskPriorityDisinherit+0x94>)
 8006110:	441a      	add	r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	3304      	adds	r3, #4
 8006116:	4619      	mov	r1, r3
 8006118:	4610      	mov	r0, r2
 800611a:	f7fe fb88 	bl	800482e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800611e:	2301      	movs	r3, #1
 8006120:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006122:	68fb      	ldr	r3, [r7, #12]
	}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20000f88 	.word	0x20000f88
 8006130:	20000ab0 	.word	0x20000ab0

08006134 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006142:	2301      	movs	r3, #1
 8006144:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d04b      	beq.n	80061e4 <vTaskPriorityDisinheritAfterTimeout+0xb0>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d902      	bls.n	800615c <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	e002      	b.n	8006162 <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006160:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	429a      	cmp	r2, r3
 800616a:	d03b      	beq.n	80061e4 <vTaskPriorityDisinheritAfterTimeout+0xb0>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	429a      	cmp	r2, r3
 8006174:	d136      	bne.n	80061e4 <vTaskPriorityDisinheritAfterTimeout+0xb0>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617a:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	2b00      	cmp	r3, #0
 8006188:	db04      	blt.n	8006194 <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	6959      	ldr	r1, [r3, #20]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4a12      	ldr	r2, [pc, #72]	@ (80061ec <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 80061a4:	4413      	add	r3, r2
 80061a6:	4299      	cmp	r1, r3
 80061a8:	d11c      	bne.n	80061e4 <vTaskPriorityDisinheritAfterTimeout+0xb0>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	3304      	adds	r3, #4
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe fb9a 	bl	80048e8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061b8:	4b0d      	ldr	r3, [pc, #52]	@ (80061f0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d903      	bls.n	80061c8 <vTaskPriorityDisinheritAfterTimeout+0x94>
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c4:	4a0a      	ldr	r2, [pc, #40]	@ (80061f0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4a05      	ldr	r2, [pc, #20]	@ (80061ec <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 80061d6:	441a      	add	r2, r3
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	3304      	adds	r3, #4
 80061dc:	4619      	mov	r1, r3
 80061de:	4610      	mov	r0, r2
 80061e0:	f7fe fb25 	bl	800482e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061e4:	bf00      	nop
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20000ab0 	.word	0x20000ab0
 80061f0:	20000f88 	.word	0x20000f88

080061f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80061f4:	b480      	push	{r7}
 80061f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80061f8:	4b07      	ldr	r3, [pc, #28]	@ (8006218 <pvTaskIncrementMutexHeldCount+0x24>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d004      	beq.n	800620a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006200:	4b05      	ldr	r3, [pc, #20]	@ (8006218 <pvTaskIncrementMutexHeldCount+0x24>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006206:	3201      	adds	r2, #1
 8006208:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800620a:	4b03      	ldr	r3, [pc, #12]	@ (8006218 <pvTaskIncrementMutexHeldCount+0x24>)
 800620c:	681b      	ldr	r3, [r3, #0]
	}
 800620e:	4618      	mov	r0, r3
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	20000aac 	.word	0x20000aac

0800621c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006226:	4b21      	ldr	r3, [pc, #132]	@ (80062ac <prvAddCurrentTaskToDelayedList+0x90>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800622c:	4b20      	ldr	r3, [pc, #128]	@ (80062b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3304      	adds	r3, #4
 8006232:	4618      	mov	r0, r3
 8006234:	f7fe fb58 	bl	80048e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623e:	d10a      	bne.n	8006256 <prvAddCurrentTaskToDelayedList+0x3a>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d007      	beq.n	8006256 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006246:	4b1a      	ldr	r3, [pc, #104]	@ (80062b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3304      	adds	r3, #4
 800624c:	4619      	mov	r1, r3
 800624e:	4819      	ldr	r0, [pc, #100]	@ (80062b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006250:	f7fe faed 	bl	800482e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006254:	e026      	b.n	80062a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4413      	add	r3, r2
 800625c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800625e:	4b14      	ldr	r3, [pc, #80]	@ (80062b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	429a      	cmp	r2, r3
 800626c:	d209      	bcs.n	8006282 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800626e:	4b12      	ldr	r3, [pc, #72]	@ (80062b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	4b0f      	ldr	r3, [pc, #60]	@ (80062b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3304      	adds	r3, #4
 8006278:	4619      	mov	r1, r3
 800627a:	4610      	mov	r0, r2
 800627c:	f7fe fafb 	bl	8004876 <vListInsert>
}
 8006280:	e010      	b.n	80062a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006282:	4b0e      	ldr	r3, [pc, #56]	@ (80062bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	4b0a      	ldr	r3, [pc, #40]	@ (80062b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3304      	adds	r3, #4
 800628c:	4619      	mov	r1, r3
 800628e:	4610      	mov	r0, r2
 8006290:	f7fe faf1 	bl	8004876 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006294:	4b0a      	ldr	r3, [pc, #40]	@ (80062c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	429a      	cmp	r2, r3
 800629c:	d202      	bcs.n	80062a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800629e:	4a08      	ldr	r2, [pc, #32]	@ (80062c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	6013      	str	r3, [r2, #0]
}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000f84 	.word	0x20000f84
 80062b0:	20000aac 	.word	0x20000aac
 80062b4:	20000f6c 	.word	0x20000f6c
 80062b8:	20000f3c 	.word	0x20000f3c
 80062bc:	20000f38 	.word	0x20000f38
 80062c0:	20000fa0 	.word	0x20000fa0

080062c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80062ce:	f000 faab 	bl	8006828 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80062d2:	4b15      	ldr	r3, [pc, #84]	@ (8006328 <xTimerCreateTimerTask+0x64>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d020      	beq.n	800631c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80062de:	2300      	movs	r3, #0
 80062e0:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80062e2:	463a      	mov	r2, r7
 80062e4:	1d39      	adds	r1, r7, #4
 80062e6:	f107 0308 	add.w	r3, r7, #8
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fe fa58 	bl	80047a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062f0:	6839      	ldr	r1, [r7, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	9202      	str	r2, [sp, #8]
 80062f8:	9301      	str	r3, [sp, #4]
 80062fa:	2302      	movs	r3, #2
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	2300      	movs	r3, #0
 8006300:	460a      	mov	r2, r1
 8006302:	490a      	ldr	r1, [pc, #40]	@ (800632c <xTimerCreateTimerTask+0x68>)
 8006304:	480a      	ldr	r0, [pc, #40]	@ (8006330 <xTimerCreateTimerTask+0x6c>)
 8006306:	f7ff f8cd 	bl	80054a4 <xTaskCreateStatic>
 800630a:	4603      	mov	r3, r0
 800630c:	4a09      	ldr	r2, [pc, #36]	@ (8006334 <xTimerCreateTimerTask+0x70>)
 800630e:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006310:	4b08      	ldr	r3, [pc, #32]	@ (8006334 <xTimerCreateTimerTask+0x70>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8006318:	2301      	movs	r3, #1
 800631a:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 800631c:	68fb      	ldr	r3, [r7, #12]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000fdc 	.word	0x20000fdc
 800632c:	080070d4 	.word	0x080070d4
 8006330:	08006439 	.word	0x08006439
 8006334:	20000fe0 	.word	0x20000fe0

08006338 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08a      	sub	sp, #40	@ 0x28
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006346:	2300      	movs	r3, #0
 8006348:	627b      	str	r3, [r7, #36]	@ 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800634a:	4b1a      	ldr	r3, [pc, #104]	@ (80063b4 <xTimerGenericCommand+0x7c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d02a      	beq.n	80063a8 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b05      	cmp	r3, #5
 8006362:	dc18      	bgt.n	8006396 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006364:	f7ff fe14 	bl	8005f90 <xTaskGetSchedulerState>
 8006368:	4603      	mov	r3, r0
 800636a:	2b02      	cmp	r3, #2
 800636c:	d109      	bne.n	8006382 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800636e:	4b11      	ldr	r3, [pc, #68]	@ (80063b4 <xTimerGenericCommand+0x7c>)
 8006370:	6818      	ldr	r0, [r3, #0]
 8006372:	f107 0114 	add.w	r1, r7, #20
 8006376:	2300      	movs	r3, #0
 8006378:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800637a:	f7fe fc43 	bl	8004c04 <xQueueGenericSend>
 800637e:	6278      	str	r0, [r7, #36]	@ 0x24
 8006380:	e012      	b.n	80063a8 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006382:	4b0c      	ldr	r3, [pc, #48]	@ (80063b4 <xTimerGenericCommand+0x7c>)
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	f107 0114 	add.w	r1, r7, #20
 800638a:	2300      	movs	r3, #0
 800638c:	2200      	movs	r2, #0
 800638e:	f7fe fc39 	bl	8004c04 <xQueueGenericSend>
 8006392:	6278      	str	r0, [r7, #36]	@ 0x24
 8006394:	e008      	b.n	80063a8 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006396:	4b07      	ldr	r3, [pc, #28]	@ (80063b4 <xTimerGenericCommand+0x7c>)
 8006398:	6818      	ldr	r0, [r3, #0]
 800639a:	f107 0114 	add.w	r1, r7, #20
 800639e:	2300      	movs	r3, #0
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	f7fe fcd9 	bl	8004d58 <xQueueGenericSendFromISR>
 80063a6:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80063a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3728      	adds	r7, #40	@ 0x28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000fdc 	.word	0x20000fdc

080063b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af02      	add	r7, sp, #8
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c2:	4b1c      	ldr	r3, [pc, #112]	@ (8006434 <prvProcessExpiredTimer+0x7c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe fa89 	bl	80048e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d015      	beq.n	8006410 <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	699a      	ldr	r2, [r3, #24]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	18d1      	adds	r1, r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 f8c7 	bl	8006584 <prvInsertTimerInActiveList>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d012      	beq.n	8006422 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063fc:	2300      	movs	r3, #0
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	2300      	movs	r3, #0
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	2100      	movs	r1, #0
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f7ff ff96 	bl	8006338 <xTimerGenericCommand>
 800640c:	60b8      	str	r0, [r7, #8]
 800640e:	e008      	b.n	8006422 <prvProcessExpiredTimer+0x6a>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006416:	f023 0301 	bic.w	r3, r3, #1
 800641a:	b2da      	uxtb	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	4798      	blx	r3
}
 800642a:	bf00      	nop
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20000fd4 	.word	0x20000fd4

08006438 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006440:	f107 0308 	add.w	r3, r7, #8
 8006444:	4618      	mov	r0, r3
 8006446:	f000 f859 	bl	80064fc <prvGetNextExpireTime>
 800644a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4619      	mov	r1, r3
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 f805 	bl	8006460 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006456:	f000 f8d7 	bl	8006608 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800645a:	bf00      	nop
 800645c:	e7f0      	b.n	8006440 <prvTimerTask+0x8>
	...

08006460 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800646a:	f7ff fa1b 	bl	80058a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800646e:	f107 0308 	add.w	r3, r7, #8
 8006472:	4618      	mov	r0, r3
 8006474:	f000 f866 	bl	8006544 <prvSampleTimeNow>
 8006478:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d130      	bne.n	80064e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10a      	bne.n	800649c <prvProcessTimerOrBlockTask+0x3c>
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	429a      	cmp	r2, r3
 800648c:	d806      	bhi.n	800649c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800648e:	f7ff fa17 	bl	80058c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006492:	68f9      	ldr	r1, [r7, #12]
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff ff8f 	bl	80063b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800649a:	e024      	b.n	80064e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d008      	beq.n	80064b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064a2:	4b13      	ldr	r3, [pc, #76]	@ (80064f0 <prvProcessTimerOrBlockTask+0x90>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <prvProcessTimerOrBlockTask+0x50>
 80064ac:	2301      	movs	r3, #1
 80064ae:	e000      	b.n	80064b2 <prvProcessTimerOrBlockTask+0x52>
 80064b0:	2300      	movs	r3, #0
 80064b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80064b4:	4b0f      	ldr	r3, [pc, #60]	@ (80064f4 <prvProcessTimerOrBlockTask+0x94>)
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	4619      	mov	r1, r3
 80064c2:	f7fe ffbb 	bl	800543c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80064c6:	f7ff f9fb 	bl	80058c0 <xTaskResumeAll>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10a      	bne.n	80064e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064d0:	4b09      	ldr	r3, [pc, #36]	@ (80064f8 <prvProcessTimerOrBlockTask+0x98>)
 80064d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	f3bf 8f6f 	isb	sy
}
 80064e0:	e001      	b.n	80064e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064e2:	f7ff f9ed 	bl	80058c0 <xTaskResumeAll>
}
 80064e6:	bf00      	nop
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20000fd8 	.word	0x20000fd8
 80064f4:	20000fdc 	.word	0x20000fdc
 80064f8:	e000ed04 	.word	0xe000ed04

080064fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006504:	4b0e      	ldr	r3, [pc, #56]	@ (8006540 <prvGetNextExpireTime+0x44>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <prvGetNextExpireTime+0x16>
 800650e:	2201      	movs	r2, #1
 8006510:	e000      	b.n	8006514 <prvGetNextExpireTime+0x18>
 8006512:	2200      	movs	r2, #0
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d105      	bne.n	800652c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006520:	4b07      	ldr	r3, [pc, #28]	@ (8006540 <prvGetNextExpireTime+0x44>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	60fb      	str	r3, [r7, #12]
 800652a:	e001      	b.n	8006530 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006530:	68fb      	ldr	r3, [r7, #12]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20000fd4 	.word	0x20000fd4

08006544 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800654c:	f7ff fa46 	bl	80059dc <xTaskGetTickCount>
 8006550:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006552:	4b0b      	ldr	r3, [pc, #44]	@ (8006580 <prvSampleTimeNow+0x3c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	429a      	cmp	r2, r3
 800655a:	d205      	bcs.n	8006568 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800655c:	f000 f90e 	bl	800677c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	e002      	b.n	800656e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800656e:	4a04      	ldr	r2, [pc, #16]	@ (8006580 <prvSampleTimeNow+0x3c>)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006574:	68fb      	ldr	r3, [r7, #12]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000fe4 	.word	0x20000fe4

08006584 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006592:	2300      	movs	r3, #0
 8006594:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d812      	bhi.n	80065d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	1ad2      	subs	r2, r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d302      	bcc.n	80065be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80065b8:	2301      	movs	r3, #1
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	e01b      	b.n	80065f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065be:	4b10      	ldr	r3, [pc, #64]	@ (8006600 <prvInsertTimerInActiveList+0x7c>)
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3304      	adds	r3, #4
 80065c6:	4619      	mov	r1, r3
 80065c8:	4610      	mov	r0, r2
 80065ca:	f7fe f954 	bl	8004876 <vListInsert>
 80065ce:	e012      	b.n	80065f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d206      	bcs.n	80065e6 <prvInsertTimerInActiveList+0x62>
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d302      	bcc.n	80065e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065e0:	2301      	movs	r3, #1
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	e007      	b.n	80065f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065e6:	4b07      	ldr	r3, [pc, #28]	@ (8006604 <prvInsertTimerInActiveList+0x80>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3304      	adds	r3, #4
 80065ee:	4619      	mov	r1, r3
 80065f0:	4610      	mov	r0, r2
 80065f2:	f7fe f940 	bl	8004876 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065f6:	697b      	ldr	r3, [r7, #20]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	20000fd8 	.word	0x20000fd8
 8006604:	20000fd4 	.word	0x20000fd4

08006608 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08c      	sub	sp, #48	@ 0x30
 800660c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800660e:	e0a2      	b.n	8006756 <prvProcessReceivedCommands+0x14e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	da0b      	bge.n	800662e <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006616:	f107 0308 	add.w	r3, r7, #8
 800661a:	3304      	adds	r3, #4
 800661c:	627b      	str	r3, [r7, #36]	@ 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006624:	6850      	ldr	r0, [r2, #4]
 8006626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006628:	6892      	ldr	r2, [r2, #8]
 800662a:	4611      	mov	r1, r2
 800662c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	f2c0 8090 	blt.w	8006756 <prvProcessReceivedCommands+0x14e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d004      	beq.n	800664c <prvProcessReceivedCommands+0x44>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	3304      	adds	r3, #4
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe f94e 	bl	80048e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800664c:	1d3b      	adds	r3, r7, #4
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff ff78 	bl	8006544 <prvSampleTimeNow>
 8006654:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	2b09      	cmp	r3, #9
 800665a:	d879      	bhi.n	8006750 <prvProcessReceivedCommands+0x148>
 800665c:	a201      	add	r2, pc, #4	@ (adr r2, 8006664 <prvProcessReceivedCommands+0x5c>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	0800668d 	.word	0x0800668d
 8006668:	0800668d 	.word	0x0800668d
 800666c:	0800668d 	.word	0x0800668d
 8006670:	080066e7 	.word	0x080066e7
 8006674:	080066fb 	.word	0x080066fb
 8006678:	08006727 	.word	0x08006727
 800667c:	0800668d 	.word	0x0800668d
 8006680:	0800668d 	.word	0x0800668d
 8006684:	080066e7 	.word	0x080066e7
 8006688:	080066fb 	.word	0x080066fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006692:	f043 0301 	orr.w	r3, r3, #1
 8006696:	b2da      	uxtb	r2, r3
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	18d1      	adds	r1, r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	69fa      	ldr	r2, [r7, #28]
 80066aa:	6a38      	ldr	r0, [r7, #32]
 80066ac:	f7ff ff6a 	bl	8006584 <prvInsertTimerInActiveList>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d04e      	beq.n	8006754 <prvProcessReceivedCommands+0x14c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	6a38      	ldr	r0, [r7, #32]
 80066bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d043      	beq.n	8006754 <prvProcessReceivedCommands+0x14c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	441a      	add	r2, r3
 80066d4:	2300      	movs	r3, #0
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	2300      	movs	r3, #0
 80066da:	2100      	movs	r1, #0
 80066dc:	6a38      	ldr	r0, [r7, #32]
 80066de:	f7ff fe2b 	bl	8006338 <xTimerGenericCommand>
 80066e2:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 80066e4:	e036      	b.n	8006754 <prvProcessReceivedCommands+0x14c>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066ec:	f023 0301 	bic.w	r3, r3, #1
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80066f8:	e02d      	b.n	8006756 <prvProcessReceivedCommands+0x14e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006700:	f043 0301 	orr.w	r3, r3, #1
 8006704:	b2da      	uxtb	r2, r3
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	699a      	ldr	r2, [r3, #24]
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	18d1      	adds	r1, r2, r3
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	6a38      	ldr	r0, [r7, #32]
 8006720:	f7ff ff30 	bl	8006584 <prvInsertTimerInActiveList>
					break;
 8006724:	e017      	b.n	8006756 <prvProcessReceivedCommands+0x14e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d103      	bne.n	800673c <prvProcessReceivedCommands+0x134>
						{
							vPortFree( pxTimer );
 8006734:	6a38      	ldr	r0, [r7, #32]
 8006736:	f000 fab1 	bl	8006c9c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800673a:	e00c      	b.n	8006756 <prvProcessReceivedCommands+0x14e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006742:	f023 0301 	bic.w	r3, r3, #1
 8006746:	b2da      	uxtb	r2, r3
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800674e:	e002      	b.n	8006756 <prvProcessReceivedCommands+0x14e>

				default	:
					/* Don't expect to get here. */
					break;
 8006750:	bf00      	nop
 8006752:	e000      	b.n	8006756 <prvProcessReceivedCommands+0x14e>
					break;
 8006754:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006756:	4b08      	ldr	r3, [pc, #32]	@ (8006778 <prvProcessReceivedCommands+0x170>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f107 0108 	add.w	r1, r7, #8
 800675e:	2200      	movs	r2, #0
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe fb57 	bl	8004e14 <xQueueReceive>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	f47f af51 	bne.w	8006610 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800676e:	bf00      	nop
 8006770:	bf00      	nop
 8006772:	3728      	adds	r7, #40	@ 0x28
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20000fdc 	.word	0x20000fdc

0800677c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b088      	sub	sp, #32
 8006780:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006782:	e03a      	b.n	80067fa <prvSwitchTimerLists+0x7e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006784:	4b26      	ldr	r3, [pc, #152]	@ (8006820 <prvSwitchTimerLists+0xa4>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800678e:	4b24      	ldr	r3, [pc, #144]	@ (8006820 <prvSwitchTimerLists+0xa4>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3304      	adds	r3, #4
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe f8a3 	bl	80048e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d020      	beq.n	80067fa <prvSwitchTimerLists+0x7e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4413      	add	r3, r2
 80067c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d90e      	bls.n	80067e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067d6:	4b12      	ldr	r3, [pc, #72]	@ (8006820 <prvSwitchTimerLists+0xa4>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3304      	adds	r3, #4
 80067de:	4619      	mov	r1, r3
 80067e0:	4610      	mov	r0, r2
 80067e2:	f7fe f848 	bl	8004876 <vListInsert>
 80067e6:	e008      	b.n	80067fa <prvSwitchTimerLists+0x7e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067e8:	2300      	movs	r3, #0
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	2300      	movs	r3, #0
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	2100      	movs	r1, #0
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f7ff fda0 	bl	8006338 <xTimerGenericCommand>
 80067f8:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067fa:	4b09      	ldr	r3, [pc, #36]	@ (8006820 <prvSwitchTimerLists+0xa4>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1bf      	bne.n	8006784 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006804:	4b06      	ldr	r3, [pc, #24]	@ (8006820 <prvSwitchTimerLists+0xa4>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800680a:	4b06      	ldr	r3, [pc, #24]	@ (8006824 <prvSwitchTimerLists+0xa8>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a04      	ldr	r2, [pc, #16]	@ (8006820 <prvSwitchTimerLists+0xa4>)
 8006810:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006812:	4a04      	ldr	r2, [pc, #16]	@ (8006824 <prvSwitchTimerLists+0xa8>)
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	6013      	str	r3, [r2, #0]
}
 8006818:	bf00      	nop
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	20000fd4 	.word	0x20000fd4
 8006824:	20000fd8 	.word	0x20000fd8

08006828 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800682e:	f000 f8e1 	bl	80069f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006832:	4b15      	ldr	r3, [pc, #84]	@ (8006888 <prvCheckForValidListAndQueue+0x60>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d120      	bne.n	800687c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800683a:	4814      	ldr	r0, [pc, #80]	@ (800688c <prvCheckForValidListAndQueue+0x64>)
 800683c:	f7fd ffca 	bl	80047d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006840:	4813      	ldr	r0, [pc, #76]	@ (8006890 <prvCheckForValidListAndQueue+0x68>)
 8006842:	f7fd ffc7 	bl	80047d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006846:	4b13      	ldr	r3, [pc, #76]	@ (8006894 <prvCheckForValidListAndQueue+0x6c>)
 8006848:	4a10      	ldr	r2, [pc, #64]	@ (800688c <prvCheckForValidListAndQueue+0x64>)
 800684a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800684c:	4b12      	ldr	r3, [pc, #72]	@ (8006898 <prvCheckForValidListAndQueue+0x70>)
 800684e:	4a10      	ldr	r2, [pc, #64]	@ (8006890 <prvCheckForValidListAndQueue+0x68>)
 8006850:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006852:	2300      	movs	r3, #0
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	4b11      	ldr	r3, [pc, #68]	@ (800689c <prvCheckForValidListAndQueue+0x74>)
 8006858:	4a11      	ldr	r2, [pc, #68]	@ (80068a0 <prvCheckForValidListAndQueue+0x78>)
 800685a:	2110      	movs	r1, #16
 800685c:	200a      	movs	r0, #10
 800685e:	f7fe f8c7 	bl	80049f0 <xQueueGenericCreateStatic>
 8006862:	4603      	mov	r3, r0
 8006864:	4a08      	ldr	r2, [pc, #32]	@ (8006888 <prvCheckForValidListAndQueue+0x60>)
 8006866:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006868:	4b07      	ldr	r3, [pc, #28]	@ (8006888 <prvCheckForValidListAndQueue+0x60>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d005      	beq.n	800687c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006870:	4b05      	ldr	r3, [pc, #20]	@ (8006888 <prvCheckForValidListAndQueue+0x60>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	490b      	ldr	r1, [pc, #44]	@ (80068a4 <prvCheckForValidListAndQueue+0x7c>)
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe fdb6 	bl	80053e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800687c:	f000 f8d4 	bl	8006a28 <vPortExitCritical>
}
 8006880:	bf00      	nop
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000fdc 	.word	0x20000fdc
 800688c:	20000fac 	.word	0x20000fac
 8006890:	20000fc0 	.word	0x20000fc0
 8006894:	20000fd4 	.word	0x20000fd4
 8006898:	20000fd8 	.word	0x20000fd8
 800689c:	20001088 	.word	0x20001088
 80068a0:	20000fe8 	.word	0x20000fe8
 80068a4:	080070dc 	.word	0x080070dc

080068a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3b04      	subs	r3, #4
 80068b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3b04      	subs	r3, #4
 80068c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f023 0201 	bic.w	r2, r3, #1
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3b04      	subs	r3, #4
 80068d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068d8:	4a0c      	ldr	r2, [pc, #48]	@ (800690c <pxPortInitialiseStack+0x64>)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3b14      	subs	r3, #20
 80068e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3b04      	subs	r3, #4
 80068ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f06f 0202 	mvn.w	r2, #2
 80068f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3b20      	subs	r3, #32
 80068fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068fe:	68fb      	ldr	r3, [r7, #12]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	08006911 	.word	0x08006911

08006910 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	603b      	str	r3, [r7, #0]
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	607b      	str	r3, [r7, #4]
}
 800692c:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800692e:	bf00      	nop
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0fc      	beq.n	8006930 <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006936:	bf00      	nop
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
	...

08006950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006950:	4b07      	ldr	r3, [pc, #28]	@ (8006970 <pxCurrentTCBConst2>)
 8006952:	6819      	ldr	r1, [r3, #0]
 8006954:	6808      	ldr	r0, [r1, #0]
 8006956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695a:	f380 8809 	msr	PSP, r0
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f04f 0000 	mov.w	r0, #0
 8006966:	f380 8811 	msr	BASEPRI, r0
 800696a:	4770      	bx	lr
 800696c:	f3af 8000 	nop.w

08006970 <pxCurrentTCBConst2>:
 8006970:	20000aac 	.word	0x20000aac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop

08006978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006978:	4808      	ldr	r0, [pc, #32]	@ (800699c <prvPortStartFirstTask+0x24>)
 800697a:	6800      	ldr	r0, [r0, #0]
 800697c:	6800      	ldr	r0, [r0, #0]
 800697e:	f380 8808 	msr	MSP, r0
 8006982:	f04f 0000 	mov.w	r0, #0
 8006986:	f380 8814 	msr	CONTROL, r0
 800698a:	b662      	cpsie	i
 800698c:	b661      	cpsie	f
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	df00      	svc	0
 8006998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800699a:	bf00      	nop
 800699c:	e000ed08 	.word	0xe000ed08

080069a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069a4:	4b10      	ldr	r3, [pc, #64]	@ (80069e8 <xPortStartScheduler+0x48>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a0f      	ldr	r2, [pc, #60]	@ (80069e8 <xPortStartScheduler+0x48>)
 80069aa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80069ae:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069b0:	4b0d      	ldr	r3, [pc, #52]	@ (80069e8 <xPortStartScheduler+0x48>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a0c      	ldr	r2, [pc, #48]	@ (80069e8 <xPortStartScheduler+0x48>)
 80069b6:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80069ba:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069bc:	f000 f8a6 	bl	8006b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069c0:	4b0a      	ldr	r3, [pc, #40]	@ (80069ec <xPortStartScheduler+0x4c>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069c6:	f000 f8c5 	bl	8006b54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069ca:	4b09      	ldr	r3, [pc, #36]	@ (80069f0 <xPortStartScheduler+0x50>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a08      	ldr	r2, [pc, #32]	@ (80069f0 <xPortStartScheduler+0x50>)
 80069d0:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80069d4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069d6:	f7ff ffcf 	bl	8006978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069da:	f7ff f8b7 	bl	8005b4c <vTaskSwitchContext>
	prvTaskExitError();
 80069de:	f7ff ff97 	bl	8006910 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	e000ed20 	.word	0xe000ed20
 80069ec:	200000c0 	.word	0x200000c0
 80069f0:	e000ef34 	.word	0xe000ef34

080069f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	607b      	str	r3, [r7, #4]
}
 8006a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a0e:	4b05      	ldr	r3, [pc, #20]	@ (8006a24 <vPortEnterCritical+0x30>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3301      	adds	r3, #1
 8006a14:	4a03      	ldr	r2, [pc, #12]	@ (8006a24 <vPortEnterCritical+0x30>)
 8006a16:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	200000c0 	.word	0x200000c0

08006a28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8006a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a58 <vPortExitCritical+0x30>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	4a08      	ldr	r2, [pc, #32]	@ (8006a58 <vPortExitCritical+0x30>)
 8006a36:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a38:	4b07      	ldr	r3, [pc, #28]	@ (8006a58 <vPortExitCritical+0x30>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d105      	bne.n	8006a4c <vPortExitCritical+0x24>
 8006a40:	2300      	movs	r3, #0
 8006a42:	607b      	str	r3, [r7, #4]
	__asm volatile
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f383 8811 	msr	BASEPRI, r3
}
 8006a4a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	200000c0 	.word	0x200000c0
 8006a5c:	00000000 	.word	0x00000000

08006a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a60:	f3ef 8009 	mrs	r0, PSP
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	4b15      	ldr	r3, [pc, #84]	@ (8006ac0 <pxCurrentTCBConst>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	f01e 0f10 	tst.w	lr, #16
 8006a70:	bf08      	it	eq
 8006a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7a:	6010      	str	r0, [r2, #0]
 8006a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a84:	f380 8811 	msr	BASEPRI, r0
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f7ff f85c 	bl	8005b4c <vTaskSwitchContext>
 8006a94:	f04f 0000 	mov.w	r0, #0
 8006a98:	f380 8811 	msr	BASEPRI, r0
 8006a9c:	bc09      	pop	{r0, r3}
 8006a9e:	6819      	ldr	r1, [r3, #0]
 8006aa0:	6808      	ldr	r0, [r1, #0]
 8006aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa6:	f01e 0f10 	tst.w	lr, #16
 8006aaa:	bf08      	it	eq
 8006aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ab0:	f380 8809 	msr	PSP, r0
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	f3af 8000 	nop.w

08006ac0 <pxCurrentTCBConst>:
 8006ac0:	20000aac 	.word	0x20000aac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop

08006ac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	607b      	str	r3, [r7, #4]
}
 8006ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ae2:	f7fe ff8b 	bl	80059fc <xTaskIncrementTick>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006aec:	4b06      	ldr	r3, [pc, #24]	@ (8006b08 <xPortSysTickHandler+0x40>)
 8006aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	2300      	movs	r3, #0
 8006af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	f383 8811 	msr	BASEPRI, r3
}
 8006afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b00:	bf00      	nop
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	e000ed04 	.word	0xe000ed04

08006b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b10:	4b0b      	ldr	r3, [pc, #44]	@ (8006b40 <vPortSetupTimerInterrupt+0x34>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b16:	4b0b      	ldr	r3, [pc, #44]	@ (8006b44 <vPortSetupTimerInterrupt+0x38>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b48 <vPortSetupTimerInterrupt+0x3c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a0a      	ldr	r2, [pc, #40]	@ (8006b4c <vPortSetupTimerInterrupt+0x40>)
 8006b22:	fba2 2303 	umull	r2, r3, r2, r3
 8006b26:	099b      	lsrs	r3, r3, #6
 8006b28:	4a09      	ldr	r2, [pc, #36]	@ (8006b50 <vPortSetupTimerInterrupt+0x44>)
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b2e:	4b04      	ldr	r3, [pc, #16]	@ (8006b40 <vPortSetupTimerInterrupt+0x34>)
 8006b30:	2207      	movs	r2, #7
 8006b32:	601a      	str	r2, [r3, #0]
}
 8006b34:	bf00      	nop
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	e000e010 	.word	0xe000e010
 8006b44:	e000e018 	.word	0xe000e018
 8006b48:	20000000 	.word	0x20000000
 8006b4c:	10624dd3 	.word	0x10624dd3
 8006b50:	e000e014 	.word	0xe000e014

08006b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006b64 <vPortEnableVFP+0x10>
 8006b58:	6801      	ldr	r1, [r0, #0]
 8006b5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006b5e:	6001      	str	r1, [r0, #0]
 8006b60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b62:	bf00      	nop
 8006b64:	e000ed88 	.word	0xe000ed88

08006b68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8006b74:	f7fe fe96 	bl	80058a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b78:	4b42      	ldr	r3, [pc, #264]	@ (8006c84 <pvPortMalloc+0x11c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b80:	f000 f8cc 	bl	8006d1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b84:	4b40      	ldr	r3, [pc, #256]	@ (8006c88 <pvPortMalloc+0x120>)
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d172      	bne.n	8006c76 <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00d      	beq.n	8006bb2 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8006b96:	2208      	movs	r2, #8
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d004      	beq.n	8006bb2 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f023 0307 	bic.w	r3, r3, #7
 8006bae:	3308      	adds	r3, #8
 8006bb0:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d05e      	beq.n	8006c76 <pvPortMalloc+0x10e>
 8006bb8:	4b34      	ldr	r3, [pc, #208]	@ (8006c8c <pvPortMalloc+0x124>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d859      	bhi.n	8006c76 <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006bc2:	4b33      	ldr	r3, [pc, #204]	@ (8006c90 <pvPortMalloc+0x128>)
 8006bc4:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006bc6:	4b32      	ldr	r3, [pc, #200]	@ (8006c90 <pvPortMalloc+0x128>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bcc:	e004      	b.n	8006bd8 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d903      	bls.n	8006bea <pvPortMalloc+0x82>
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1f1      	bne.n	8006bce <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bea:	4b26      	ldr	r3, [pc, #152]	@ (8006c84 <pvPortMalloc+0x11c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d040      	beq.n	8006c76 <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	4413      	add	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	1ad2      	subs	r2, r2, r3
 8006c0e:	2308      	movs	r3, #8
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d90f      	bls.n	8006c36 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	1ad2      	subs	r2, r2, r3
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c30:	68b8      	ldr	r0, [r7, #8]
 8006c32:	f000 f8d5 	bl	8006de0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c36:	4b15      	ldr	r3, [pc, #84]	@ (8006c8c <pvPortMalloc+0x124>)
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	4a12      	ldr	r2, [pc, #72]	@ (8006c8c <pvPortMalloc+0x124>)
 8006c42:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c44:	4b11      	ldr	r3, [pc, #68]	@ (8006c8c <pvPortMalloc+0x124>)
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	4b12      	ldr	r3, [pc, #72]	@ (8006c94 <pvPortMalloc+0x12c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d203      	bcs.n	8006c58 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c50:	4b0e      	ldr	r3, [pc, #56]	@ (8006c8c <pvPortMalloc+0x124>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a0f      	ldr	r2, [pc, #60]	@ (8006c94 <pvPortMalloc+0x12c>)
 8006c56:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c88 <pvPortMalloc+0x120>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	431a      	orrs	r2, r3
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c98 <pvPortMalloc+0x130>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3301      	adds	r3, #1
 8006c72:	4a09      	ldr	r2, [pc, #36]	@ (8006c98 <pvPortMalloc+0x130>)
 8006c74:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c76:	f7fe fe23 	bl	80058c0 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20004ce0 	.word	0x20004ce0
 8006c88:	20004cf4 	.word	0x20004cf4
 8006c8c:	20004ce4 	.word	0x20004ce4
 8006c90:	20004cd8 	.word	0x20004cd8
 8006c94:	20004ce8 	.word	0x20004ce8
 8006c98:	20004cec 	.word	0x20004cec

08006c9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d02c      	beq.n	8006d08 <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cae:	2308      	movs	r3, #8
 8006cb0:	425b      	negs	r3, r3
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	4b13      	ldr	r3, [pc, #76]	@ (8006d10 <vPortFree+0x74>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d01e      	beq.n	8006d08 <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d11a      	bne.n	8006d08 <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8006d10 <vPortFree+0x74>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	43db      	mvns	r3, r3
 8006cdc:	401a      	ands	r2, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ce2:	f7fe fddf 	bl	80058a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	4b0a      	ldr	r3, [pc, #40]	@ (8006d14 <vPortFree+0x78>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4413      	add	r3, r2
 8006cf0:	4a08      	ldr	r2, [pc, #32]	@ (8006d14 <vPortFree+0x78>)
 8006cf2:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cf4:	68b8      	ldr	r0, [r7, #8]
 8006cf6:	f000 f873 	bl	8006de0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006cfa:	4b07      	ldr	r3, [pc, #28]	@ (8006d18 <vPortFree+0x7c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	4a05      	ldr	r2, [pc, #20]	@ (8006d18 <vPortFree+0x7c>)
 8006d02:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d04:	f7fe fddc 	bl	80058c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d08:	bf00      	nop
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20004cf4 	.word	0x20004cf4
 8006d14:	20004ce4 	.word	0x20004ce4
 8006d18:	20004cf0 	.word	0x20004cf0

08006d1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d22:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006d26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d28:	4b27      	ldr	r3, [pc, #156]	@ (8006dc8 <prvHeapInit+0xac>)
 8006d2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00c      	beq.n	8006d50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	3307      	adds	r3, #7
 8006d3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0307 	bic.w	r3, r3, #7
 8006d42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8006dc8 <prvHeapInit+0xac>)
 8006d4c:	4413      	add	r3, r2
 8006d4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d54:	4a1d      	ldr	r2, [pc, #116]	@ (8006dcc <prvHeapInit+0xb0>)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8006dcc <prvHeapInit+0xb0>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	4413      	add	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d68:	2208      	movs	r2, #8
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	1a9b      	subs	r3, r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 0307 	bic.w	r3, r3, #7
 8006d76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4a15      	ldr	r2, [pc, #84]	@ (8006dd0 <prvHeapInit+0xb4>)
 8006d7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d7e:	4b14      	ldr	r3, [pc, #80]	@ (8006dd0 <prvHeapInit+0xb4>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2200      	movs	r2, #0
 8006d84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d86:	4b12      	ldr	r3, [pc, #72]	@ (8006dd0 <prvHeapInit+0xb4>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	1ad2      	subs	r2, r2, r3
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd0 <prvHeapInit+0xb4>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	4a0a      	ldr	r2, [pc, #40]	@ (8006dd4 <prvHeapInit+0xb8>)
 8006daa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	4a09      	ldr	r2, [pc, #36]	@ (8006dd8 <prvHeapInit+0xbc>)
 8006db2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006db4:	4b09      	ldr	r3, [pc, #36]	@ (8006ddc <prvHeapInit+0xc0>)
 8006db6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006dba:	601a      	str	r2, [r3, #0]
}
 8006dbc:	bf00      	nop
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	200010d8 	.word	0x200010d8
 8006dcc:	20004cd8 	.word	0x20004cd8
 8006dd0:	20004ce0 	.word	0x20004ce0
 8006dd4:	20004ce8 	.word	0x20004ce8
 8006dd8:	20004ce4 	.word	0x20004ce4
 8006ddc:	20004cf4 	.word	0x20004cf4

08006de0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006de8:	4b28      	ldr	r3, [pc, #160]	@ (8006e8c <prvInsertBlockIntoFreeList+0xac>)
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	e002      	b.n	8006df4 <prvInsertBlockIntoFreeList+0x14>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d8f7      	bhi.n	8006dee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	4413      	add	r3, r2
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d108      	bne.n	8006e22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	441a      	add	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	441a      	add	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d118      	bne.n	8006e68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	4b15      	ldr	r3, [pc, #84]	@ (8006e90 <prvInsertBlockIntoFreeList+0xb0>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d00d      	beq.n	8006e5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	441a      	add	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	e008      	b.n	8006e70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e90 <prvInsertBlockIntoFreeList+0xb0>)
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	e003      	b.n	8006e70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d002      	beq.n	8006e7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e7e:	bf00      	nop
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	20004cd8 	.word	0x20004cd8
 8006e90:	20004ce0 	.word	0x20004ce0

08006e94 <memset>:
 8006e94:	4402      	add	r2, r0
 8006e96:	4603      	mov	r3, r0
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d100      	bne.n	8006e9e <memset+0xa>
 8006e9c:	4770      	bx	lr
 8006e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006ea2:	e7f9      	b.n	8006e98 <memset+0x4>

08006ea4 <_reclaim_reent>:
 8006ea4:	4b29      	ldr	r3, [pc, #164]	@ (8006f4c <_reclaim_reent+0xa8>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4283      	cmp	r3, r0
 8006eaa:	b570      	push	{r4, r5, r6, lr}
 8006eac:	4604      	mov	r4, r0
 8006eae:	d04b      	beq.n	8006f48 <_reclaim_reent+0xa4>
 8006eb0:	69c3      	ldr	r3, [r0, #28]
 8006eb2:	b1ab      	cbz	r3, 8006ee0 <_reclaim_reent+0x3c>
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	b16b      	cbz	r3, 8006ed4 <_reclaim_reent+0x30>
 8006eb8:	2500      	movs	r5, #0
 8006eba:	69e3      	ldr	r3, [r4, #28]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	5959      	ldr	r1, [r3, r5]
 8006ec0:	2900      	cmp	r1, #0
 8006ec2:	d13b      	bne.n	8006f3c <_reclaim_reent+0x98>
 8006ec4:	3504      	adds	r5, #4
 8006ec6:	2d80      	cmp	r5, #128	@ 0x80
 8006ec8:	d1f7      	bne.n	8006eba <_reclaim_reent+0x16>
 8006eca:	69e3      	ldr	r3, [r4, #28]
 8006ecc:	4620      	mov	r0, r4
 8006ece:	68d9      	ldr	r1, [r3, #12]
 8006ed0:	f000 f872 	bl	8006fb8 <_free_r>
 8006ed4:	69e3      	ldr	r3, [r4, #28]
 8006ed6:	6819      	ldr	r1, [r3, #0]
 8006ed8:	b111      	cbz	r1, 8006ee0 <_reclaim_reent+0x3c>
 8006eda:	4620      	mov	r0, r4
 8006edc:	f000 f86c 	bl	8006fb8 <_free_r>
 8006ee0:	6961      	ldr	r1, [r4, #20]
 8006ee2:	b111      	cbz	r1, 8006eea <_reclaim_reent+0x46>
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f000 f867 	bl	8006fb8 <_free_r>
 8006eea:	69e1      	ldr	r1, [r4, #28]
 8006eec:	b111      	cbz	r1, 8006ef4 <_reclaim_reent+0x50>
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f000 f862 	bl	8006fb8 <_free_r>
 8006ef4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006ef6:	b111      	cbz	r1, 8006efe <_reclaim_reent+0x5a>
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f000 f85d 	bl	8006fb8 <_free_r>
 8006efe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f00:	b111      	cbz	r1, 8006f08 <_reclaim_reent+0x64>
 8006f02:	4620      	mov	r0, r4
 8006f04:	f000 f858 	bl	8006fb8 <_free_r>
 8006f08:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006f0a:	b111      	cbz	r1, 8006f12 <_reclaim_reent+0x6e>
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f000 f853 	bl	8006fb8 <_free_r>
 8006f12:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006f14:	b111      	cbz	r1, 8006f1c <_reclaim_reent+0x78>
 8006f16:	4620      	mov	r0, r4
 8006f18:	f000 f84e 	bl	8006fb8 <_free_r>
 8006f1c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006f1e:	b111      	cbz	r1, 8006f26 <_reclaim_reent+0x82>
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 f849 	bl	8006fb8 <_free_r>
 8006f26:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006f28:	b111      	cbz	r1, 8006f30 <_reclaim_reent+0x8c>
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f000 f844 	bl	8006fb8 <_free_r>
 8006f30:	6a23      	ldr	r3, [r4, #32]
 8006f32:	b14b      	cbz	r3, 8006f48 <_reclaim_reent+0xa4>
 8006f34:	4620      	mov	r0, r4
 8006f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f3a:	4718      	bx	r3
 8006f3c:	680e      	ldr	r6, [r1, #0]
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f000 f83a 	bl	8006fb8 <_free_r>
 8006f44:	4631      	mov	r1, r6
 8006f46:	e7bb      	b.n	8006ec0 <_reclaim_reent+0x1c>
 8006f48:	bd70      	pop	{r4, r5, r6, pc}
 8006f4a:	bf00      	nop
 8006f4c:	200000c4 	.word	0x200000c4

08006f50 <__libc_init_array>:
 8006f50:	b570      	push	{r4, r5, r6, lr}
 8006f52:	4d0d      	ldr	r5, [pc, #52]	@ (8006f88 <__libc_init_array+0x38>)
 8006f54:	4c0d      	ldr	r4, [pc, #52]	@ (8006f8c <__libc_init_array+0x3c>)
 8006f56:	1b64      	subs	r4, r4, r5
 8006f58:	10a4      	asrs	r4, r4, #2
 8006f5a:	2600      	movs	r6, #0
 8006f5c:	42a6      	cmp	r6, r4
 8006f5e:	d109      	bne.n	8006f74 <__libc_init_array+0x24>
 8006f60:	4d0b      	ldr	r5, [pc, #44]	@ (8006f90 <__libc_init_array+0x40>)
 8006f62:	4c0c      	ldr	r4, [pc, #48]	@ (8006f94 <__libc_init_array+0x44>)
 8006f64:	f000 f87e 	bl	8007064 <_init>
 8006f68:	1b64      	subs	r4, r4, r5
 8006f6a:	10a4      	asrs	r4, r4, #2
 8006f6c:	2600      	movs	r6, #0
 8006f6e:	42a6      	cmp	r6, r4
 8006f70:	d105      	bne.n	8006f7e <__libc_init_array+0x2e>
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f78:	4798      	blx	r3
 8006f7a:	3601      	adds	r6, #1
 8006f7c:	e7ee      	b.n	8006f5c <__libc_init_array+0xc>
 8006f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f82:	4798      	blx	r3
 8006f84:	3601      	adds	r6, #1
 8006f86:	e7f2      	b.n	8006f6e <__libc_init_array+0x1e>
 8006f88:	0800712c 	.word	0x0800712c
 8006f8c:	0800712c 	.word	0x0800712c
 8006f90:	0800712c 	.word	0x0800712c
 8006f94:	08007130 	.word	0x08007130

08006f98 <__retarget_lock_acquire_recursive>:
 8006f98:	4770      	bx	lr

08006f9a <__retarget_lock_release_recursive>:
 8006f9a:	4770      	bx	lr

08006f9c <memcpy>:
 8006f9c:	440a      	add	r2, r1
 8006f9e:	4291      	cmp	r1, r2
 8006fa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fa4:	d100      	bne.n	8006fa8 <memcpy+0xc>
 8006fa6:	4770      	bx	lr
 8006fa8:	b510      	push	{r4, lr}
 8006faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fb2:	4291      	cmp	r1, r2
 8006fb4:	d1f9      	bne.n	8006faa <memcpy+0xe>
 8006fb6:	bd10      	pop	{r4, pc}

08006fb8 <_free_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	4605      	mov	r5, r0
 8006fbc:	2900      	cmp	r1, #0
 8006fbe:	d041      	beq.n	8007044 <_free_r+0x8c>
 8006fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fc4:	1f0c      	subs	r4, r1, #4
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	bfb8      	it	lt
 8006fca:	18e4      	addlt	r4, r4, r3
 8006fcc:	f000 f83e 	bl	800704c <__malloc_lock>
 8006fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8007048 <_free_r+0x90>)
 8006fd2:	6813      	ldr	r3, [r2, #0]
 8006fd4:	b933      	cbnz	r3, 8006fe4 <_free_r+0x2c>
 8006fd6:	6063      	str	r3, [r4, #4]
 8006fd8:	6014      	str	r4, [r2, #0]
 8006fda:	4628      	mov	r0, r5
 8006fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fe0:	f000 b83a 	b.w	8007058 <__malloc_unlock>
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	d908      	bls.n	8006ffa <_free_r+0x42>
 8006fe8:	6820      	ldr	r0, [r4, #0]
 8006fea:	1821      	adds	r1, r4, r0
 8006fec:	428b      	cmp	r3, r1
 8006fee:	bf01      	itttt	eq
 8006ff0:	6819      	ldreq	r1, [r3, #0]
 8006ff2:	685b      	ldreq	r3, [r3, #4]
 8006ff4:	1809      	addeq	r1, r1, r0
 8006ff6:	6021      	streq	r1, [r4, #0]
 8006ff8:	e7ed      	b.n	8006fd6 <_free_r+0x1e>
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	b10b      	cbz	r3, 8007004 <_free_r+0x4c>
 8007000:	42a3      	cmp	r3, r4
 8007002:	d9fa      	bls.n	8006ffa <_free_r+0x42>
 8007004:	6811      	ldr	r1, [r2, #0]
 8007006:	1850      	adds	r0, r2, r1
 8007008:	42a0      	cmp	r0, r4
 800700a:	d10b      	bne.n	8007024 <_free_r+0x6c>
 800700c:	6820      	ldr	r0, [r4, #0]
 800700e:	4401      	add	r1, r0
 8007010:	1850      	adds	r0, r2, r1
 8007012:	4283      	cmp	r3, r0
 8007014:	6011      	str	r1, [r2, #0]
 8007016:	d1e0      	bne.n	8006fda <_free_r+0x22>
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	6053      	str	r3, [r2, #4]
 800701e:	4408      	add	r0, r1
 8007020:	6010      	str	r0, [r2, #0]
 8007022:	e7da      	b.n	8006fda <_free_r+0x22>
 8007024:	d902      	bls.n	800702c <_free_r+0x74>
 8007026:	230c      	movs	r3, #12
 8007028:	602b      	str	r3, [r5, #0]
 800702a:	e7d6      	b.n	8006fda <_free_r+0x22>
 800702c:	6820      	ldr	r0, [r4, #0]
 800702e:	1821      	adds	r1, r4, r0
 8007030:	428b      	cmp	r3, r1
 8007032:	bf04      	itt	eq
 8007034:	6819      	ldreq	r1, [r3, #0]
 8007036:	685b      	ldreq	r3, [r3, #4]
 8007038:	6063      	str	r3, [r4, #4]
 800703a:	bf04      	itt	eq
 800703c:	1809      	addeq	r1, r1, r0
 800703e:	6021      	streq	r1, [r4, #0]
 8007040:	6054      	str	r4, [r2, #4]
 8007042:	e7ca      	b.n	8006fda <_free_r+0x22>
 8007044:	bd38      	pop	{r3, r4, r5, pc}
 8007046:	bf00      	nop
 8007048:	20004e34 	.word	0x20004e34

0800704c <__malloc_lock>:
 800704c:	4801      	ldr	r0, [pc, #4]	@ (8007054 <__malloc_lock+0x8>)
 800704e:	f7ff bfa3 	b.w	8006f98 <__retarget_lock_acquire_recursive>
 8007052:	bf00      	nop
 8007054:	20004e30 	.word	0x20004e30

08007058 <__malloc_unlock>:
 8007058:	4801      	ldr	r0, [pc, #4]	@ (8007060 <__malloc_unlock+0x8>)
 800705a:	f7ff bf9e 	b.w	8006f9a <__retarget_lock_release_recursive>
 800705e:	bf00      	nop
 8007060:	20004e30 	.word	0x20004e30

08007064 <_init>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	bf00      	nop
 8007068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706a:	bc08      	pop	{r3}
 800706c:	469e      	mov	lr, r3
 800706e:	4770      	bx	lr

08007070 <_fini>:
 8007070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007072:	bf00      	nop
 8007074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007076:	bc08      	pop	{r3}
 8007078:	469e      	mov	lr, r3
 800707a:	4770      	bx	lr
