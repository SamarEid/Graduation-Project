
ADASWithSDV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e6c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800700c  0800700c  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070b4  080070b4  00009114  2**0
                  CONTENTS
  4 .ARM          00000008  080070b4  080070b4  000080b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070bc  080070bc  00009114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070bc  080070bc  000080bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070c0  080070c0  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000114  20000000  080070c4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d24  20000114  080071d8  00009114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e38  080071d8  00009e38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009114  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f7e  00000000  00000000  00009144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d25  00000000  00000000  000220c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  00025de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001001  00000000  00000000  000272e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000419e  00000000  00000000  000282e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b098  00000000  00000000  0002c47f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000976b1  00000000  00000000  00047517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000debc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058bc  00000000  00000000  000dec0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000e44c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000114 	.word	0x20000114
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ff4 	.word	0x08006ff4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000118 	.word	0x20000118
 80001dc:	08006ff4 	.word	0x08006ff4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:

void SystemClock_Config(void);
void SystemRCCInit(void);

int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f001 f83c 	bl	8001550 <HAL_Init>
  SystemClock_Config();
 80004d8:	f000 f812 	bl	8000500 <SystemClock_Config>
  SystemRCCInit();
 80004dc:	f000 f870 	bl	80005c0 <SystemRCCInit>

  communicationVidInit();
 80004e0:	f000 fcda 	bl	8000e98 <communicationVidInit>
  perceptionVidInit();
 80004e4:	f000 ffd4 	bl	8001490 <perceptionVidInit>
  actuatingVidInit();
 80004e8:	f000 fc2c 	bl	8000d44 <actuatingVidInit>

  /* Init scheduler */
  osKernelInitialize();
 80004ec:	f003 fdd4 	bl	8004098 <osKernelInitialize>

  perceptionVidBegin();
 80004f0:	f000 fff6 	bl	80014e0 <perceptionVidBegin>
  actuatingVidBegin();
 80004f4:	f000 fcb0 	bl	8000e58 <actuatingVidBegin>


  /* Start scheduler */
  osKernelStart();
 80004f8:	f003 fdf2 	bl	80040e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */

  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <main+0x2c>

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	@ 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	@ 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f006 fc88 	bl	8006e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b23      	ldr	r3, [pc, #140]	@ (80005b8 <SystemClock_Config+0xb8>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800052c:	4a22      	ldr	r2, [pc, #136]	@ (80005b8 <SystemClock_Config+0xb8>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	@ 0x40
 8000534:	4b20      	ldr	r3, [pc, #128]	@ (80005b8 <SystemClock_Config+0xb8>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b1d      	ldr	r3, [pc, #116]	@ (80005bc <SystemClock_Config+0xbc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800054c:	4a1b      	ldr	r2, [pc, #108]	@ (80005bc <SystemClock_Config+0xbc>)
 800054e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b19      	ldr	r3, [pc, #100]	@ (80005bc <SystemClock_Config+0xbc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000568:	2310      	movs	r3, #16
 800056a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056c:	2300      	movs	r3, #0
 800056e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0320 	add.w	r3, r7, #32
 8000574:	4618      	mov	r0, r3
 8000576:	f001 fac5 	bl	8001b04 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000580:	f000 f89e 	bl	80006c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fd28 	bl	8001ff4 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005aa:	f000 f889 	bl	80006c0 <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3750      	adds	r7, #80	@ 0x50
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <SystemRCCInit>:
void SystemRCCInit(void){
 80005c0:	b480      	push	{r7}
 80005c2:	b089      	sub	sp, #36	@ 0x24
 80005c4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
 80005ca:	4b33      	ldr	r3, [pc, #204]	@ (8000698 <SystemRCCInit+0xd8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a32      	ldr	r2, [pc, #200]	@ (8000698 <SystemRCCInit+0xd8>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b30      	ldr	r3, [pc, #192]	@ (8000698 <SystemRCCInit+0xd8>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	61fb      	str	r3, [r7, #28]
 80005e0:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
 80005e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000698 <SystemRCCInit+0xd8>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a2b      	ldr	r2, [pc, #172]	@ (8000698 <SystemRCCInit+0xd8>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <SystemRCCInit+0xd8>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	61bb      	str	r3, [r7, #24]
 80005fc:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_TIM3_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <SystemRCCInit+0xd8>)
 8000604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000606:	4a24      	ldr	r2, [pc, #144]	@ (8000698 <SystemRCCInit+0xd8>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6413      	str	r3, [r2, #64]	@ 0x40
 800060e:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <SystemRCCInit+0xd8>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_TIM4_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <SystemRCCInit+0xd8>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000622:	4a1d      	ldr	r2, [pc, #116]	@ (8000698 <SystemRCCInit+0xd8>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6413      	str	r3, [r2, #64]	@ 0x40
 800062a:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <SystemRCCInit+0xd8>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_TIM5_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <SystemRCCInit+0xd8>)
 800063c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063e:	4a16      	ldr	r2, [pc, #88]	@ (8000698 <SystemRCCInit+0xd8>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	6413      	str	r3, [r2, #64]	@ 0x40
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <SystemRCCInit+0xd8>)
 8000648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_SPI2_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <SystemRCCInit+0xd8>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065a:	4a0f      	ldr	r2, [pc, #60]	@ (8000698 <SystemRCCInit+0xd8>)
 800065c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000660:	6413      	str	r3, [r2, #64]	@ 0x40
 8000662:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <SystemRCCInit+0xd8>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000666:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_TIM1_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <SystemRCCInit+0xd8>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000676:	4a08      	ldr	r2, [pc, #32]	@ (8000698 <SystemRCCInit+0xd8>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6453      	str	r3, [r2, #68]	@ 0x44
 800067e:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <SystemRCCInit+0xd8>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

}
 800068a:	bf00      	nop
 800068c:	3724      	adds	r7, #36	@ 0x24
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800

0800069c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM10) {
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a04      	ldr	r2, [pc, #16]	@ (80006bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d101      	bne.n	80006b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ae:	f000 ff71 	bl	8001594 <HAL_IncTick>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40014400 	.word	0x40014400

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <Error_Handler+0x8>

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <HAL_MspInit+0x54>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006da:	4a11      	ldr	r2, [pc, #68]	@ (8000720 <HAL_MspInit+0x54>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <HAL_MspInit+0x54>)
 80006e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <HAL_MspInit+0x54>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000720 <HAL_MspInit+0x54>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <HAL_MspInit+0x54>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	210f      	movs	r1, #15
 800070e:	f06f 0001 	mvn.w	r0, #1
 8000712:	f001 f817 	bl	8001744 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800

08000724 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a19      	ldr	r2, [pc, #100]	@ (80007a8 <HAL_SPI_MspInit+0x84>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d12c      	bne.n	80007a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b18      	ldr	r3, [pc, #96]	@ (80007ac <HAL_SPI_MspInit+0x88>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074e:	4a17      	ldr	r2, [pc, #92]	@ (80007ac <HAL_SPI_MspInit+0x88>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6413      	str	r3, [r2, #64]	@ 0x40
 8000756:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <HAL_SPI_MspInit+0x88>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <HAL_SPI_MspInit+0x88>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a10      	ldr	r2, [pc, #64]	@ (80007ac <HAL_SPI_MspInit+0x88>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <HAL_SPI_MspInit+0x88>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800077e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000790:	2305      	movs	r3, #5
 8000792:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <HAL_SPI_MspInit+0x8c>)
 800079c:	f000 fffc 	bl	8001798 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	@ 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40003800 	.word	0x40003800
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020400 	.word	0x40020400

080007b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	@ 0x30
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80007bc:	2300      	movs	r3, #0
 80007be:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000884 <HAL_InitTick+0xd0>)
 80007ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007cc:	4a2d      	ldr	r2, [pc, #180]	@ (8000884 <HAL_InitTick+0xd0>)
 80007ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80007d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000884 <HAL_InitTick+0xd0>)
 80007d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007e0:	f107 020c 	add.w	r2, r7, #12
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	4611      	mov	r1, r2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 fdce 	bl	800238c <HAL_RCC_GetClockConfig>
  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007f0:	f001 fdb8 	bl	8002364 <HAL_RCC_GetPCLK2Freq>
 80007f4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007f8:	4a23      	ldr	r2, [pc, #140]	@ (8000888 <HAL_InitTick+0xd4>)
 80007fa:	fba2 2303 	umull	r2, r3, r2, r3
 80007fe:	0c9b      	lsrs	r3, r3, #18
 8000800:	3b01      	subs	r3, #1
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000804:	4b21      	ldr	r3, [pc, #132]	@ (800088c <HAL_InitTick+0xd8>)
 8000806:	4a22      	ldr	r2, [pc, #136]	@ (8000890 <HAL_InitTick+0xdc>)
 8000808:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <HAL_InitTick+0xd8>)
 800080c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000810:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000812:	4a1e      	ldr	r2, [pc, #120]	@ (800088c <HAL_InitTick+0xd8>)
 8000814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000816:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000818:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <HAL_InitTick+0xd8>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081e:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <HAL_InitTick+0xd8>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b19      	ldr	r3, [pc, #100]	@ (800088c <HAL_InitTick+0xd8>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800082a:	4818      	ldr	r0, [pc, #96]	@ (800088c <HAL_InitTick+0xd8>)
 800082c:	f002 fa32 	bl	8002c94 <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000836:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800083a:	2b00      	cmp	r3, #0
 800083c:	d11b      	bne.n	8000876 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800083e:	4813      	ldr	r0, [pc, #76]	@ (800088c <HAL_InitTick+0xd8>)
 8000840:	f002 fa82 	bl	8002d48 <HAL_TIM_Base_Start_IT>
 8000844:	4603      	mov	r3, r0
 8000846:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800084a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800084e:	2b00      	cmp	r3, #0
 8000850:	d111      	bne.n	8000876 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000852:	2019      	movs	r0, #25
 8000854:	f000 ff92 	bl	800177c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b0f      	cmp	r3, #15
 800085c:	d808      	bhi.n	8000870 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800085e:	2200      	movs	r2, #0
 8000860:	6879      	ldr	r1, [r7, #4]
 8000862:	2019      	movs	r0, #25
 8000864:	f000 ff6e 	bl	8001744 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000868:	4a0a      	ldr	r2, [pc, #40]	@ (8000894 <HAL_InitTick+0xe0>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
 800086e:	e002      	b.n	8000876 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000870:	2301      	movs	r3, #1
 8000872:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000876:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800087a:	4618      	mov	r0, r3
 800087c:	3730      	adds	r7, #48	@ 0x30
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	431bde83 	.word	0x431bde83
 800088c:	20000130 	.word	0x20000130
 8000890:	40014400 	.word	0x40014400
 8000894:	200000b8 	.word	0x200000b8

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <NMI_Handler+0x4>

080008a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <MemManage_Handler+0x4>

080008b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <UsageFault_Handler+0x4>

080008c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
	...

080008d0 <TIM3_IRQHandler>:
/* STM32F4xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/
void TIM3_IRQHandler(void) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim3);
 80008d4:	4802      	ldr	r0, [pc, #8]	@ (80008e0 <TIM3_IRQHandler+0x10>)
 80008d6:	f002 fd7b 	bl	80033d0 <HAL_TIM_IRQHandler>
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000021c 	.word	0x2000021c

080008e4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim4);
 80008e8:	4802      	ldr	r0, [pc, #8]	@ (80008f4 <TIM4_IRQHandler+0x10>)
 80008ea:	f002 fd71 	bl	80033d0 <HAL_TIM_IRQHandler>
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000264 	.word	0x20000264

080008f8 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim5);
 80008fc:	4802      	ldr	r0, [pc, #8]	@ (8000908 <TIM5_IRQHandler+0x10>)
 80008fe:	f002 fd67 	bl	80033d0 <HAL_TIM_IRQHandler>
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200002ac 	.word	0x200002ac

0800090c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000910:	4802      	ldr	r0, [pc, #8]	@ (800091c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000912:	f002 fd5d 	bl	80033d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000130 	.word	0x20000130

08000920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <SystemInit+0x20>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800092a:	4a05      	ldr	r2, [pc, #20]	@ (8000940 <SystemInit+0x20>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800097c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000948:	f7ff ffea 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800094c:	480c      	ldr	r0, [pc, #48]	@ (8000980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800094e:	490d      	ldr	r1, [pc, #52]	@ (8000984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000950:	4a0d      	ldr	r2, [pc, #52]	@ (8000988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000964:	4c0a      	ldr	r4, [pc, #40]	@ (8000990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000972:	f006 fab5 	bl	8006ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000976:	f7ff fdab 	bl	80004d0 <main>
  bx  lr    
 800097a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800097c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8000988:	080070c4 	.word	0x080070c4
  ldr r2, =_sbss
 800098c:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8000990:	20004e38 	.word	0x20004e38

08000994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC_IRQHandler>

08000996 <motorVidinit>:
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_gpio.h"
#include "stm32f4xx_hal_tim.h"
#include "./motor.h"

void motorVidinit(motorInitTypeDef*motor){
 8000996:	b580      	push	{r7, lr}
 8000998:	b08e      	sub	sp, #56	@ 0x38
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
 80009be:	615a      	str	r2, [r3, #20]
 80009c0:	619a      	str	r2, [r3, #24]
    /*
     * init GPIO PINS
     * IN1 PIN as output and reset it
    */
    GPIO_InitStruct.Pin = motor->in1GPIOxPin;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(motor->in1GPIOx, &GPIO_InitStruct);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80009dc:	4611      	mov	r1, r2
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 feda 	bl	8001798 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(motor->in1GPIOx,motor->in1GPIOxPin , GPIO_PIN_RESET);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6818      	ldr	r0, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	2200      	movs	r2, #0
 80009f0:	4619      	mov	r1, r3
 80009f2:	f001 f86d 	bl	8001ad0 <HAL_GPIO_WritePin>
    // IN2 PIN as output and reset it
    GPIO_InitStruct.Pin = motor->in2GPIOxPin;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(motor->in2GPIOx, &GPIO_InitStruct);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fec6 	bl	8001798 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(motor->in2GPIOx,motor->in2GPIOxPin , GPIO_PIN_RESET);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6898      	ldr	r0, [r3, #8]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	2200      	movs	r2, #0
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f001 f859 	bl	8001ad0 <HAL_GPIO_WritePin>
    // EN pin to its alternate function
    GPIO_InitStruct.Pin = motor->enGPIOxPin;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = motor->GPIOEnPinAF;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(motor->enGPIOx, &GPIO_InitStruct);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 feab 	bl	8001798 <HAL_GPIO_Init>

    // Timer Base for PWM (enable)
    motor->htim->Instance = motor->TIMxEnable;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	69d2      	ldr	r2, [r2, #28]
 8000a4a:	601a      	str	r2, [r3, #0]
    motor->htim->Init.Prescaler = SET_PSC();
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	220f      	movs	r2, #15
 8000a52:	605a      	str	r2, [r3, #4]
    motor->htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
    motor->htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
    motor->htim->Init.CounterMode  = TIM_COUNTERMODE_UP;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
    motor->htim->Init.Period = RESET_VALUE;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a74:	60da      	str	r2, [r3, #12]
    HAL_TIM_PWM_Init(motor->htim);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 f9c6 	bl	8002e0c <HAL_TIM_PWM_Init>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a80:	2360      	movs	r3, #96	@ 0x60
 8000a82:	60bb      	str	r3, [r7, #8]
    sConfigOC.Pulse = SET_PULSE(HANDLE_FAULT_MOTOR_RPM_SPEED);
 8000a84:	2365      	movs	r3, #101	@ 0x65
 8000a86:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61bb      	str	r3, [r7, #24]
    HAL_TIM_PWM_ConfigChannel(motor->htim, &sConfigOC, motor->TIMxEnableChannel);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6998      	ldr	r0, [r3, #24]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6a1a      	ldr	r2, [r3, #32]
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f002 fe23 	bl	80036e8 <HAL_TIM_PWM_ConfigChannel>
}
 8000aa2:	bf00      	nop
 8000aa4:	3738      	adds	r7, #56	@ 0x38
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <motorVidStart>:
void motorVidStart(motorInitTypeDef*motor, uint8_t motorSpeed,direction motorDirection){
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	70fb      	strb	r3, [r7, #3]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	70bb      	strb	r3, [r7, #2]
	// set direction
	motorVidSetMotorDirection(motor, motorDirection);
 8000aba:	78bb      	ldrb	r3, [r7, #2]
 8000abc:	4619      	mov	r1, r3
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f000 f8be 	bl	8000c40 <motorVidSetMotorDirection>
	//set speed
	motorVidSetSpeed(motor, motorSpeed);
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f000 f80d 	bl	8000ae8 <motorVidSetSpeed>
	// enable TIMER
	HAL_TIM_PWM_Start(motor->htim,motor->TIMxEnableChannel);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	699a      	ldr	r2, [r3, #24]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6a1b      	ldr	r3, [r3, #32]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4610      	mov	r0, r2
 8000ada:	f002 f9f1 	bl	8002ec0 <HAL_TIM_PWM_Start>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <motorVidSetSpeed>:
void motorVidSetSpeed(motorInitTypeDef*motor, uint8_t motorSpeed){
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	70fb      	strb	r3, [r7, #3]
	if(motorSpeed <= MAXIMUM_MOTOR_RPM_SPEED){
 8000af4:	78fb      	ldrb	r3, [r7, #3]
 8000af6:	2b61      	cmp	r3, #97	@ 0x61
 8000af8:	d873      	bhi.n	8000be2 <motorVidSetSpeed+0xfa>
		__HAL_TIM_SET_COMPARE(motor->htim,motor->TIMxEnableChannel,SET_PULSE(motorSpeed) );
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a1b      	ldr	r3, [r3, #32]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d119      	bne.n	8000b36 <motorVidSetSpeed+0x4e>
 8000b02:	78fb      	ldrb	r3, [r7, #3]
 8000b04:	ee07 3a90 	vmov	s15, r3
 8000b08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b0c:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8000c38 <motorVidSetSpeed+0x150>
 8000b10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b14:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8000c3c <motorVidSetSpeed+0x154>
 8000b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000b20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b2e:	ee17 2a90 	vmov	r2, s15
 8000b32:	635a      	str	r2, [r3, #52]	@ 0x34
	}else{
		__HAL_TIM_SET_COMPARE(motor->htim,motor->TIMxEnableChannel,SET_PULSE(HANDLE_FAULT_MOTOR_RPM_SPEED) );
	}
}
 8000b34:	e079      	b.n	8000c2a <motorVidSetSpeed+0x142>
		__HAL_TIM_SET_COMPARE(motor->htim,motor->TIMxEnableChannel,SET_PULSE(motorSpeed) );
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a1b      	ldr	r3, [r3, #32]
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	d119      	bne.n	8000b72 <motorVidSetSpeed+0x8a>
 8000b3e:	78fb      	ldrb	r3, [r7, #3]
 8000b40:	ee07 3a90 	vmov	s15, r3
 8000b44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b48:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8000c38 <motorVidSetSpeed+0x150>
 8000b4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b50:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8000c3c <motorVidSetSpeed+0x154>
 8000b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000b5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b6a:	ee17 3a90 	vmov	r3, s15
 8000b6e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000b70:	e05b      	b.n	8000c2a <motorVidSetSpeed+0x142>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6a1b      	ldr	r3, [r3, #32]
 8000b76:	2b08      	cmp	r3, #8
 8000b78:	d119      	bne.n	8000bae <motorVidSetSpeed+0xc6>
 8000b7a:	78fb      	ldrb	r3, [r7, #3]
 8000b7c:	ee07 3a90 	vmov	s15, r3
 8000b80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b84:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8000c38 <motorVidSetSpeed+0x150>
 8000b88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b8c:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8000c3c <motorVidSetSpeed+0x154>
 8000b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000b98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ba6:	ee17 3a90 	vmov	r3, s15
 8000baa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000bac:	e03d      	b.n	8000c2a <motorVidSetSpeed+0x142>
 8000bae:	78fb      	ldrb	r3, [r7, #3]
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bb8:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8000c38 <motorVidSetSpeed+0x150>
 8000bbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bc0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000c3c <motorVidSetSpeed+0x154>
 8000bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000bcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bda:	ee17 3a90 	vmov	r3, s15
 8000bde:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000be0:	e023      	b.n	8000c2a <motorVidSetSpeed+0x142>
		__HAL_TIM_SET_COMPARE(motor->htim,motor->TIMxEnableChannel,SET_PULSE(HANDLE_FAULT_MOTOR_RPM_SPEED) );
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a1b      	ldr	r3, [r3, #32]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d105      	bne.n	8000bf6 <motorVidSetSpeed+0x10e>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2265      	movs	r2, #101	@ 0x65
 8000bf2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000bf4:	e019      	b.n	8000c2a <motorVidSetSpeed+0x142>
		__HAL_TIM_SET_COMPARE(motor->htim,motor->TIMxEnableChannel,SET_PULSE(HANDLE_FAULT_MOTOR_RPM_SPEED) );
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a1b      	ldr	r3, [r3, #32]
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	d105      	bne.n	8000c0a <motorVidSetSpeed+0x122>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	2365      	movs	r3, #101	@ 0x65
 8000c06:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000c08:	e00f      	b.n	8000c2a <motorVidSetSpeed+0x142>
		__HAL_TIM_SET_COMPARE(motor->htim,motor->TIMxEnableChannel,SET_PULSE(HANDLE_FAULT_MOTOR_RPM_SPEED) );
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6a1b      	ldr	r3, [r3, #32]
 8000c0e:	2b08      	cmp	r3, #8
 8000c10:	d105      	bne.n	8000c1e <motorVidSetSpeed+0x136>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	2365      	movs	r3, #101	@ 0x65
 8000c1a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000c1c:	e005      	b.n	8000c2a <motorVidSetSpeed+0x142>
		__HAL_TIM_SET_COMPARE(motor->htim,motor->TIMxEnableChannel,SET_PULSE(HANDLE_FAULT_MOTOR_RPM_SPEED) );
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	2365      	movs	r3, #101	@ 0x65
 8000c26:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c28:	e7ff      	b.n	8000c2a <motorVidSetSpeed+0x142>
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	42c20000 	.word	0x42c20000
 8000c3c:	4479c000 	.word	0x4479c000

08000c40 <motorVidSetMotorDirection>:
void motorVidSetMotorDirection(motorInitTypeDef*motor,direction motorDirection){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
	//reset bit first the control direction
	HAL_GPIO_WritePin(motor->in1GPIOx, motor->in1GPIOxPin, GPIO_PIN_RESET);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6818      	ldr	r0, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	2200      	movs	r2, #0
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f000 ff39 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->in2GPIOx, motor->in2GPIOxPin, GPIO_PIN_RESET);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6898      	ldr	r0, [r3, #8]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f000 ff30 	bl	8001ad0 <HAL_GPIO_WritePin>

	while(HAL_GPIO_ReadPin(motor->in1GPIOx, motor->in1GPIOxPin) || HAL_GPIO_ReadPin(motor->in2GPIOx, motor->in2GPIOxPin));
 8000c70:	bf00      	nop
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4610      	mov	r0, r2
 8000c80:	f000 ff0e 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1f3      	bne.n	8000c72 <motorVidSetMotorDirection+0x32>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689a      	ldr	r2, [r3, #8]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	4619      	mov	r1, r3
 8000c96:	4610      	mov	r0, r2
 8000c98:	f000 ff02 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1e7      	bne.n	8000c72 <motorVidSetMotorDirection+0x32>
	if(motorDirection == CW){
 8000ca2:	78fb      	ldrb	r3, [r7, #3]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d112      	bne.n	8000cce <motorVidSetMotorDirection+0x8e>
		HAL_GPIO_WritePin(motor->in1GPIOx, motor->in1GPIOxPin, GPIO_PIN_SET);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6818      	ldr	r0, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f000 ff0b 	bl	8001ad0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->in2GPIOx, motor->in2GPIOxPin, GPIO_PIN_RESET);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6898      	ldr	r0, [r3, #8]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f000 ff02 	bl	8001ad0 <HAL_GPIO_WritePin>
	}else if(motorDirection == CCW){
		HAL_GPIO_WritePin(motor->in1GPIOx, motor->in1GPIOxPin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(motor->in2GPIOx, motor->in2GPIOxPin, GPIO_PIN_SET);
	}
}
 8000ccc:	e014      	b.n	8000cf8 <motorVidSetMotorDirection+0xb8>
	}else if(motorDirection == CCW){
 8000cce:	78fb      	ldrb	r3, [r7, #3]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d111      	bne.n	8000cf8 <motorVidSetMotorDirection+0xb8>
		HAL_GPIO_WritePin(motor->in1GPIOx, motor->in1GPIOxPin, GPIO_PIN_RESET);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6818      	ldr	r0, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	2200      	movs	r2, #0
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f000 fef5 	bl	8001ad0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->in2GPIOx, motor->in2GPIOxPin, GPIO_PIN_SET);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6898      	ldr	r0, [r3, #8]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f000 feec 	bl	8001ad0 <HAL_GPIO_WritePin>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <motorVidStop>:
void motorVidStop(motorInitTypeDef*motor){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->in1GPIOx, motor->in1GPIOxPin, GPIO_PIN_RESET);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6818      	ldr	r0, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	2200      	movs	r2, #0
 8000d14:	4619      	mov	r1, r3
 8000d16:	f000 fedb 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->in2GPIOx, motor->in2GPIOxPin, GPIO_PIN_RESET);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6898      	ldr	r0, [r3, #8]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	2200      	movs	r2, #0
 8000d26:	4619      	mov	r1, r3
 8000d28:	f000 fed2 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->htim, motor->TIMxEnableChannel);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	699a      	ldr	r2, [r3, #24]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	4619      	mov	r1, r3
 8000d36:	4610      	mov	r0, r2
 8000d38:	f002 f972 	bl	8003020 <HAL_TIM_PWM_Stop>

}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <actuatingVidInit>:
	.TIMxEnableChannel = TIM_CHANNEL_2,
	.GPIOEnPinAF = GPIO_AF1_TIM1,
};

// initialize motors from structs that defined above
void actuatingVidInit(void){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	motorVidinit(&LHS_Motor);
 8000d48:	4803      	ldr	r0, [pc, #12]	@ (8000d58 <actuatingVidInit+0x14>)
 8000d4a:	f7ff fe24 	bl	8000996 <motorVidinit>
	motorVidinit(&RHS_Motor);
 8000d4e:	4803      	ldr	r0, [pc, #12]	@ (8000d5c <actuatingVidInit+0x18>)
 8000d50:	f7ff fe21 	bl	8000996 <motorVidinit>
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000004 	.word	0x20000004
 8000d5c:	2000002c 	.word	0x2000002c

08000d60 <actuatingVidExecuteCommandTask>:
// receive command and execute it
void actuatingVidExecuteCommandTask(void*pvParameters){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	uint8_t command[10] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
 8000d68:	4a37      	ldr	r2, [pc, #220]	@ (8000e48 <actuatingVidExecuteCommandTask+0xe8>)
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d70:	c303      	stmia	r3!, {r0, r1}
 8000d72:	801a      	strh	r2, [r3, #0]
	for(;;){
		osMutexAcquire(spiMutexHandle, osWaitForever);
 8000d74:	4b35      	ldr	r3, [pc, #212]	@ (8000e4c <actuatingVidExecuteCommandTask+0xec>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f003 fb08 	bl	8004392 <osMutexAcquire>
		receptionVidReceiveCommand(command);
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f8e0 	bl	8000f4c <receptionVidReceiveCommand>
		osMutexRelease(spiMutexHandle);
 8000d8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e4c <actuatingVidExecuteCommandTask+0xec>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f003 fb49 	bl	8004428 <osMutexRelease>
    	switch(command[0]){
 8000d96:	7b3b      	ldrb	r3, [r7, #12]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	dc13      	bgt.n	8000dc4 <actuatingVidExecuteCommandTask+0x64>
 8000d9c:	2b0a      	cmp	r3, #10
 8000d9e:	db4a      	blt.n	8000e36 <actuatingVidExecuteCommandTask+0xd6>
 8000da0:	3b0a      	subs	r3, #10
 8000da2:	2b05      	cmp	r3, #5
 8000da4:	d847      	bhi.n	8000e36 <actuatingVidExecuteCommandTask+0xd6>
 8000da6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dac <actuatingVidExecuteCommandTask+0x4c>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000dcb 	.word	0x08000dcb
 8000db0:	08000de1 	.word	0x08000de1
 8000db4:	08000df3 	.word	0x08000df3
 8000db8:	08000e05 	.word	0x08000e05
 8000dbc:	08000e17 	.word	0x08000e17
 8000dc0:	08000e29 	.word	0x08000e29
 8000dc4:	2bff      	cmp	r3, #255	@ 0xff
 8000dc6:	d038      	beq.n	8000e3a <actuatingVidExecuteCommandTask+0xda>
    			motorVidStop(&RHS_Motor);
    			break;
    		case 0xff:
    			break;
    		default:
    			break;
 8000dc8:	e035      	b.n	8000e36 <actuatingVidExecuteCommandTask+0xd6>
   				motorVidStart(&LHS_Motor,INITIAL_SPEED,CW);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	211e      	movs	r1, #30
 8000dce:	4820      	ldr	r0, [pc, #128]	@ (8000e50 <actuatingVidExecuteCommandTask+0xf0>)
 8000dd0:	f7ff fe6b 	bl	8000aaa <motorVidStart>
   				motorVidStart(&RHS_Motor,INITIAL_SPEED,CW);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	211e      	movs	r1, #30
 8000dd8:	481e      	ldr	r0, [pc, #120]	@ (8000e54 <actuatingVidExecuteCommandTask+0xf4>)
 8000dda:	f7ff fe66 	bl	8000aaa <motorVidStart>
    			break;
 8000dde:	e02d      	b.n	8000e3c <actuatingVidExecuteCommandTask+0xdc>
    			motorVidSetMotorDirection(&LHS_Motor,CW);
 8000de0:	2100      	movs	r1, #0
 8000de2:	481b      	ldr	r0, [pc, #108]	@ (8000e50 <actuatingVidExecuteCommandTask+0xf0>)
 8000de4:	f7ff ff2c 	bl	8000c40 <motorVidSetMotorDirection>
    			motorVidSetMotorDirection(&RHS_Motor,CW);
 8000de8:	2100      	movs	r1, #0
 8000dea:	481a      	ldr	r0, [pc, #104]	@ (8000e54 <actuatingVidExecuteCommandTask+0xf4>)
 8000dec:	f7ff ff28 	bl	8000c40 <motorVidSetMotorDirection>
    			break;
 8000df0:	e024      	b.n	8000e3c <actuatingVidExecuteCommandTask+0xdc>
    			motorVidSetMotorDirection(&LHS_Motor,CCW);
 8000df2:	2101      	movs	r1, #1
 8000df4:	4816      	ldr	r0, [pc, #88]	@ (8000e50 <actuatingVidExecuteCommandTask+0xf0>)
 8000df6:	f7ff ff23 	bl	8000c40 <motorVidSetMotorDirection>
    			motorVidSetMotorDirection(&RHS_Motor,CCW);
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	4815      	ldr	r0, [pc, #84]	@ (8000e54 <actuatingVidExecuteCommandTask+0xf4>)
 8000dfe:	f7ff ff1f 	bl	8000c40 <motorVidSetMotorDirection>
    			break;
 8000e02:	e01b      	b.n	8000e3c <actuatingVidExecuteCommandTask+0xdc>
    			motorVidSetMotorDirection(&LHS_Motor,CW);
 8000e04:	2100      	movs	r1, #0
 8000e06:	4812      	ldr	r0, [pc, #72]	@ (8000e50 <actuatingVidExecuteCommandTask+0xf0>)
 8000e08:	f7ff ff1a 	bl	8000c40 <motorVidSetMotorDirection>
    			motorVidSetMotorDirection(&RHS_Motor,CCW);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4811      	ldr	r0, [pc, #68]	@ (8000e54 <actuatingVidExecuteCommandTask+0xf4>)
 8000e10:	f7ff ff16 	bl	8000c40 <motorVidSetMotorDirection>
    			break;
 8000e14:	e012      	b.n	8000e3c <actuatingVidExecuteCommandTask+0xdc>
    			motorVidSetMotorDirection(&LHS_Motor,CCW);
 8000e16:	2101      	movs	r1, #1
 8000e18:	480d      	ldr	r0, [pc, #52]	@ (8000e50 <actuatingVidExecuteCommandTask+0xf0>)
 8000e1a:	f7ff ff11 	bl	8000c40 <motorVidSetMotorDirection>
    			motorVidSetMotorDirection(&RHS_Motor,CW);
 8000e1e:	2100      	movs	r1, #0
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <actuatingVidExecuteCommandTask+0xf4>)
 8000e22:	f7ff ff0d 	bl	8000c40 <motorVidSetMotorDirection>
    			break;
 8000e26:	e009      	b.n	8000e3c <actuatingVidExecuteCommandTask+0xdc>
    			motorVidStop(&LHS_Motor);
 8000e28:	4809      	ldr	r0, [pc, #36]	@ (8000e50 <actuatingVidExecuteCommandTask+0xf0>)
 8000e2a:	f7ff ff69 	bl	8000d00 <motorVidStop>
    			motorVidStop(&RHS_Motor);
 8000e2e:	4809      	ldr	r0, [pc, #36]	@ (8000e54 <actuatingVidExecuteCommandTask+0xf4>)
 8000e30:	f7ff ff66 	bl	8000d00 <motorVidStop>
    			break;
 8000e34:	e002      	b.n	8000e3c <actuatingVidExecuteCommandTask+0xdc>
    			break;
 8000e36:	bf00      	nop
 8000e38:	e000      	b.n	8000e3c <actuatingVidExecuteCommandTask+0xdc>
    			break;
 8000e3a:	bf00      	nop
    	}command[0]= 0xff;
 8000e3c:	23ff      	movs	r3, #255	@ 0xff
 8000e3e:	733b      	strb	r3, [r7, #12]
		osDelay(10);
 8000e40:	200a      	movs	r0, #10
 8000e42:	f003 fa05 	bl	8004250 <osDelay>
		osMutexAcquire(spiMutexHandle, osWaitForever);
 8000e46:	e795      	b.n	8000d74 <actuatingVidExecuteCommandTask+0x14>
 8000e48:	0800700c 	.word	0x0800700c
 8000e4c:	20000218 	.word	0x20000218
 8000e50:	20000004 	.word	0x20000004
 8000e54:	2000002c 	.word	0x2000002c

08000e58 <actuatingVidBegin>:
	}
}
// create actuating task
void actuatingVidBegin(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	@ 0x28
 8000e5c:	af00      	add	r7, sp, #0
	//define freeRTOS Tasks Parameters
	osThreadId_t executeCommandTaskHandle;
	const osThreadAttr_t executeCommandTask_attributes = {
 8000e5e:	463b      	mov	r3, r7
 8000e60:	2224      	movs	r2, #36	@ 0x24
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f005 ffdd 	bl	8006e24 <memset>
 8000e6a:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <actuatingVidBegin+0x38>)
 8000e6c:	603b      	str	r3, [r7, #0]
 8000e6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	2328      	movs	r3, #40	@ 0x28
 8000e76:	61bb      	str	r3, [r7, #24]
	  .name = "exeCommand",
	  .stack_size = 128 * 4,
	  .priority = (osPriority_t) osPriorityHigh,
	};
	executeCommandTaskHandle = osThreadNew(actuatingVidExecuteCommandTask, NULL, &executeCommandTask_attributes);
 8000e78:	463b      	mov	r3, r7
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <actuatingVidBegin+0x3c>)
 8000e80:	f003 f954 	bl	800412c <osThreadNew>
 8000e84:	6278      	str	r0, [r7, #36]	@ 0x24
}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	@ 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	08007018 	.word	0x08007018
 8000e94:	08000d61 	.word	0x08000d61

08000e98 <communicationVidInit>:
SPI_HandleTypeDef hspi2 = {0};
osMutexId_t spiMutexHandle;
const osMutexAttr_t spiMutex_attributes = {
  .name = "spiMutex"
};
void communicationVidInit(){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
	// initialize GPIO PINS to its alternate function
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin =  SS_PIN | SCLK_PIN | MISO_PIN | MOSI_PIN;
 8000eac:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000eb0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = SPI_ALTERNATE_FUNCTION;
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SPI_PORT, &GPIO_InitStruct);
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	481c      	ldr	r0, [pc, #112]	@ (8000f38 <communicationVidInit+0xa0>)
 8000ec8:	f000 fc66 	bl	8001798 <HAL_GPIO_Init>
	//congigure spi as slave
	hspi2.Instance = COMMUNICATION_SPI;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <communicationVidInit+0xa4>)
 8000ece:	4a1c      	ldr	r2, [pc, #112]	@ (8000f40 <communicationVidInit+0xa8>)
 8000ed0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <communicationVidInit+0xa4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <communicationVidInit+0xa4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = DATA_SIZE;
 8000ede:	4b17      	ldr	r3, [pc, #92]	@ (8000f3c <communicationVidInit+0xa4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <communicationVidInit+0xa4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eea:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <communicationVidInit+0xa4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <communicationVidInit+0xa4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
	hspi2.Init.FirstBit = ENDIAN;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <communicationVidInit+0xa4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <communicationVidInit+0xa4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <communicationVidInit+0xa4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <communicationVidInit+0xa4>)
 8000f0a:	220a      	movs	r2, #10
 8000f0c:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_SPI_Init(&hspi2);
 8000f0e:	480b      	ldr	r0, [pc, #44]	@ (8000f3c <communicationVidInit+0xa4>)
 8000f10:	f001 fa6e 	bl	80023f0 <HAL_SPI_Init>
	__HAL_SPI_ENABLE(&hspi2);
 8000f14:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <communicationVidInit+0xa4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <communicationVidInit+0xa4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f22:	601a      	str	r2, [r3, #0]
	spiMutexHandle = osMutexNew(&spiMutex_attributes);
 8000f24:	4807      	ldr	r0, [pc, #28]	@ (8000f44 <communicationVidInit+0xac>)
 8000f26:	f003 f9ae 	bl	8004286 <osMutexNew>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <communicationVidInit+0xb0>)
 8000f2e:	6013      	str	r3, [r2, #0]

}
 8000f30:	bf00      	nop
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	200001c0 	.word	0x200001c0
 8000f40:	40003800 	.word	0x40003800
 8000f44:	0800708c 	.word	0x0800708c
 8000f48:	20000218 	.word	0x20000218

08000f4c <receptionVidReceiveCommand>:
#include "stm32f4xx_hal_spi.h"
#include "../../communication.h"
#include "./reception.h"
extern SPI_HandleTypeDef hspi2 ;
uint8_t checkValidityFrame = {START_FRAME,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,END_FRAME};
void receptionVidReceiveCommand(uint8_t*command){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	6078      	str	r0, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, checkValidityFrame, command, FRAME_SIZE, HAL_MAX_DELAY);
 8000f54:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <receptionVidReceiveCommand+0x28>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	230a      	movs	r3, #10
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	4804      	ldr	r0, [pc, #16]	@ (8000f78 <receptionVidReceiveCommand+0x2c>)
 8000f66:	f001 fc10 	bl	800278a <HAL_SPI_TransmitReceive>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000054 	.word	0x20000054
 8000f78:	200001c0 	.word	0x200001c0

08000f7c <serializeSensorData>:
 *      Author: ASHRY
 */
#include <stdint.h>
#include "../typesdefinition/typedefinitions.h"
#include "./serialization.h"
uint8_t* serializeSensorData(sensorTypeDef* sensorData){
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	uint8_t* serializedData = (uint8_t*) sensorData;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	60fb      	str	r3, [r7, #12]
	return serializedData;
 8000f88:	68fb      	ldr	r3, [r7, #12]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <transmissionVidSendSensorData>:
#include <string.h>
#include "../typesdefinition/typedefinitions.h"
#include "../formatter/serialization.h"
#include "./transmission.h"
extern SPI_HandleTypeDef hspi2;
void transmissionVidSendSensorData(sensorTypeDef*sensorData){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
    uint8_t packet[FRAME_SIZE];  // 1 byte start + 8 byte data + 1 byte end

    packet[0] = START_FRAME;
 8000fa0:	23a0      	movs	r3, #160	@ 0xa0
 8000fa2:	723b      	strb	r3, [r7, #8]

    uint8_t* serialized = serializeSensorData(sensorData);  // returns 8 bytes (ID + float)
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ffe9 	bl	8000f7c <serializeSensorData>
 8000faa:	6178      	str	r0, [r7, #20]
    memcpy(&packet[1], serialized, SENSOR_DATA_SIZE);
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	6979      	ldr	r1, [r7, #20]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f005 ffb8 	bl	8006f2c <memcpy>

    packet[SENSOR_DATA_SIZE + 1] = END_FRAME;
 8000fbc:	23b0      	movs	r3, #176	@ 0xb0
 8000fbe:	747b      	strb	r3, [r7, #17]
    HAL_SPI_Transmit(&hspi2, packet,FRAME_SIZE,HAL_MAX_DELAY);
 8000fc0:	f107 0108 	add.w	r1, r7, #8
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc8:	220a      	movs	r2, #10
 8000fca:	4803      	ldr	r0, [pc, #12]	@ (8000fd8 <transmissionVidSendSensorData+0x40>)
 8000fcc:	f001 fa99 	bl	8002502 <HAL_SPI_Transmit>
}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200001c0 	.word	0x200001c0

08000fdc <ultraSonicVidInit>:
 */
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_gpio.h"
#include "stm32f4xx_hal_tim.h"
#include "./ultraSonic.h"
void ultraSonicVidInit(ultraSonicInitTypeDef* sensor) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	@ 0x30
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
    TIM_IC_InitTypeDef sConfigIC = {0};
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]

    // === Trigger Pin Init ===
    GPIO_InitStruct.Pin = sensor->GPIOxTriggerPin;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(sensor->GPIOxTrigger, &GPIO_InitStruct);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f107 021c 	add.w	r2, r7, #28
 800101c:	4611      	mov	r1, r2
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fbba 	bl	8001798 <HAL_GPIO_Init>

    // ===  init Echo Pin  ===
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001028:	2302      	movs	r3, #2
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102c:	2302      	movs	r3, #2
 800102e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = sensor->GPIOxEchoPin;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = sensor->GPIOxEchoPinAF;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(sensor->GPIOxEcho, &GPIO_InitStruct);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f107 021c 	add.w	r2, r7, #28
 8001044:	4611      	mov	r1, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fba6 	bl	8001798 <HAL_GPIO_Init>


    // Timer Base for Echo Channel
    sensor->htimEcho->Instance = sensor->TIMxEcho;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	6952      	ldr	r2, [r2, #20]
 8001054:	601a      	str	r2, [r3, #0]
    sensor->htimEcho->Init.Prescaler = GET_PSC();
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	220f      	movs	r2, #15
 800105c:	605a      	str	r2, [r3, #4]
    sensor->htimEcho->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
    sensor->htimEcho->Init.ClockDivision = TIMER_CLOCK_DIVISON;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
    sensor->htimEcho->Init.CounterMode  = TIMER_COUNTER_MODE;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
    sensor->htimEcho->Init.Period = GET_ARR();
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800107e:	60da      	str	r2, [r3, #12]
    HAL_TIM_IC_Init(sensor->htimEcho);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4618      	mov	r0, r3
 8001086:	f002 f82f 	bl	80030e8 <HAL_TIM_IC_Init>

    // Input Capture Channel 1 Config
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800108e:	2301      	movs	r3, #1
 8001090:	613b      	str	r3, [r7, #16]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
    sConfigIC.ICFilter = DIGITAL_FILTER;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
    HAL_TIM_IC_ConfigChannel(sensor->htimEcho, &sConfigIC, ECHO_CHANNEL);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f107 010c 	add.w	r1, r7, #12
 80010a2:	2200      	movs	r2, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 fa83 	bl	80035b0 <HAL_TIM_IC_ConfigChannel>


    //Enable interrupts
    HAL_NVIC_SetPriority(sensor->EchoIRQ, ECHO_PRIORITY, 0);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f993 301c 	ldrsb.w	r3, [r3, #28]
 80010b0:	2200      	movs	r2, #0
 80010b2:	2105      	movs	r1, #5
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fb45 	bl	8001744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(sensor->EchoIRQ);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f993 301c 	ldrsb.w	r3, [r3, #28]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fb5b 	bl	800177c <HAL_NVIC_EnableIRQ>
}
 80010c6:	bf00      	nop
 80010c8:	3730      	adds	r7, #48	@ 0x30
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <ultraSonicVidStart>:

void ultraSonicVidStart(ultraSonicInitTypeDef* sensor) {
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
    HAL_TIM_IC_Start_IT(sensor->htimEcho, ECHO_CHANNEL);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 f85d 	bl	800319c <HAL_TIM_IC_Start_IT>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <ultraSonicFloatGetDistance>:

float ultraSonicFloatGetDistance(uint32_t* firstICVal, uint32_t* secondICVal) {
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
	uint32_t difference = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
	float distance = 4.00;
 80010fa:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 80010fe:	60bb      	str	r3, [r7, #8]
	if(*secondICVal >= *firstICVal){
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	429a      	cmp	r2, r3
 800110a:	d306      	bcc.n	800111a <ultraSonicFloatGetDistance+0x2e>
		difference = (*secondICVal) - (*firstICVal);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	e008      	b.n	800112c <ultraSonicFloatGetDistance+0x40>
	}else{
		difference = GET_ARR() - (*firstICVal) + (*secondICVal);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001128:	33ff      	adds	r3, #255	@ 0xff
 800112a:	60fb      	str	r3, [r7, #12]
	}
	distance = (difference * SOUND_SPEED) / 2.0f; // in cm
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	ee07 3a90 	vmov	s15, r3
 8001132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001136:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001160 <ultraSonicFloatGetDistance+0x74>
 800113a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800113e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001142:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001146:	edc7 7a02 	vstr	s15, [r7, #8]
	return distance;
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	ee07 3a90 	vmov	s15, r3
}
 8001150:	eeb0 0a67 	vmov.f32	s0, s15
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	3d0c7e28 	.word	0x3d0c7e28

08001164 <ultraSonicVidInputCaptureHandler>:
void ultraSonicVidInputCaptureHandler(TIM_HandleTypeDef*htim, uint32_t*firstICVal, uint32_t* secondICVal,uint8_t*flag ,uint32_t ID, void*fPtr(uint32_t,float)){
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	7f1b      	ldrb	r3, [r3, #28]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d175      	bne.n	8001266 <ultraSonicVidInputCaptureHandler+0x102>
		if(*flag == FIRST_CAPTURE){
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d12a      	bne.n	80011d8 <ultraSonicVidInputCaptureHandler+0x74>
			// Rising edge captured
			*firstICVal = HAL_TIM_ReadCapturedValue(htim, ECHO_CHANNEL);
 8001182:	2100      	movs	r1, #0
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f002 fb71 	bl	800386c <HAL_TIM_ReadCapturedValue>
 800118a:	4602      	mov	r2, r0
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	601a      	str	r2, [r3, #0]
			__HAL_TIM_DISABLE_IT(htim, IT_CC_CHANNEL);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0202 	bic.w	r2, r2, #2
 800119e:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,ECHO_CHANNEL,TIM_INPUTCHANNELPOLARITY_FALLING);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6a1a      	ldr	r2, [r3, #32]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 020a 	bic.w	r2, r2, #10
 80011ae:	621a      	str	r2, [r3, #32]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6a1a      	ldr	r2, [r3, #32]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0202 	orr.w	r2, r2, #2
 80011be:	621a      	str	r2, [r3, #32]
			__HAL_TIM_ENABLE_IT(htim, IT_CC_CHANNEL);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0202 	orr.w	r2, r2, #2
 80011ce:	60da      	str	r2, [r3, #12]
			*flag = SECOND_CAPTURE;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	e046      	b.n	8001266 <ultraSonicVidInputCaptureHandler+0x102>
		}else{
		    // Falling edge captured
			*secondICVal = HAL_TIM_ReadCapturedValue(htim, ECHO_CHANNEL);
 80011d8:	2100      	movs	r1, #0
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f002 fb46 	bl	800386c <HAL_TIM_ReadCapturedValue>
 80011e0:	4602      	mov	r2, r0
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	601a      	str	r2, [r3, #0]
			__HAL_TIM_DISABLE_IT(htim, IT_CC_CHANNEL);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0202 	bic.w	r2, r2, #2
 80011f4:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,ECHO_CHANNEL,TIM_INPUTCHANNELPOLARITY_RISING);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6a1a      	ldr	r2, [r3, #32]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 020a 	bic.w	r2, r2, #10
 8001204:	621a      	str	r2, [r3, #32]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6a12      	ldr	r2, [r2, #32]
 8001210:	621a      	str	r2, [r3, #32]
			__HAL_TIM_ENABLE_IT(htim, IT_CC_CHANNEL);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 0202 	orr.w	r2, r2, #2
 8001220:	60da      	str	r2, [r3, #12]
		    *flag = FIRST_CAPTURE;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
		    float distance = ultraSonicFloatGetDistance(firstICVal, secondICVal);
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	68b8      	ldr	r0, [r7, #8]
 800122c:	f7ff ff5e 	bl	80010ec <ultraSonicFloatGetDistance>
 8001230:	ed87 0a05 	vstr	s0, [r7, #20]
		    if (distance < MINIMUM_DISTANCE || distance > MAXIMUM_DISTANCE) return;
 8001234:	edd7 7a05 	vldr	s15, [r7, #20]
 8001238:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800123c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001244:	d40e      	bmi.n	8001264 <ultraSonicVidInputCaptureHandler+0x100>
 8001246:	edd7 7a05 	vldr	s15, [r7, #20]
 800124a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800126c <ultraSonicVidInputCaptureHandler+0x108>
 800124e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	dc05      	bgt.n	8001264 <ultraSonicVidInputCaptureHandler+0x100>
		     // processData
		    fPtr(ID,distance);
 8001258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125a:	ed97 0a05 	vldr	s0, [r7, #20]
 800125e:	6a38      	ldr	r0, [r7, #32]
 8001260:	4798      	blx	r3
 8001262:	e000      	b.n	8001266 <ultraSonicVidInputCaptureHandler+0x102>
		    if (distance < MINIMUM_DISTANCE || distance > MAXIMUM_DISTANCE) return;
 8001264:	bf00      	nop
		}
	}

}
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	43c80000 	.word	0x43c80000

08001270 <ultraSonicVidTrig>:
void ultraSonicVidTrig(ultraSonicInitTypeDef* sensor){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->GPIOxTrigger, sensor->GPIOxTriggerPin, GPIO_PIN_SET);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	b29b      	uxth	r3, r3
 8001282:	2201      	movs	r2, #1
 8001284:	4619      	mov	r1, r3
 8001286:	f000 fc23 	bl	8001ad0 <HAL_GPIO_WritePin>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <ultraSonicVidHaltTrig>:
void ultraSonicVidHaltTrig(ultraSonicInitTypeDef* sensor){
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->GPIOxTrigger, sensor->GPIOxTriggerPin, GPIO_PIN_RESET);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	2200      	movs	r2, #0
 80012a6:	4619      	mov	r1, r3
 80012a8:	f000 fc12 	bl	8001ad0 <HAL_GPIO_WritePin>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <ultraSonicVidDelayMicroSeconds>:
void ultraSonicVidDelayMicroSeconds(uint32_t us)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
    volatile uint32_t count = us * 16;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	60fb      	str	r3, [r7, #12]

    while (count--)
 80012c2:	e000      	b.n	80012c6 <ultraSonicVidDelayMicroSeconds+0x12>
    {
        __asm__ volatile ("nop");
 80012c4:	bf00      	nop
    while (count--)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1e5a      	subs	r2, r3, #1
 80012ca:	60fa      	str	r2, [r7, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f9      	bne.n	80012c4 <ultraSonicVidDelayMicroSeconds+0x10>
    }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <sendDataToQueue>:
volatile uint32_t FRONT_firstCap = 0, FRONT_secondCap = 0;
volatile uint32_t LHS_firstCap = 0, LHS_secondCap = 0;
volatile uint32_t RHS_firstCap = 0, RHS_secondCap = 0;
volatile uint8_t FRONT_flag = 0, LHS_flag= 0, RHS_flag= 0;

void sendDataToQueue(uint32_t sensorId, float distance){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	ed87 0a00 	vstr	s0, [r7]
    sensorTypeDef sensorData = { sensorId, distance };
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	613b      	str	r3, [r7, #16]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
    osMessageQueuePut(sensorQueueHandle, &sensorData, 0, 0);
 80012f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <sendDataToQueue+0x48>)
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	f107 010c 	add.w	r1, r7, #12
 8001300:	2300      	movs	r3, #0
 8001302:	2200      	movs	r2, #0
 8001304:	f003 f940 	bl	8004588 <osMessageQueuePut>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d007      	beq.n	800131e <sendDataToQueue+0x3e>
 800130e:	4b07      	ldr	r3, [pc, #28]	@ (800132c <sendDataToQueue+0x4c>)
 8001310:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	f3bf 8f4f 	dsb	sy
 800131a:	f3bf 8f6f 	isb	sy
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200002f4 	.word	0x200002f4
 800132c:	e000ed04 	.word	0xe000ed04

08001330 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af02      	add	r7, sp, #8
 8001336:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a18      	ldr	r2, [pc, #96]	@ (80013a0 <HAL_TIM_IC_CaptureCallback+0x70>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d10a      	bne.n	8001358 <HAL_TIM_IC_CaptureCallback+0x28>
    	ultraSonicVidInputCaptureHandler(htim, (uint32_t*)&FRONT_firstCap, (uint32_t*)&FRONT_secondCap, (uint8_t*)&FRONT_flag,1,sendDataToQueue);
 8001342:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <HAL_TIM_IC_CaptureCallback+0x74>)
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	2301      	movs	r3, #1
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	4b17      	ldr	r3, [pc, #92]	@ (80013a8 <HAL_TIM_IC_CaptureCallback+0x78>)
 800134c:	4a17      	ldr	r2, [pc, #92]	@ (80013ac <HAL_TIM_IC_CaptureCallback+0x7c>)
 800134e:	4918      	ldr	r1, [pc, #96]	@ (80013b0 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff07 	bl	8001164 <ultraSonicVidInputCaptureHandler>
    } else if (htim->Instance == TIM4) {
    	ultraSonicVidInputCaptureHandler(htim, (uint32_t*)&LHS_firstCap, (uint32_t*)&LHS_secondCap, (uint8_t*)&LHS_flag,2, sendDataToQueue);
    } else if (htim->Instance == TIM5) {
    	ultraSonicVidInputCaptureHandler(htim, (uint32_t*)&RHS_firstCap, (uint32_t*)&RHS_secondCap, (uint8_t*)&RHS_flag,3,sendDataToQueue );
    }
}
 8001356:	e01e      	b.n	8001396 <HAL_TIM_IC_CaptureCallback+0x66>
    } else if (htim->Instance == TIM4) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a15      	ldr	r2, [pc, #84]	@ (80013b4 <HAL_TIM_IC_CaptureCallback+0x84>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d10a      	bne.n	8001378 <HAL_TIM_IC_CaptureCallback+0x48>
    	ultraSonicVidInputCaptureHandler(htim, (uint32_t*)&LHS_firstCap, (uint32_t*)&LHS_secondCap, (uint8_t*)&LHS_flag,2, sendDataToQueue);
 8001362:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <HAL_TIM_IC_CaptureCallback+0x74>)
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	2302      	movs	r3, #2
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <HAL_TIM_IC_CaptureCallback+0x88>)
 800136c:	4a13      	ldr	r2, [pc, #76]	@ (80013bc <HAL_TIM_IC_CaptureCallback+0x8c>)
 800136e:	4914      	ldr	r1, [pc, #80]	@ (80013c0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fef7 	bl	8001164 <ultraSonicVidInputCaptureHandler>
}
 8001376:	e00e      	b.n	8001396 <HAL_TIM_IC_CaptureCallback+0x66>
    } else if (htim->Instance == TIM5) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a11      	ldr	r2, [pc, #68]	@ (80013c4 <HAL_TIM_IC_CaptureCallback+0x94>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d109      	bne.n	8001396 <HAL_TIM_IC_CaptureCallback+0x66>
    	ultraSonicVidInputCaptureHandler(htim, (uint32_t*)&RHS_firstCap, (uint32_t*)&RHS_secondCap, (uint8_t*)&RHS_flag,3,sendDataToQueue );
 8001382:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <HAL_TIM_IC_CaptureCallback+0x74>)
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	2303      	movs	r3, #3
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x98>)
 800138c:	4a0f      	ldr	r2, [pc, #60]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x9c>)
 800138e:	4910      	ldr	r1, [pc, #64]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff fee7 	bl	8001164 <ultraSonicVidInputCaptureHandler>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40000400 	.word	0x40000400
 80013a4:	080012e1 	.word	0x080012e1
 80013a8:	20000310 	.word	0x20000310
 80013ac:	200002fc 	.word	0x200002fc
 80013b0:	200002f8 	.word	0x200002f8
 80013b4:	40000800 	.word	0x40000800
 80013b8:	20000311 	.word	0x20000311
 80013bc:	20000304 	.word	0x20000304
 80013c0:	20000300 	.word	0x20000300
 80013c4:	40000c00 	.word	0x40000c00
 80013c8:	20000312 	.word	0x20000312
 80013cc:	2000030c 	.word	0x2000030c
 80013d0:	20000308 	.word	0x20000308

080013d4 <perceptionVidTriggerSensorsTask>:
void perceptionVidTriggerSensorsTask(void* pvParameters){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	for(;;){
		ultraSonicVidTrig(&FRONT_ultraSonic);
 80013dc:	4812      	ldr	r0, [pc, #72]	@ (8001428 <perceptionVidTriggerSensorsTask+0x54>)
 80013de:	f7ff ff47 	bl	8001270 <ultraSonicVidTrig>
		ultraSonicVidDelayMicroSeconds(10);
 80013e2:	200a      	movs	r0, #10
 80013e4:	f7ff ff66 	bl	80012b4 <ultraSonicVidDelayMicroSeconds>
		ultraSonicVidHaltTrig(&FRONT_ultraSonic);
 80013e8:	480f      	ldr	r0, [pc, #60]	@ (8001428 <perceptionVidTriggerSensorsTask+0x54>)
 80013ea:	f7ff ff52 	bl	8001292 <ultraSonicVidHaltTrig>
		osDelay(40);
 80013ee:	2028      	movs	r0, #40	@ 0x28
 80013f0:	f002 ff2e 	bl	8004250 <osDelay>
		ultraSonicVidTrig(&LHS_ultraSonic);
 80013f4:	480d      	ldr	r0, [pc, #52]	@ (800142c <perceptionVidTriggerSensorsTask+0x58>)
 80013f6:	f7ff ff3b 	bl	8001270 <ultraSonicVidTrig>
		ultraSonicVidDelayMicroSeconds(10);
 80013fa:	200a      	movs	r0, #10
 80013fc:	f7ff ff5a 	bl	80012b4 <ultraSonicVidDelayMicroSeconds>
		ultraSonicVidHaltTrig(&LHS_ultraSonic);
 8001400:	480a      	ldr	r0, [pc, #40]	@ (800142c <perceptionVidTriggerSensorsTask+0x58>)
 8001402:	f7ff ff46 	bl	8001292 <ultraSonicVidHaltTrig>
		osDelay(40);
 8001406:	2028      	movs	r0, #40	@ 0x28
 8001408:	f002 ff22 	bl	8004250 <osDelay>
		ultraSonicVidTrig(&RHS_ultraSonic);
 800140c:	4808      	ldr	r0, [pc, #32]	@ (8001430 <perceptionVidTriggerSensorsTask+0x5c>)
 800140e:	f7ff ff2f 	bl	8001270 <ultraSonicVidTrig>
		ultraSonicVidDelayMicroSeconds(20);
 8001412:	2014      	movs	r0, #20
 8001414:	f7ff ff4e 	bl	80012b4 <ultraSonicVidDelayMicroSeconds>
		ultraSonicVidHaltTrig(&RHS_ultraSonic);
 8001418:	4805      	ldr	r0, [pc, #20]	@ (8001430 <perceptionVidTriggerSensorsTask+0x5c>)
 800141a:	f7ff ff3a 	bl	8001292 <ultraSonicVidHaltTrig>
		osDelay(40);
 800141e:	2028      	movs	r0, #40	@ 0x28
 8001420:	f002 ff16 	bl	8004250 <osDelay>
		ultraSonicVidTrig(&FRONT_ultraSonic);
 8001424:	bf00      	nop
 8001426:	e7d9      	b.n	80013dc <perceptionVidTriggerSensorsTask+0x8>
 8001428:	20000058 	.word	0x20000058
 800142c:	20000078 	.word	0x20000078
 8001430:	20000098 	.word	0x20000098

08001434 <perceptionVidSendSensorDataTask>:
	}
}
void perceptionVidSendSensorDataTask(void* pvParameters) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	sensorTypeDef sensorToSend = {0};
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
    for (;;) {
        osDelay(50);
 8001446:	2032      	movs	r0, #50	@ 0x32
 8001448:	f002 ff02 	bl	8004250 <osDelay>
        if (osMessageQueueGet(sensorQueueHandle, &sensorToSend , NULL, 0) == osOK) {
 800144c:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <perceptionVidSendSensorDataTask+0x54>)
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	f107 0108 	add.w	r1, r7, #8
 8001454:	2300      	movs	r3, #0
 8001456:	2200      	movs	r2, #0
 8001458:	f003 f8f6 	bl	8004648 <osMessageQueueGet>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f1      	bne.n	8001446 <perceptionVidSendSensorDataTask+0x12>
        	osMutexAcquire(spiMutexHandle, osWaitForever);
 8001462:	4b0a      	ldr	r3, [pc, #40]	@ (800148c <perceptionVidSendSensorDataTask+0x58>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f04f 31ff 	mov.w	r1, #4294967295
 800146a:	4618      	mov	r0, r3
 800146c:	f002 ff91 	bl	8004392 <osMutexAcquire>
        	transmissionVidSendSensorData(&sensorToSend);
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fd8f 	bl	8000f98 <transmissionVidSendSensorData>
        	osMutexRelease(spiMutexHandle);
 800147a:	4b04      	ldr	r3, [pc, #16]	@ (800148c <perceptionVidSendSensorDataTask+0x58>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f002 ffd2 	bl	8004428 <osMutexRelease>
        osDelay(50);
 8001484:	e7df      	b.n	8001446 <perceptionVidSendSensorDataTask+0x12>
 8001486:	bf00      	nop
 8001488:	200002f4 	.word	0x200002f4
 800148c:	20000218 	.word	0x20000218

08001490 <perceptionVidInit>:
        }
    }
}
void perceptionVidInit(void) {
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
    sensorQueueHandle = osMessageQueueNew(10, sizeof(sensorTypeDef), &sensorQueue_attr);
 8001494:	4a0d      	ldr	r2, [pc, #52]	@ (80014cc <perceptionVidInit+0x3c>)
 8001496:	2108      	movs	r1, #8
 8001498:	200a      	movs	r0, #10
 800149a:	f003 f802 	bl	80044a2 <osMessageQueueNew>
 800149e:	4603      	mov	r3, r0
 80014a0:	4a0b      	ldr	r2, [pc, #44]	@ (80014d0 <perceptionVidInit+0x40>)
 80014a2:	6013      	str	r3, [r2, #0]
    ultraSonicVidInit(&FRONT_ultraSonic);
 80014a4:	480b      	ldr	r0, [pc, #44]	@ (80014d4 <perceptionVidInit+0x44>)
 80014a6:	f7ff fd99 	bl	8000fdc <ultraSonicVidInit>
    ultraSonicVidInit(&LHS_ultraSonic);
 80014aa:	480b      	ldr	r0, [pc, #44]	@ (80014d8 <perceptionVidInit+0x48>)
 80014ac:	f7ff fd96 	bl	8000fdc <ultraSonicVidInit>
    ultraSonicVidInit(&RHS_ultraSonic);
 80014b0:	480a      	ldr	r0, [pc, #40]	@ (80014dc <perceptionVidInit+0x4c>)
 80014b2:	f7ff fd93 	bl	8000fdc <ultraSonicVidInit>
    ultraSonicVidStart(&FRONT_ultraSonic);
 80014b6:	4807      	ldr	r0, [pc, #28]	@ (80014d4 <perceptionVidInit+0x44>)
 80014b8:	f7ff fe09 	bl	80010ce <ultraSonicVidStart>
    ultraSonicVidStart(&LHS_ultraSonic);
 80014bc:	4806      	ldr	r0, [pc, #24]	@ (80014d8 <perceptionVidInit+0x48>)
 80014be:	f7ff fe06 	bl	80010ce <ultraSonicVidStart>
    ultraSonicVidStart(&RHS_ultraSonic);
 80014c2:	4806      	ldr	r0, [pc, #24]	@ (80014dc <perceptionVidInit+0x4c>)
 80014c4:	f7ff fe03 	bl	80010ce <ultraSonicVidStart>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	0800709c 	.word	0x0800709c
 80014d0:	200002f4 	.word	0x200002f4
 80014d4:	20000058 	.word	0x20000058
 80014d8:	20000078 	.word	0x20000078
 80014dc:	20000098 	.word	0x20000098

080014e0 <perceptionVidBegin>:

void perceptionVidBegin(void) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b092      	sub	sp, #72	@ 0x48
 80014e4:	af00      	add	r7, sp, #0
	const osThreadAttr_t sendDateTaskAttr = {
 80014e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ea:	2224      	movs	r2, #36	@ 0x24
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f005 fc98 	bl	8006e24 <memset>
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <perceptionVidBegin+0x60>)
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80014f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80014fe:	2308      	movs	r3, #8
 8001500:	63fb      	str	r3, [r7, #60]	@ 0x3c
	    .name = "SendDataTask",
	    .priority = osPriorityLow,
	    .stack_size = 128 * 4
	};
	const osThreadAttr_t TrigSenorsTaskAttr = {
 8001502:	463b      	mov	r3, r7
 8001504:	2224      	movs	r2, #36	@ 0x24
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f005 fc8b 	bl	8006e24 <memset>
 800150e:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <perceptionVidBegin+0x64>)
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	2318      	movs	r3, #24
 800151a:	61bb      	str	r3, [r7, #24]
			.name = "TriggerSensors",
		    .priority = osPriorityNormal,
		    .stack_size = 128 * 4

	};
	osThreadNew(perceptionVidTriggerSensorsTask, NULL, &TrigSenorsTaskAttr);
 800151c:	463b      	mov	r3, r7
 800151e:	461a      	mov	r2, r3
 8001520:	2100      	movs	r1, #0
 8001522:	4809      	ldr	r0, [pc, #36]	@ (8001548 <perceptionVidBegin+0x68>)
 8001524:	f002 fe02 	bl	800412c <osThreadNew>
    osThreadNew(perceptionVidSendSensorDataTask, NULL, &sendDateTaskAttr);
 8001528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152c:	461a      	mov	r2, r3
 800152e:	2100      	movs	r1, #0
 8001530:	4806      	ldr	r0, [pc, #24]	@ (800154c <perceptionVidBegin+0x6c>)
 8001532:	f002 fdfb 	bl	800412c <osThreadNew>
}
 8001536:	bf00      	nop
 8001538:	3748      	adds	r7, #72	@ 0x48
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	0800703c 	.word	0x0800703c
 8001544:	0800704c 	.word	0x0800704c
 8001548:	080013d5 	.word	0x080013d5
 800154c:	08001435 	.word	0x08001435

08001550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001554:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <HAL_Init+0x40>)
 800155a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800155e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001560:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <HAL_Init+0x40>)
 8001566:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800156a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a07      	ldr	r2, [pc, #28]	@ (8001590 <HAL_Init+0x40>)
 8001572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001578:	2003      	movs	r0, #3
 800157a:	f000 f8d8 	bl	800172e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157e:	200f      	movs	r0, #15
 8001580:	f7ff f918 	bl	80007b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001584:	f7ff f8a2 	bl	80006cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023c00 	.word	0x40023c00

08001594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <HAL_IncTick+0x20>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_IncTick+0x24>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	4a04      	ldr	r2, [pc, #16]	@ (80015b8 <HAL_IncTick+0x24>)
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	200000bc 	.word	0x200000bc
 80015b8:	20000314 	.word	0x20000314

080015bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b03      	ldr	r3, [pc, #12]	@ (80015d0 <HAL_GetTick+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20000314 	.word	0x20000314

080015d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015f0:	4013      	ands	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001606:	4a04      	ldr	r2, [pc, #16]	@ (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	60d3      	str	r3, [r2, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001620:	4b04      	ldr	r3, [pc, #16]	@ (8001634 <__NVIC_GetPriorityGrouping+0x18>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	0a1b      	lsrs	r3, r3, #8
 8001626:	f003 0307 	and.w	r3, r3, #7
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	db0b      	blt.n	8001662 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	f003 021f 	and.w	r2, r3, #31
 8001650:	4907      	ldr	r1, [pc, #28]	@ (8001670 <__NVIC_EnableIRQ+0x38>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	2001      	movs	r0, #1
 800165a:	fa00 f202 	lsl.w	r2, r0, r2
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000e100 	.word	0xe000e100

08001674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	2b00      	cmp	r3, #0
 8001686:	db0a      	blt.n	800169e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	b2da      	uxtb	r2, r3
 800168c:	490c      	ldr	r1, [pc, #48]	@ (80016c0 <__NVIC_SetPriority+0x4c>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	0112      	lsls	r2, r2, #4
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	440b      	add	r3, r1
 8001698:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800169c:	e00a      	b.n	80016b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4908      	ldr	r1, [pc, #32]	@ (80016c4 <__NVIC_SetPriority+0x50>)
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	3b04      	subs	r3, #4
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	440b      	add	r3, r1
 80016b2:	761a      	strb	r2, [r3, #24]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000e100 	.word	0xe000e100
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	@ 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f1c3 0307 	rsb	r3, r3, #7
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	bf28      	it	cs
 80016e6:	2304      	movcs	r3, #4
 80016e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3304      	adds	r3, #4
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d902      	bls.n	80016f8 <NVIC_EncodePriority+0x30>
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3b03      	subs	r3, #3
 80016f6:	e000      	b.n	80016fa <NVIC_EncodePriority+0x32>
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	401a      	ands	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001710:	f04f 31ff 	mov.w	r1, #4294967295
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa01 f303 	lsl.w	r3, r1, r3
 800171a:	43d9      	mvns	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	4313      	orrs	r3, r2
         );
}
 8001722:	4618      	mov	r0, r3
 8001724:	3724      	adds	r7, #36	@ 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ff4c 	bl	80015d4 <__NVIC_SetPriorityGrouping>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001756:	f7ff ff61 	bl	800161c <__NVIC_GetPriorityGrouping>
 800175a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	68b9      	ldr	r1, [r7, #8]
 8001760:	6978      	ldr	r0, [r7, #20]
 8001762:	f7ff ffb1 	bl	80016c8 <NVIC_EncodePriority>
 8001766:	4602      	mov	r2, r0
 8001768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176c:	4611      	mov	r1, r2
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff80 	bl	8001674 <__NVIC_SetPriority>
}
 8001774:	bf00      	nop
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ff54 	bl	8001638 <__NVIC_EnableIRQ>
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	@ 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	e159      	b.n	8001a68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017b4:	2201      	movs	r2, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	f040 8148 	bne.w	8001a62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d005      	beq.n	80017ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d130      	bne.n	800184c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001820:	2201      	movs	r2, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f003 0201 	and.w	r2, r3, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b03      	cmp	r3, #3
 8001856:	d017      	beq.n	8001888 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d123      	bne.n	80018dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	08da      	lsrs	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3208      	adds	r2, #8
 800189c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	220f      	movs	r2, #15
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	691a      	ldr	r2, [r3, #16]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	08da      	lsrs	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3208      	adds	r2, #8
 80018d6:	69b9      	ldr	r1, [r7, #24]
 80018d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0203 	and.w	r2, r3, #3
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80a2 	beq.w	8001a62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b57      	ldr	r3, [pc, #348]	@ (8001a80 <HAL_GPIO_Init+0x2e8>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001926:	4a56      	ldr	r2, [pc, #344]	@ (8001a80 <HAL_GPIO_Init+0x2e8>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800192c:	6453      	str	r3, [r2, #68]	@ 0x44
 800192e:	4b54      	ldr	r3, [pc, #336]	@ (8001a80 <HAL_GPIO_Init+0x2e8>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800193a:	4a52      	ldr	r2, [pc, #328]	@ (8001a84 <HAL_GPIO_Init+0x2ec>)
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	3302      	adds	r3, #2
 8001942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	220f      	movs	r2, #15
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a49      	ldr	r2, [pc, #292]	@ (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d019      	beq.n	800199a <HAL_GPIO_Init+0x202>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a48      	ldr	r2, [pc, #288]	@ (8001a8c <HAL_GPIO_Init+0x2f4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0x1fe>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a47      	ldr	r2, [pc, #284]	@ (8001a90 <HAL_GPIO_Init+0x2f8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00d      	beq.n	8001992 <HAL_GPIO_Init+0x1fa>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a46      	ldr	r2, [pc, #280]	@ (8001a94 <HAL_GPIO_Init+0x2fc>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d007      	beq.n	800198e <HAL_GPIO_Init+0x1f6>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a45      	ldr	r2, [pc, #276]	@ (8001a98 <HAL_GPIO_Init+0x300>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d101      	bne.n	800198a <HAL_GPIO_Init+0x1f2>
 8001986:	2304      	movs	r3, #4
 8001988:	e008      	b.n	800199c <HAL_GPIO_Init+0x204>
 800198a:	2307      	movs	r3, #7
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x204>
 800198e:	2303      	movs	r3, #3
 8001990:	e004      	b.n	800199c <HAL_GPIO_Init+0x204>
 8001992:	2302      	movs	r3, #2
 8001994:	e002      	b.n	800199c <HAL_GPIO_Init+0x204>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_GPIO_Init+0x204>
 800199a:	2300      	movs	r3, #0
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	f002 0203 	and.w	r2, r2, #3
 80019a2:	0092      	lsls	r2, r2, #2
 80019a4:	4093      	lsls	r3, r2
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ac:	4935      	ldr	r1, [pc, #212]	@ (8001a84 <HAL_GPIO_Init+0x2ec>)
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	3302      	adds	r3, #2
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ba:	4b38      	ldr	r3, [pc, #224]	@ (8001a9c <HAL_GPIO_Init+0x304>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019de:	4a2f      	ldr	r2, [pc, #188]	@ (8001a9c <HAL_GPIO_Init+0x304>)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a9c <HAL_GPIO_Init+0x304>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a08:	4a24      	ldr	r2, [pc, #144]	@ (8001a9c <HAL_GPIO_Init+0x304>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a0e:	4b23      	ldr	r3, [pc, #140]	@ (8001a9c <HAL_GPIO_Init+0x304>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a32:	4a1a      	ldr	r2, [pc, #104]	@ (8001a9c <HAL_GPIO_Init+0x304>)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a38:	4b18      	ldr	r3, [pc, #96]	@ (8001a9c <HAL_GPIO_Init+0x304>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a9c <HAL_GPIO_Init+0x304>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3301      	adds	r3, #1
 8001a66:	61fb      	str	r3, [r7, #28]
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	2b0f      	cmp	r3, #15
 8001a6c:	f67f aea2 	bls.w	80017b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3724      	adds	r7, #36	@ 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40013800 	.word	0x40013800
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	40020800 	.word	0x40020800
 8001a94:	40020c00 	.word	0x40020c00
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40013c00 	.word	0x40013c00

08001aa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	887b      	ldrh	r3, [r7, #2]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	e001      	b.n	8001ac2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]
 8001adc:	4613      	mov	r3, r2
 8001ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae0:	787b      	ldrb	r3, [r7, #1]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae6:	887a      	ldrh	r2, [r7, #2]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aec:	e003      	b.n	8001af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	041a      	lsls	r2, r3, #16
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	619a      	str	r2, [r3, #24]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e267      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d075      	beq.n	8001c0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b22:	4b88      	ldr	r3, [pc, #544]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d00c      	beq.n	8001b48 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b2e:	4b85      	ldr	r3, [pc, #532]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d112      	bne.n	8001b60 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b3a:	4b82      	ldr	r3, [pc, #520]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b46:	d10b      	bne.n	8001b60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	4b7e      	ldr	r3, [pc, #504]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d05b      	beq.n	8001c0c <HAL_RCC_OscConfig+0x108>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d157      	bne.n	8001c0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e242      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b68:	d106      	bne.n	8001b78 <HAL_RCC_OscConfig+0x74>
 8001b6a:	4b76      	ldr	r3, [pc, #472]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a75      	ldr	r2, [pc, #468]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e01d      	b.n	8001bb4 <HAL_RCC_OscConfig+0xb0>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x98>
 8001b82:	4b70      	ldr	r3, [pc, #448]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a6f      	ldr	r2, [pc, #444]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b6d      	ldr	r3, [pc, #436]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a6c      	ldr	r2, [pc, #432]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e00b      	b.n	8001bb4 <HAL_RCC_OscConfig+0xb0>
 8001b9c:	4b69      	ldr	r3, [pc, #420]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a68      	ldr	r2, [pc, #416]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b66      	ldr	r3, [pc, #408]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a65      	ldr	r2, [pc, #404]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001bae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d013      	beq.n	8001be4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fcfe 	bl	80015bc <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fcfa 	bl	80015bc <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	@ 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e207      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	4b5b      	ldr	r3, [pc, #364]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xc0>
 8001be2:	e014      	b.n	8001c0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff fcea 	bl	80015bc <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff fce6 	bl	80015bc <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	@ 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e1f3      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfe:	4b51      	ldr	r3, [pc, #324]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0xe8>
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d063      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00b      	beq.n	8001c3e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c26:	4b47      	ldr	r3, [pc, #284]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d11c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c32:	4b44      	ldr	r3, [pc, #272]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d116      	bne.n	8001c6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3e:	4b41      	ldr	r3, [pc, #260]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_RCC_OscConfig+0x152>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d001      	beq.n	8001c56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e1c7      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c56:	4b3b      	ldr	r3, [pc, #236]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4937      	ldr	r1, [pc, #220]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6a:	e03a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d020      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c74:	4b34      	ldr	r3, [pc, #208]	@ (8001d48 <HAL_RCC_OscConfig+0x244>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7ff fc9f 	bl	80015bc <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c82:	f7ff fc9b 	bl	80015bc <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e1a8      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c94:	4b2b      	ldr	r3, [pc, #172]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca0:	4b28      	ldr	r3, [pc, #160]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4925      	ldr	r1, [pc, #148]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	600b      	str	r3, [r1, #0]
 8001cb4:	e015      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb6:	4b24      	ldr	r3, [pc, #144]	@ (8001d48 <HAL_RCC_OscConfig+0x244>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fc7e 	bl	80015bc <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc4:	f7ff fc7a 	bl	80015bc <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e187      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d036      	beq.n	8001d5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d016      	beq.n	8001d24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HAL_RCC_OscConfig+0x248>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfc:	f7ff fc5e 	bl	80015bc <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d04:	f7ff fc5a 	bl	80015bc <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e167      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <HAL_RCC_OscConfig+0x240>)
 8001d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x200>
 8001d22:	e01b      	b.n	8001d5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d24:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <HAL_RCC_OscConfig+0x248>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2a:	f7ff fc47 	bl	80015bc <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d30:	e00e      	b.n	8001d50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d32:	f7ff fc43 	bl	80015bc <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d907      	bls.n	8001d50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e150      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4e2>
 8001d44:	40023800 	.word	0x40023800
 8001d48:	42470000 	.word	0x42470000
 8001d4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d50:	4b88      	ldr	r3, [pc, #544]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001d52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1ea      	bne.n	8001d32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 8097 	beq.w	8001e98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6e:	4b81      	ldr	r3, [pc, #516]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10f      	bne.n	8001d9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	4b7d      	ldr	r3, [pc, #500]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	4a7c      	ldr	r2, [pc, #496]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8a:	4b7a      	ldr	r3, [pc, #488]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d96:	2301      	movs	r3, #1
 8001d98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9a:	4b77      	ldr	r3, [pc, #476]	@ (8001f78 <HAL_RCC_OscConfig+0x474>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d118      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da6:	4b74      	ldr	r3, [pc, #464]	@ (8001f78 <HAL_RCC_OscConfig+0x474>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a73      	ldr	r2, [pc, #460]	@ (8001f78 <HAL_RCC_OscConfig+0x474>)
 8001dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db2:	f7ff fc03 	bl	80015bc <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dba:	f7ff fbff 	bl	80015bc <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e10c      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	4b6a      	ldr	r3, [pc, #424]	@ (8001f78 <HAL_RCC_OscConfig+0x474>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d106      	bne.n	8001dee <HAL_RCC_OscConfig+0x2ea>
 8001de0:	4b64      	ldr	r3, [pc, #400]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de4:	4a63      	ldr	r2, [pc, #396]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dec:	e01c      	b.n	8001e28 <HAL_RCC_OscConfig+0x324>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b05      	cmp	r3, #5
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x30c>
 8001df6:	4b5f      	ldr	r3, [pc, #380]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfa:	4a5e      	ldr	r2, [pc, #376]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e02:	4b5c      	ldr	r3, [pc, #368]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e06:	4a5b      	ldr	r2, [pc, #364]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e0e:	e00b      	b.n	8001e28 <HAL_RCC_OscConfig+0x324>
 8001e10:	4b58      	ldr	r3, [pc, #352]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e14:	4a57      	ldr	r2, [pc, #348]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e1c:	4b55      	ldr	r3, [pc, #340]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e20:	4a54      	ldr	r2, [pc, #336]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001e22:	f023 0304 	bic.w	r3, r3, #4
 8001e26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d015      	beq.n	8001e5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e30:	f7ff fbc4 	bl	80015bc <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e38:	f7ff fbc0 	bl	80015bc <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e0cb      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4e:	4b49      	ldr	r3, [pc, #292]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0ee      	beq.n	8001e38 <HAL_RCC_OscConfig+0x334>
 8001e5a:	e014      	b.n	8001e86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5c:	f7ff fbae 	bl	80015bc <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e64:	f7ff fbaa 	bl	80015bc <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e0b5      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1ee      	bne.n	8001e64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e86:	7dfb      	ldrb	r3, [r7, #23]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d105      	bne.n	8001e98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8c:	4b39      	ldr	r3, [pc, #228]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e90:	4a38      	ldr	r2, [pc, #224]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001e92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80a1 	beq.w	8001fe4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ea2:	4b34      	ldr	r3, [pc, #208]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d05c      	beq.n	8001f68 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d141      	bne.n	8001f3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb6:	4b31      	ldr	r3, [pc, #196]	@ (8001f7c <HAL_RCC_OscConfig+0x478>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fb7e 	bl	80015bc <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7ff fb7a 	bl	80015bc <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e087      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed6:	4b27      	ldr	r3, [pc, #156]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69da      	ldr	r2, [r3, #28]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef0:	019b      	lsls	r3, r3, #6
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef8:	085b      	lsrs	r3, r3, #1
 8001efa:	3b01      	subs	r3, #1
 8001efc:	041b      	lsls	r3, r3, #16
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f04:	061b      	lsls	r3, r3, #24
 8001f06:	491b      	ldr	r1, [pc, #108]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f7c <HAL_RCC_OscConfig+0x478>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7ff fb53 	bl	80015bc <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7ff fb4f 	bl	80015bc <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e05c      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2c:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x416>
 8001f38:	e054      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3a:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <HAL_RCC_OscConfig+0x478>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7ff fb3c 	bl	80015bc <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f48:	f7ff fb38 	bl	80015bc <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e045      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5a:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x444>
 8001f66:	e03d      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e038      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4e2>
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40007000 	.word	0x40007000
 8001f7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f80:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff0 <HAL_RCC_OscConfig+0x4ec>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d028      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d121      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d11a      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d111      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc6:	085b      	lsrs	r3, r3, #1
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d107      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800

08001ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0cc      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002008:	4b68      	ldr	r3, [pc, #416]	@ (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d90c      	bls.n	8002030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b65      	ldr	r3, [pc, #404]	@ (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b63      	ldr	r3, [pc, #396]	@ (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0b8      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d020      	beq.n	800207e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002048:	4b59      	ldr	r3, [pc, #356]	@ (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a58      	ldr	r2, [pc, #352]	@ (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002052:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002060:	4b53      	ldr	r3, [pc, #332]	@ (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a52      	ldr	r2, [pc, #328]	@ (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800206a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800206c:	4b50      	ldr	r3, [pc, #320]	@ (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	494d      	ldr	r1, [pc, #308]	@ (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d044      	beq.n	8002114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	4b47      	ldr	r3, [pc, #284]	@ (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d119      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e07f      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d003      	beq.n	80020b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b2:	4b3f      	ldr	r3, [pc, #252]	@ (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e06f      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c2:	4b3b      	ldr	r3, [pc, #236]	@ (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e067      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d2:	4b37      	ldr	r3, [pc, #220]	@ (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f023 0203 	bic.w	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4934      	ldr	r1, [pc, #208]	@ (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e4:	f7ff fa6a 	bl	80015bc <HAL_GetTick>
 80020e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ec:	f7ff fa66 	bl	80015bc <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e04f      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	4b2b      	ldr	r3, [pc, #172]	@ (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 020c 	and.w	r2, r3, #12
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	429a      	cmp	r2, r3
 8002112:	d1eb      	bne.n	80020ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002114:	4b25      	ldr	r3, [pc, #148]	@ (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d20c      	bcs.n	800213c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b22      	ldr	r3, [pc, #136]	@ (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b20      	ldr	r3, [pc, #128]	@ (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e032      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002148:	4b19      	ldr	r3, [pc, #100]	@ (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4916      	ldr	r1, [pc, #88]	@ (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	4313      	orrs	r3, r2
 8002158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002166:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	490e      	ldr	r1, [pc, #56]	@ (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800217a:	f000 f821 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 800217e:	4602      	mov	r2, r0
 8002180:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	490a      	ldr	r1, [pc, #40]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 800218c:	5ccb      	ldrb	r3, [r1, r3]
 800218e:	fa22 f303 	lsr.w	r3, r2, r3
 8002192:	4a09      	ldr	r2, [pc, #36]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002196:	4b09      	ldr	r3, [pc, #36]	@ (80021bc <HAL_RCC_ClockConfig+0x1c8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fb0a 	bl	80007b4 <HAL_InitTick>

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40023c00 	.word	0x40023c00
 80021b0:	40023800 	.word	0x40023800
 80021b4:	08007074 	.word	0x08007074
 80021b8:	20000000 	.word	0x20000000
 80021bc:	200000b8 	.word	0x200000b8

080021c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c4:	b090      	sub	sp, #64	@ 0x40
 80021c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d8:	4b59      	ldr	r3, [pc, #356]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x180>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d00d      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x40>
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	f200 80a1 	bhi.w	800232c <HAL_RCC_GetSysClockFreq+0x16c>
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x34>
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d003      	beq.n	80021fa <HAL_RCC_GetSysClockFreq+0x3a>
 80021f2:	e09b      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021f4:	4b53      	ldr	r3, [pc, #332]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x184>)
 80021f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021f8:	e09b      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021fa:	4b53      	ldr	r3, [pc, #332]	@ (8002348 <HAL_RCC_GetSysClockFreq+0x188>)
 80021fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021fe:	e098      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002200:	4b4f      	ldr	r3, [pc, #316]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x180>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002208:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800220a:	4b4d      	ldr	r3, [pc, #308]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x180>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d028      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002216:	4b4a      	ldr	r3, [pc, #296]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x180>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	099b      	lsrs	r3, r3, #6
 800221c:	2200      	movs	r2, #0
 800221e:	623b      	str	r3, [r7, #32]
 8002220:	627a      	str	r2, [r7, #36]	@ 0x24
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002228:	2100      	movs	r1, #0
 800222a:	4b47      	ldr	r3, [pc, #284]	@ (8002348 <HAL_RCC_GetSysClockFreq+0x188>)
 800222c:	fb03 f201 	mul.w	r2, r3, r1
 8002230:	2300      	movs	r3, #0
 8002232:	fb00 f303 	mul.w	r3, r0, r3
 8002236:	4413      	add	r3, r2
 8002238:	4a43      	ldr	r2, [pc, #268]	@ (8002348 <HAL_RCC_GetSysClockFreq+0x188>)
 800223a:	fba0 1202 	umull	r1, r2, r0, r2
 800223e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002240:	460a      	mov	r2, r1
 8002242:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002244:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002246:	4413      	add	r3, r2
 8002248:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800224a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800224c:	2200      	movs	r2, #0
 800224e:	61bb      	str	r3, [r7, #24]
 8002250:	61fa      	str	r2, [r7, #28]
 8002252:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002256:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800225a:	f7fd ffc1 	bl	80001e0 <__aeabi_uldivmod>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4613      	mov	r3, r2
 8002264:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002266:	e053      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002268:	4b35      	ldr	r3, [pc, #212]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x180>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	099b      	lsrs	r3, r3, #6
 800226e:	2200      	movs	r2, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	617a      	str	r2, [r7, #20]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800227a:	f04f 0b00 	mov.w	fp, #0
 800227e:	4652      	mov	r2, sl
 8002280:	465b      	mov	r3, fp
 8002282:	f04f 0000 	mov.w	r0, #0
 8002286:	f04f 0100 	mov.w	r1, #0
 800228a:	0159      	lsls	r1, r3, #5
 800228c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002290:	0150      	lsls	r0, r2, #5
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	ebb2 080a 	subs.w	r8, r2, sl
 800229a:	eb63 090b 	sbc.w	r9, r3, fp
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022b2:	ebb2 0408 	subs.w	r4, r2, r8
 80022b6:	eb63 0509 	sbc.w	r5, r3, r9
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	00eb      	lsls	r3, r5, #3
 80022c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022c8:	00e2      	lsls	r2, r4, #3
 80022ca:	4614      	mov	r4, r2
 80022cc:	461d      	mov	r5, r3
 80022ce:	eb14 030a 	adds.w	r3, r4, sl
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	eb45 030b 	adc.w	r3, r5, fp
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022e6:	4629      	mov	r1, r5
 80022e8:	028b      	lsls	r3, r1, #10
 80022ea:	4621      	mov	r1, r4
 80022ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022f0:	4621      	mov	r1, r4
 80022f2:	028a      	lsls	r2, r1, #10
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022fa:	2200      	movs	r2, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	60fa      	str	r2, [r7, #12]
 8002300:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002304:	f7fd ff6c 	bl	80001e0 <__aeabi_uldivmod>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4613      	mov	r3, r2
 800230e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x180>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	0c1b      	lsrs	r3, r3, #16
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	3301      	adds	r3, #1
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002320:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002324:	fbb2 f3f3 	udiv	r3, r2, r3
 8002328:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800232a:	e002      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x184>)
 800232e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002334:	4618      	mov	r0, r3
 8002336:	3740      	adds	r7, #64	@ 0x40
 8002338:	46bd      	mov	sp, r7
 800233a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	00f42400 	.word	0x00f42400
 8002348:	017d7840 	.word	0x017d7840

0800234c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002350:	4b03      	ldr	r3, [pc, #12]	@ (8002360 <HAL_RCC_GetHCLKFreq+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000000 	.word	0x20000000

08002364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002368:	f7ff fff0 	bl	800234c <HAL_RCC_GetHCLKFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	0b5b      	lsrs	r3, r3, #13
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4903      	ldr	r1, [pc, #12]	@ (8002388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40023800 	.word	0x40023800
 8002388:	08007084 	.word	0x08007084

0800238c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	220f      	movs	r2, #15
 800239a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800239c:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <HAL_RCC_GetClockConfig+0x5c>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0203 	and.w	r2, r3, #3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023a8:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <HAL_RCC_GetClockConfig+0x5c>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023b4:	4b0c      	ldr	r3, [pc, #48]	@ (80023e8 <HAL_RCC_GetClockConfig+0x5c>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023c0:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <HAL_RCC_GetClockConfig+0x5c>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	08db      	lsrs	r3, r3, #3
 80023c6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023ce:	4b07      	ldr	r3, [pc, #28]	@ (80023ec <HAL_RCC_GetClockConfig+0x60>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0207 	and.w	r2, r3, #7
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	601a      	str	r2, [r3, #0]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40023c00 	.word	0x40023c00

080023f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e07b      	b.n	80024fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	2b00      	cmp	r3, #0
 8002408:	d108      	bne.n	800241c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002412:	d009      	beq.n	8002428 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
 800241a:	e005      	b.n	8002428 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe f96e 	bl	8000724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800245e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ac:	ea42 0103 	orr.w	r1, r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	f003 0104 	and.w	r1, r3, #4
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	f003 0210 	and.w	r2, r3, #16
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69da      	ldr	r2, [r3, #28]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b088      	sub	sp, #32
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002512:	f7ff f853 	bl	80015bc <HAL_GetTick>
 8002516:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d001      	beq.n	800252c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002528:	2302      	movs	r3, #2
 800252a:	e12a      	b.n	8002782 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_SPI_Transmit+0x36>
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e122      	b.n	8002782 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_SPI_Transmit+0x48>
 8002546:	2302      	movs	r3, #2
 8002548:	e11b      	b.n	8002782 <HAL_SPI_Transmit+0x280>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2203      	movs	r2, #3
 8002556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	88fa      	ldrh	r2, [r7, #6]
 800256a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	88fa      	ldrh	r2, [r7, #6]
 8002570:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002598:	d10f      	bne.n	80025ba <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c4:	2b40      	cmp	r3, #64	@ 0x40
 80025c6:	d007      	beq.n	80025d8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025e0:	d152      	bne.n	8002688 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_SPI_Transmit+0xee>
 80025ea:	8b7b      	ldrh	r3, [r7, #26]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d145      	bne.n	800267c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f4:	881a      	ldrh	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002600:	1c9a      	adds	r2, r3, #2
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002614:	e032      	b.n	800267c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b02      	cmp	r3, #2
 8002622:	d112      	bne.n	800264a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002628:	881a      	ldrh	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002634:	1c9a      	adds	r2, r3, #2
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002648:	e018      	b.n	800267c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800264a:	f7fe ffb7 	bl	80015bc <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d803      	bhi.n	8002662 <HAL_SPI_Transmit+0x160>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d102      	bne.n	8002668 <HAL_SPI_Transmit+0x166>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d109      	bne.n	800267c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e082      	b.n	8002782 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1c7      	bne.n	8002616 <HAL_SPI_Transmit+0x114>
 8002686:	e053      	b.n	8002730 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <HAL_SPI_Transmit+0x194>
 8002690:	8b7b      	ldrh	r3, [r7, #26]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d147      	bne.n	8002726 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	330c      	adds	r3, #12
 80026a0:	7812      	ldrb	r2, [r2, #0]
 80026a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026bc:	e033      	b.n	8002726 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d113      	bne.n	80026f4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	330c      	adds	r3, #12
 80026d6:	7812      	ldrb	r2, [r2, #0]
 80026d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80026f2:	e018      	b.n	8002726 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026f4:	f7fe ff62 	bl	80015bc <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d803      	bhi.n	800270c <HAL_SPI_Transmit+0x20a>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270a:	d102      	bne.n	8002712 <HAL_SPI_Transmit+0x210>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e02d      	b.n	8002782 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1c6      	bne.n	80026be <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	6839      	ldr	r1, [r7, #0]
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fa59 	bl	8002bec <SPI_EndRxTxTransaction>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002780:	2300      	movs	r3, #0
  }
}
 8002782:	4618      	mov	r0, r3
 8002784:	3720      	adds	r7, #32
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b08a      	sub	sp, #40	@ 0x28
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002798:	2301      	movs	r3, #1
 800279a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800279c:	f7fe ff0e 	bl	80015bc <HAL_GetTick>
 80027a0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027a8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80027b0:	887b      	ldrh	r3, [r7, #2]
 80027b2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027b4:	7ffb      	ldrb	r3, [r7, #31]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d00c      	beq.n	80027d4 <HAL_SPI_TransmitReceive+0x4a>
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027c0:	d106      	bne.n	80027d0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d102      	bne.n	80027d0 <HAL_SPI_TransmitReceive+0x46>
 80027ca:	7ffb      	ldrb	r3, [r7, #31]
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d001      	beq.n	80027d4 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80027d0:	2302      	movs	r3, #2
 80027d2:	e17f      	b.n	8002ad4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_SPI_TransmitReceive+0x5c>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_SPI_TransmitReceive+0x5c>
 80027e0:	887b      	ldrh	r3, [r7, #2]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e174      	b.n	8002ad4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_SPI_TransmitReceive+0x6e>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e16d      	b.n	8002ad4 <HAL_SPI_TransmitReceive+0x34a>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b04      	cmp	r3, #4
 800280a:	d003      	beq.n	8002814 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2205      	movs	r2, #5
 8002810:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	887a      	ldrh	r2, [r7, #2]
 800282a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	887a      	ldrh	r2, [r7, #2]
 8002836:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002854:	2b40      	cmp	r3, #64	@ 0x40
 8002856:	d007      	beq.n	8002868 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002866:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002870:	d17e      	bne.n	8002970 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_SPI_TransmitReceive+0xf6>
 800287a:	8afb      	ldrh	r3, [r7, #22]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d16c      	bne.n	800295a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002884:	881a      	ldrh	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	1c9a      	adds	r2, r3, #2
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028a4:	e059      	b.n	800295a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d11b      	bne.n	80028ec <HAL_SPI_TransmitReceive+0x162>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d016      	beq.n	80028ec <HAL_SPI_TransmitReceive+0x162>
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d113      	bne.n	80028ec <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c8:	881a      	ldrh	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d4:	1c9a      	adds	r2, r3, #2
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d119      	bne.n	800292e <HAL_SPI_TransmitReceive+0x1a4>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d014      	beq.n	800292e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800290e:	b292      	uxth	r2, r2
 8002910:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002916:	1c9a      	adds	r2, r3, #2
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800292a:	2301      	movs	r3, #1
 800292c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800292e:	f7fe fe45 	bl	80015bc <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800293a:	429a      	cmp	r2, r3
 800293c:	d80d      	bhi.n	800295a <HAL_SPI_TransmitReceive+0x1d0>
 800293e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d009      	beq.n	800295a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e0bc      	b.n	8002ad4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1a0      	bne.n	80028a6 <HAL_SPI_TransmitReceive+0x11c>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d19b      	bne.n	80028a6 <HAL_SPI_TransmitReceive+0x11c>
 800296e:	e082      	b.n	8002a76 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <HAL_SPI_TransmitReceive+0x1f4>
 8002978:	8afb      	ldrh	r3, [r7, #22]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d171      	bne.n	8002a62 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	330c      	adds	r3, #12
 8002988:	7812      	ldrb	r2, [r2, #0]
 800298a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029a4:	e05d      	b.n	8002a62 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d11c      	bne.n	80029ee <HAL_SPI_TransmitReceive+0x264>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d017      	beq.n	80029ee <HAL_SPI_TransmitReceive+0x264>
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d114      	bne.n	80029ee <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	330c      	adds	r3, #12
 80029ce:	7812      	ldrb	r2, [r2, #0]
 80029d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d119      	bne.n	8002a30 <HAL_SPI_TransmitReceive+0x2a6>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d014      	beq.n	8002a30 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a30:	f7fe fdc4 	bl	80015bc <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d803      	bhi.n	8002a48 <HAL_SPI_TransmitReceive+0x2be>
 8002a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a46:	d102      	bne.n	8002a4e <HAL_SPI_TransmitReceive+0x2c4>
 8002a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e038      	b.n	8002ad4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d19c      	bne.n	80029a6 <HAL_SPI_TransmitReceive+0x21c>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d197      	bne.n	80029a6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a76:	6a3a      	ldr	r2, [r7, #32]
 8002a78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f8b6 	bl	8002bec <SPI_EndRxTxTransaction>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e01d      	b.n	8002ad4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10a      	bne.n	8002ab6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
  }
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3728      	adds	r7, #40	@ 0x28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002aec:	f7fe fd66 	bl	80015bc <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	4413      	add	r3, r2
 8002afa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002afc:	f7fe fd5e 	bl	80015bc <HAL_GetTick>
 8002b00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b02:	4b39      	ldr	r3, [pc, #228]	@ (8002be8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	015b      	lsls	r3, r3, #5
 8002b08:	0d1b      	lsrs	r3, r3, #20
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	fb02 f303 	mul.w	r3, r2, r3
 8002b10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b12:	e054      	b.n	8002bbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1a:	d050      	beq.n	8002bbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b1c:	f7fe fd4e 	bl	80015bc <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d902      	bls.n	8002b32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d13d      	bne.n	8002bae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002b40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b4a:	d111      	bne.n	8002b70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b54:	d004      	beq.n	8002b60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b5e:	d107      	bne.n	8002b70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b78:	d10f      	bne.n	8002b9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e017      	b.n	8002bde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d19b      	bne.n	8002b14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000000 	.word	0x20000000

08002bec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	2102      	movs	r1, #2
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7ff ff6a 	bl	8002adc <SPI_WaitFlagStateUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c12:	f043 0220 	orr.w	r2, r3, #32
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e032      	b.n	8002c84 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c8c <SPI_EndRxTxTransaction+0xa0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a1b      	ldr	r2, [pc, #108]	@ (8002c90 <SPI_EndRxTxTransaction+0xa4>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	0d5b      	lsrs	r3, r3, #21
 8002c2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
 8002c32:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c3c:	d112      	bne.n	8002c64 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2200      	movs	r2, #0
 8002c46:	2180      	movs	r1, #128	@ 0x80
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7ff ff47 	bl	8002adc <SPI_WaitFlagStateUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d016      	beq.n	8002c82 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c58:	f043 0220 	orr.w	r2, r3, #32
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e00f      	b.n	8002c84 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7a:	2b80      	cmp	r3, #128	@ 0x80
 8002c7c:	d0f2      	beq.n	8002c64 <SPI_EndRxTxTransaction+0x78>
 8002c7e:	e000      	b.n	8002c82 <SPI_EndRxTxTransaction+0x96>
        break;
 8002c80:	bf00      	nop
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	165e9f81 	.word	0x165e9f81

08002c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e041      	b.n	8002d2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f839 	bl	8002d32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f000 fe2c 	bl	8003930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d001      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e044      	b.n	8002dea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8002df8 <HAL_TIM_Base_Start_IT+0xb0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d018      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x6c>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d8a:	d013      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x6c>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1a      	ldr	r2, [pc, #104]	@ (8002dfc <HAL_TIM_Base_Start_IT+0xb4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00e      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x6c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a19      	ldr	r2, [pc, #100]	@ (8002e00 <HAL_TIM_Base_Start_IT+0xb8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x6c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a17      	ldr	r2, [pc, #92]	@ (8002e04 <HAL_TIM_Base_Start_IT+0xbc>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d004      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x6c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a16      	ldr	r2, [pc, #88]	@ (8002e08 <HAL_TIM_Base_Start_IT+0xc0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d111      	bne.n	8002dd8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d010      	beq.n	8002de8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0201 	orr.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd6:	e007      	b.n	8002de8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40010000 	.word	0x40010000
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40000800 	.word	0x40000800
 8002e04:	40000c00 	.word	0x40000c00
 8002e08:	40014000 	.word	0x40014000

08002e0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e041      	b.n	8002ea2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f839 	bl	8002eaa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3304      	adds	r3, #4
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	f000 fd70 	bl	8003930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <HAL_TIM_PWM_Start+0x24>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	bf14      	ite	ne
 8002edc:	2301      	movne	r3, #1
 8002ede:	2300      	moveq	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e022      	b.n	8002f2a <HAL_TIM_PWM_Start+0x6a>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d109      	bne.n	8002efe <HAL_TIM_PWM_Start+0x3e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	bf14      	ite	ne
 8002ef6:	2301      	movne	r3, #1
 8002ef8:	2300      	moveq	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	e015      	b.n	8002f2a <HAL_TIM_PWM_Start+0x6a>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d109      	bne.n	8002f18 <HAL_TIM_PWM_Start+0x58>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	bf14      	ite	ne
 8002f10:	2301      	movne	r3, #1
 8002f12:	2300      	moveq	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	e008      	b.n	8002f2a <HAL_TIM_PWM_Start+0x6a>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	bf14      	ite	ne
 8002f24:	2301      	movne	r3, #1
 8002f26:	2300      	moveq	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e068      	b.n	8003004 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d104      	bne.n	8002f42 <HAL_TIM_PWM_Start+0x82>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f40:	e013      	b.n	8002f6a <HAL_TIM_PWM_Start+0xaa>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d104      	bne.n	8002f52 <HAL_TIM_PWM_Start+0x92>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f50:	e00b      	b.n	8002f6a <HAL_TIM_PWM_Start+0xaa>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d104      	bne.n	8002f62 <HAL_TIM_PWM_Start+0xa2>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f60:	e003      	b.n	8002f6a <HAL_TIM_PWM_Start+0xaa>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2202      	movs	r2, #2
 8002f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	6839      	ldr	r1, [r7, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 f812 	bl	8003f9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a23      	ldr	r2, [pc, #140]	@ (800300c <HAL_TIM_PWM_Start+0x14c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d107      	bne.n	8002f92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1d      	ldr	r2, [pc, #116]	@ (800300c <HAL_TIM_PWM_Start+0x14c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d018      	beq.n	8002fce <HAL_TIM_PWM_Start+0x10e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fa4:	d013      	beq.n	8002fce <HAL_TIM_PWM_Start+0x10e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a19      	ldr	r2, [pc, #100]	@ (8003010 <HAL_TIM_PWM_Start+0x150>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00e      	beq.n	8002fce <HAL_TIM_PWM_Start+0x10e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a17      	ldr	r2, [pc, #92]	@ (8003014 <HAL_TIM_PWM_Start+0x154>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d009      	beq.n	8002fce <HAL_TIM_PWM_Start+0x10e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a16      	ldr	r2, [pc, #88]	@ (8003018 <HAL_TIM_PWM_Start+0x158>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <HAL_TIM_PWM_Start+0x10e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a14      	ldr	r2, [pc, #80]	@ (800301c <HAL_TIM_PWM_Start+0x15c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d111      	bne.n	8002ff2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b06      	cmp	r3, #6
 8002fde:	d010      	beq.n	8003002 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff0:	e007      	b.n	8003002 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40010000 	.word	0x40010000
 8003010:	40000400 	.word	0x40000400
 8003014:	40000800 	.word	0x40000800
 8003018:	40000c00 	.word	0x40000c00
 800301c:	40014000 	.word	0x40014000

08003020 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	6839      	ldr	r1, [r7, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 ffb2 	bl	8003f9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a29      	ldr	r2, [pc, #164]	@ (80030e4 <HAL_TIM_PWM_Stop+0xc4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d117      	bne.n	8003072 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6a1a      	ldr	r2, [r3, #32]
 8003048:	f241 1311 	movw	r3, #4369	@ 0x1111
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10f      	bne.n	8003072 <HAL_TIM_PWM_Stop+0x52>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6a1a      	ldr	r2, [r3, #32]
 8003058:	f240 4344 	movw	r3, #1092	@ 0x444
 800305c:	4013      	ands	r3, r2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d107      	bne.n	8003072 <HAL_TIM_PWM_Stop+0x52>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003070:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6a1a      	ldr	r2, [r3, #32]
 8003078:	f241 1311 	movw	r3, #4369	@ 0x1111
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10f      	bne.n	80030a2 <HAL_TIM_PWM_Stop+0x82>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6a1a      	ldr	r2, [r3, #32]
 8003088:	f240 4344 	movw	r3, #1092	@ 0x444
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d107      	bne.n	80030a2 <HAL_TIM_PWM_Stop+0x82>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0201 	bic.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d104      	bne.n	80030b2 <HAL_TIM_PWM_Stop+0x92>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030b0:	e013      	b.n	80030da <HAL_TIM_PWM_Stop+0xba>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d104      	bne.n	80030c2 <HAL_TIM_PWM_Stop+0xa2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030c0:	e00b      	b.n	80030da <HAL_TIM_PWM_Stop+0xba>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d104      	bne.n	80030d2 <HAL_TIM_PWM_Stop+0xb2>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030d0:	e003      	b.n	80030da <HAL_TIM_PWM_Stop+0xba>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40010000 	.word	0x40010000

080030e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e041      	b.n	800317e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f839 	bl	8003186 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	4619      	mov	r1, r3
 8003126:	4610      	mov	r0, r2
 8003128:	f000 fc02 	bl	8003930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d104      	bne.n	80031ba <HAL_TIM_IC_Start_IT+0x1e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	e013      	b.n	80031e2 <HAL_TIM_IC_Start_IT+0x46>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d104      	bne.n	80031ca <HAL_TIM_IC_Start_IT+0x2e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	e00b      	b.n	80031e2 <HAL_TIM_IC_Start_IT+0x46>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d104      	bne.n	80031da <HAL_TIM_IC_Start_IT+0x3e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	e003      	b.n	80031e2 <HAL_TIM_IC_Start_IT+0x46>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d104      	bne.n	80031f4 <HAL_TIM_IC_Start_IT+0x58>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e013      	b.n	800321c <HAL_TIM_IC_Start_IT+0x80>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d104      	bne.n	8003204 <HAL_TIM_IC_Start_IT+0x68>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003200:	b2db      	uxtb	r3, r3
 8003202:	e00b      	b.n	800321c <HAL_TIM_IC_Start_IT+0x80>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b08      	cmp	r3, #8
 8003208:	d104      	bne.n	8003214 <HAL_TIM_IC_Start_IT+0x78>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003210:	b2db      	uxtb	r3, r3
 8003212:	e003      	b.n	800321c <HAL_TIM_IC_Start_IT+0x80>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800321a:	b2db      	uxtb	r3, r3
 800321c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800321e:	7bbb      	ldrb	r3, [r7, #14]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d102      	bne.n	800322a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003224:	7b7b      	ldrb	r3, [r7, #13]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d001      	beq.n	800322e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0c2      	b.n	80033b4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d104      	bne.n	800323e <HAL_TIM_IC_Start_IT+0xa2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800323c:	e013      	b.n	8003266 <HAL_TIM_IC_Start_IT+0xca>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b04      	cmp	r3, #4
 8003242:	d104      	bne.n	800324e <HAL_TIM_IC_Start_IT+0xb2>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800324c:	e00b      	b.n	8003266 <HAL_TIM_IC_Start_IT+0xca>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d104      	bne.n	800325e <HAL_TIM_IC_Start_IT+0xc2>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800325c:	e003      	b.n	8003266 <HAL_TIM_IC_Start_IT+0xca>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2202      	movs	r2, #2
 8003262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d104      	bne.n	8003276 <HAL_TIM_IC_Start_IT+0xda>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003274:	e013      	b.n	800329e <HAL_TIM_IC_Start_IT+0x102>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d104      	bne.n	8003286 <HAL_TIM_IC_Start_IT+0xea>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003284:	e00b      	b.n	800329e <HAL_TIM_IC_Start_IT+0x102>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d104      	bne.n	8003296 <HAL_TIM_IC_Start_IT+0xfa>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003294:	e003      	b.n	800329e <HAL_TIM_IC_Start_IT+0x102>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2202      	movs	r2, #2
 800329a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b0c      	cmp	r3, #12
 80032a2:	d841      	bhi.n	8003328 <HAL_TIM_IC_Start_IT+0x18c>
 80032a4:	a201      	add	r2, pc, #4	@ (adr r2, 80032ac <HAL_TIM_IC_Start_IT+0x110>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032e1 	.word	0x080032e1
 80032b0:	08003329 	.word	0x08003329
 80032b4:	08003329 	.word	0x08003329
 80032b8:	08003329 	.word	0x08003329
 80032bc:	080032f3 	.word	0x080032f3
 80032c0:	08003329 	.word	0x08003329
 80032c4:	08003329 	.word	0x08003329
 80032c8:	08003329 	.word	0x08003329
 80032cc:	08003305 	.word	0x08003305
 80032d0:	08003329 	.word	0x08003329
 80032d4:	08003329 	.word	0x08003329
 80032d8:	08003329 	.word	0x08003329
 80032dc:	08003317 	.word	0x08003317
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0202 	orr.w	r2, r2, #2
 80032ee:	60da      	str	r2, [r3, #12]
      break;
 80032f0:	e01d      	b.n	800332e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0204 	orr.w	r2, r2, #4
 8003300:	60da      	str	r2, [r3, #12]
      break;
 8003302:	e014      	b.n	800332e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0208 	orr.w	r2, r2, #8
 8003312:	60da      	str	r2, [r3, #12]
      break;
 8003314:	e00b      	b.n	800332e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0210 	orr.w	r2, r2, #16
 8003324:	60da      	str	r2, [r3, #12]
      break;
 8003326:	e002      	b.n	800332e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
      break;
 800332c:	bf00      	nop
  }

  if (status == HAL_OK)
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d13e      	bne.n	80033b2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2201      	movs	r2, #1
 800333a:	6839      	ldr	r1, [r7, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fe2d 	bl	8003f9c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1d      	ldr	r2, [pc, #116]	@ (80033bc <HAL_TIM_IC_Start_IT+0x220>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d018      	beq.n	800337e <HAL_TIM_IC_Start_IT+0x1e2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003354:	d013      	beq.n	800337e <HAL_TIM_IC_Start_IT+0x1e2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a19      	ldr	r2, [pc, #100]	@ (80033c0 <HAL_TIM_IC_Start_IT+0x224>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_TIM_IC_Start_IT+0x1e2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a17      	ldr	r2, [pc, #92]	@ (80033c4 <HAL_TIM_IC_Start_IT+0x228>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_TIM_IC_Start_IT+0x1e2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a16      	ldr	r2, [pc, #88]	@ (80033c8 <HAL_TIM_IC_Start_IT+0x22c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_TIM_IC_Start_IT+0x1e2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a14      	ldr	r2, [pc, #80]	@ (80033cc <HAL_TIM_IC_Start_IT+0x230>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d111      	bne.n	80033a2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b06      	cmp	r3, #6
 800338e:	d010      	beq.n	80033b2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a0:	e007      	b.n	80033b2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40000800 	.word	0x40000800
 80033c8:	40000c00 	.word	0x40000c00
 80033cc:	40014000 	.word	0x40014000

080033d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d020      	beq.n	8003434 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01b      	beq.n	8003434 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0202 	mvn.w	r2, #2
 8003404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fd ff88 	bl	8001330 <HAL_TIM_IC_CaptureCallback>
 8003420:	e005      	b.n	800342e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fa66 	bl	80038f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fa6d 	bl	8003908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b00      	cmp	r3, #0
 800343c:	d020      	beq.n	8003480 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01b      	beq.n	8003480 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0204 	mvn.w	r2, #4
 8003450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2202      	movs	r2, #2
 8003456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd ff62 	bl	8001330 <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fa40 	bl	80038f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fa47 	bl	8003908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d020      	beq.n	80034cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01b      	beq.n	80034cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0208 	mvn.w	r2, #8
 800349c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2204      	movs	r2, #4
 80034a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd ff3c 	bl	8001330 <HAL_TIM_IC_CaptureCallback>
 80034b8:	e005      	b.n	80034c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fa1a 	bl	80038f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fa21 	bl	8003908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d020      	beq.n	8003518 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01b      	beq.n	8003518 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0210 	mvn.w	r2, #16
 80034e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2208      	movs	r2, #8
 80034ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fd ff16 	bl	8001330 <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f9f4 	bl	80038f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f9fb 	bl	8003908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00c      	beq.n	800353c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d007      	beq.n	800353c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0201 	mvn.w	r2, #1
 8003534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fd f8b0 	bl	800069c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00c      	beq.n	8003560 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800354c:	2b00      	cmp	r3, #0
 800354e:	d007      	beq.n	8003560 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fd4d 	bl	8003ffa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00c      	beq.n	8003584 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	d007      	beq.n	8003584 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800357c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f9cc 	bl	800391c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00c      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0220 	mvn.w	r2, #32
 80035a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fd1f 	bl	8003fe6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035a8:	bf00      	nop
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_TIM_IC_ConfigChannel+0x1e>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e088      	b.n	80036e0 <HAL_TIM_IC_ConfigChannel+0x130>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d11b      	bne.n	8003614 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80035ec:	f000 fbb8 	bl	8003d60 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 020c 	bic.w	r2, r2, #12
 80035fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6999      	ldr	r1, [r3, #24]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	619a      	str	r2, [r3, #24]
 8003612:	e060      	b.n	80036d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b04      	cmp	r3, #4
 8003618:	d11c      	bne.n	8003654 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800362a:	f000 fc01 	bl	8003e30 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699a      	ldr	r2, [r3, #24]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800363c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6999      	ldr	r1, [r3, #24]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	021a      	lsls	r2, r3, #8
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	619a      	str	r2, [r3, #24]
 8003652:	e040      	b.n	80036d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b08      	cmp	r3, #8
 8003658:	d11b      	bne.n	8003692 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800366a:	f000 fc1e 	bl	8003eaa <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69da      	ldr	r2, [r3, #28]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 020c 	bic.w	r2, r2, #12
 800367c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69d9      	ldr	r1, [r3, #28]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	61da      	str	r2, [r3, #28]
 8003690:	e021      	b.n	80036d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b0c      	cmp	r3, #12
 8003696:	d11c      	bne.n	80036d2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80036a8:	f000 fc3b 	bl	8003f22 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69da      	ldr	r2, [r3, #28]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80036ba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	69d9      	ldr	r1, [r3, #28]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	021a      	lsls	r2, r3, #8
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	61da      	str	r2, [r3, #28]
 80036d0:	e001      	b.n	80036d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036de:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003702:	2302      	movs	r3, #2
 8003704:	e0ae      	b.n	8003864 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b0c      	cmp	r3, #12
 8003712:	f200 809f 	bhi.w	8003854 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003716:	a201      	add	r2, pc, #4	@ (adr r2, 800371c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371c:	08003751 	.word	0x08003751
 8003720:	08003855 	.word	0x08003855
 8003724:	08003855 	.word	0x08003855
 8003728:	08003855 	.word	0x08003855
 800372c:	08003791 	.word	0x08003791
 8003730:	08003855 	.word	0x08003855
 8003734:	08003855 	.word	0x08003855
 8003738:	08003855 	.word	0x08003855
 800373c:	080037d3 	.word	0x080037d3
 8003740:	08003855 	.word	0x08003855
 8003744:	08003855 	.word	0x08003855
 8003748:	08003855 	.word	0x08003855
 800374c:	08003813 	.word	0x08003813
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	4618      	mov	r0, r3
 8003758:	f000 f976 	bl	8003a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0208 	orr.w	r2, r2, #8
 800376a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0204 	bic.w	r2, r2, #4
 800377a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6999      	ldr	r1, [r3, #24]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	619a      	str	r2, [r3, #24]
      break;
 800378e:	e064      	b.n	800385a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f9bc 	bl	8003b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699a      	ldr	r2, [r3, #24]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6999      	ldr	r1, [r3, #24]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	021a      	lsls	r2, r3, #8
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	619a      	str	r2, [r3, #24]
      break;
 80037d0:	e043      	b.n	800385a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fa07 	bl	8003bec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69da      	ldr	r2, [r3, #28]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0208 	orr.w	r2, r2, #8
 80037ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0204 	bic.w	r2, r2, #4
 80037fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69d9      	ldr	r1, [r3, #28]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	61da      	str	r2, [r3, #28]
      break;
 8003810:	e023      	b.n	800385a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fa51 	bl	8003cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69da      	ldr	r2, [r3, #28]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800382c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69da      	ldr	r2, [r3, #28]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800383c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69d9      	ldr	r1, [r3, #28]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	021a      	lsls	r2, r3, #8
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	61da      	str	r2, [r3, #28]
      break;
 8003852:	e002      	b.n	800385a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	75fb      	strb	r3, [r7, #23]
      break;
 8003858:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003862:	7dfb      	ldrb	r3, [r7, #23]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b0c      	cmp	r3, #12
 800387e:	d831      	bhi.n	80038e4 <HAL_TIM_ReadCapturedValue+0x78>
 8003880:	a201      	add	r2, pc, #4	@ (adr r2, 8003888 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	080038bd 	.word	0x080038bd
 800388c:	080038e5 	.word	0x080038e5
 8003890:	080038e5 	.word	0x080038e5
 8003894:	080038e5 	.word	0x080038e5
 8003898:	080038c7 	.word	0x080038c7
 800389c:	080038e5 	.word	0x080038e5
 80038a0:	080038e5 	.word	0x080038e5
 80038a4:	080038e5 	.word	0x080038e5
 80038a8:	080038d1 	.word	0x080038d1
 80038ac:	080038e5 	.word	0x080038e5
 80038b0:	080038e5 	.word	0x080038e5
 80038b4:	080038e5 	.word	0x080038e5
 80038b8:	080038db 	.word	0x080038db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c2:	60fb      	str	r3, [r7, #12]

      break;
 80038c4:	e00f      	b.n	80038e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038cc:	60fb      	str	r3, [r7, #12]

      break;
 80038ce:	e00a      	b.n	80038e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d6:	60fb      	str	r3, [r7, #12]

      break;
 80038d8:	e005      	b.n	80038e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e0:	60fb      	str	r3, [r7, #12]

      break;
 80038e2:	e000      	b.n	80038e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80038e4:	bf00      	nop
  }

  return tmpreg;
 80038e6:	68fb      	ldr	r3, [r7, #12]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a3a      	ldr	r2, [pc, #232]	@ (8003a2c <TIM_Base_SetConfig+0xfc>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d00f      	beq.n	8003968 <TIM_Base_SetConfig+0x38>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800394e:	d00b      	beq.n	8003968 <TIM_Base_SetConfig+0x38>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a37      	ldr	r2, [pc, #220]	@ (8003a30 <TIM_Base_SetConfig+0x100>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d007      	beq.n	8003968 <TIM_Base_SetConfig+0x38>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a36      	ldr	r2, [pc, #216]	@ (8003a34 <TIM_Base_SetConfig+0x104>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d003      	beq.n	8003968 <TIM_Base_SetConfig+0x38>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a35      	ldr	r2, [pc, #212]	@ (8003a38 <TIM_Base_SetConfig+0x108>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d108      	bne.n	800397a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800396e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a2c <TIM_Base_SetConfig+0xfc>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d01b      	beq.n	80039ba <TIM_Base_SetConfig+0x8a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003988:	d017      	beq.n	80039ba <TIM_Base_SetConfig+0x8a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a28      	ldr	r2, [pc, #160]	@ (8003a30 <TIM_Base_SetConfig+0x100>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d013      	beq.n	80039ba <TIM_Base_SetConfig+0x8a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a27      	ldr	r2, [pc, #156]	@ (8003a34 <TIM_Base_SetConfig+0x104>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00f      	beq.n	80039ba <TIM_Base_SetConfig+0x8a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a26      	ldr	r2, [pc, #152]	@ (8003a38 <TIM_Base_SetConfig+0x108>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00b      	beq.n	80039ba <TIM_Base_SetConfig+0x8a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a25      	ldr	r2, [pc, #148]	@ (8003a3c <TIM_Base_SetConfig+0x10c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d007      	beq.n	80039ba <TIM_Base_SetConfig+0x8a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a24      	ldr	r2, [pc, #144]	@ (8003a40 <TIM_Base_SetConfig+0x110>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d003      	beq.n	80039ba <TIM_Base_SetConfig+0x8a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a23      	ldr	r2, [pc, #140]	@ (8003a44 <TIM_Base_SetConfig+0x114>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d108      	bne.n	80039cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a0e      	ldr	r2, [pc, #56]	@ (8003a2c <TIM_Base_SetConfig+0xfc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d103      	bne.n	8003a00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d105      	bne.n	8003a1e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f023 0201 	bic.w	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	611a      	str	r2, [r3, #16]
  }
}
 8003a1e:	bf00      	nop
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40010000 	.word	0x40010000
 8003a30:	40000400 	.word	0x40000400
 8003a34:	40000800 	.word	0x40000800
 8003a38:	40000c00 	.word	0x40000c00
 8003a3c:	40014000 	.word	0x40014000
 8003a40:	40014400 	.word	0x40014400
 8003a44:	40014800 	.word	0x40014800

08003a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	f023 0201 	bic.w	r2, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0303 	bic.w	r3, r3, #3
 8003a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f023 0302 	bic.w	r3, r3, #2
 8003a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003b10 <TIM_OC1_SetConfig+0xc8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d10c      	bne.n	8003abe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f023 0308 	bic.w	r3, r3, #8
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f023 0304 	bic.w	r3, r3, #4
 8003abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a13      	ldr	r2, [pc, #76]	@ (8003b10 <TIM_OC1_SetConfig+0xc8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d111      	bne.n	8003aea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	621a      	str	r2, [r3, #32]
}
 8003b04:	bf00      	nop
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	40010000 	.word	0x40010000

08003b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	f023 0210 	bic.w	r2, r3, #16
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f023 0320 	bic.w	r3, r3, #32
 8003b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003be8 <TIM_OC2_SetConfig+0xd4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d10d      	bne.n	8003b90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a15      	ldr	r2, [pc, #84]	@ (8003be8 <TIM_OC2_SetConfig+0xd4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d113      	bne.n	8003bc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	621a      	str	r2, [r3, #32]
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40010000 	.word	0x40010000

08003bec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0303 	bic.w	r3, r3, #3
 8003c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a1d      	ldr	r2, [pc, #116]	@ (8003cbc <TIM_OC3_SetConfig+0xd0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10d      	bne.n	8003c66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a14      	ldr	r2, [pc, #80]	@ (8003cbc <TIM_OC3_SetConfig+0xd0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d113      	bne.n	8003c96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	621a      	str	r2, [r3, #32]
}
 8003cb0:	bf00      	nop
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	40010000 	.word	0x40010000

08003cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	031b      	lsls	r3, r3, #12
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a10      	ldr	r2, [pc, #64]	@ (8003d5c <TIM_OC4_SetConfig+0x9c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d109      	bne.n	8003d34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	019b      	lsls	r3, r3, #6
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	621a      	str	r2, [r3, #32]
}
 8003d4e:	bf00      	nop
 8003d50:	371c      	adds	r7, #28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40010000 	.word	0x40010000

08003d60 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	f023 0201 	bic.w	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4a24      	ldr	r2, [pc, #144]	@ (8003e1c <TIM_TI1_SetConfig+0xbc>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d013      	beq.n	8003db6 <TIM_TI1_SetConfig+0x56>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d94:	d00f      	beq.n	8003db6 <TIM_TI1_SetConfig+0x56>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4a21      	ldr	r2, [pc, #132]	@ (8003e20 <TIM_TI1_SetConfig+0xc0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00b      	beq.n	8003db6 <TIM_TI1_SetConfig+0x56>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4a20      	ldr	r2, [pc, #128]	@ (8003e24 <TIM_TI1_SetConfig+0xc4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d007      	beq.n	8003db6 <TIM_TI1_SetConfig+0x56>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4a1f      	ldr	r2, [pc, #124]	@ (8003e28 <TIM_TI1_SetConfig+0xc8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d003      	beq.n	8003db6 <TIM_TI1_SetConfig+0x56>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4a1e      	ldr	r2, [pc, #120]	@ (8003e2c <TIM_TI1_SetConfig+0xcc>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d101      	bne.n	8003dba <TIM_TI1_SetConfig+0x5a>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <TIM_TI1_SetConfig+0x5c>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f023 0303 	bic.w	r3, r3, #3
 8003dc6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	e003      	b.n	8003dda <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003de0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f023 030a 	bic.w	r3, r3, #10
 8003df4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f003 030a 	and.w	r3, r3, #10
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	621a      	str	r2, [r3, #32]
}
 8003e0e:	bf00      	nop
 8003e10:	371c      	adds	r7, #28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40010000 	.word	0x40010000
 8003e20:	40000400 	.word	0x40000400
 8003e24:	40000800 	.word	0x40000800
 8003e28:	40000c00 	.word	0x40000c00
 8003e2c:	40014000 	.word	0x40014000

08003e30 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f023 0210 	bic.w	r2, r3, #16
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	021b      	lsls	r3, r3, #8
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	031b      	lsls	r3, r3, #12
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e82:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	621a      	str	r2, [r3, #32]
}
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b087      	sub	sp, #28
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f023 0303 	bic.w	r3, r3, #3
 8003ed6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ee6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003efa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	621a      	str	r2, [r3, #32]
}
 8003f16:	bf00      	nop
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b087      	sub	sp, #28
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f4e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f60:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	031b      	lsls	r3, r3, #12
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003f74:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	031b      	lsls	r3, r3, #12
 8003f7a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	621a      	str	r2, [r3, #32]
}
 8003f90:	bf00      	nop
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f003 031f 	and.w	r3, r3, #31
 8003fae:	2201      	movs	r2, #1
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a1a      	ldr	r2, [r3, #32]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a1a      	ldr	r2, [r3, #32]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f003 031f 	and.w	r3, r3, #31
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	621a      	str	r2, [r3, #32]
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
	...

08004010 <__NVIC_SetPriority>:
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	6039      	str	r1, [r7, #0]
 800401a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800401c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004020:	2b00      	cmp	r3, #0
 8004022:	db0a      	blt.n	800403a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	b2da      	uxtb	r2, r3
 8004028:	490c      	ldr	r1, [pc, #48]	@ (800405c <__NVIC_SetPriority+0x4c>)
 800402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402e:	0112      	lsls	r2, r2, #4
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	440b      	add	r3, r1
 8004034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004038:	e00a      	b.n	8004050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	b2da      	uxtb	r2, r3
 800403e:	4908      	ldr	r1, [pc, #32]	@ (8004060 <__NVIC_SetPriority+0x50>)
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	3b04      	subs	r3, #4
 8004048:	0112      	lsls	r2, r2, #4
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	440b      	add	r3, r1
 800404e:	761a      	strb	r2, [r3, #24]
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	e000e100 	.word	0xe000e100
 8004060:	e000ed00 	.word	0xe000ed00

08004064 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004068:	4b05      	ldr	r3, [pc, #20]	@ (8004080 <SysTick_Handler+0x1c>)
 800406a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800406c:	f001 ff5c 	bl	8005f28 <xTaskGetSchedulerState>
 8004070:	4603      	mov	r3, r0
 8004072:	2b01      	cmp	r3, #1
 8004074:	d001      	beq.n	800407a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004076:	f002 fcef 	bl	8006a58 <xPortSysTickHandler>
  }
}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	e000e010 	.word	0xe000e010

08004084 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004088:	2100      	movs	r1, #0
 800408a:	f06f 0004 	mvn.w	r0, #4
 800408e:	f7ff ffbf 	bl	8004010 <__NVIC_SetPriority>
#endif
}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800409e:	f3ef 8305 	mrs	r3, IPSR
 80040a2:	603b      	str	r3, [r7, #0]
  return(result);
 80040a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80040aa:	f06f 0305 	mvn.w	r3, #5
 80040ae:	607b      	str	r3, [r7, #4]
 80040b0:	e00c      	b.n	80040cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80040b2:	4b0a      	ldr	r3, [pc, #40]	@ (80040dc <osKernelInitialize+0x44>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d105      	bne.n	80040c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80040ba:	4b08      	ldr	r3, [pc, #32]	@ (80040dc <osKernelInitialize+0x44>)
 80040bc:	2201      	movs	r2, #1
 80040be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	607b      	str	r3, [r7, #4]
 80040c4:	e002      	b.n	80040cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80040c6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80040cc:	687b      	ldr	r3, [r7, #4]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	20000318 	.word	0x20000318

080040e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040e6:	f3ef 8305 	mrs	r3, IPSR
 80040ea:	603b      	str	r3, [r7, #0]
  return(result);
 80040ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80040f2:	f06f 0305 	mvn.w	r3, #5
 80040f6:	607b      	str	r3, [r7, #4]
 80040f8:	e010      	b.n	800411c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80040fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004128 <osKernelStart+0x48>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d109      	bne.n	8004116 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004102:	f7ff ffbf 	bl	8004084 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004106:	4b08      	ldr	r3, [pc, #32]	@ (8004128 <osKernelStart+0x48>)
 8004108:	2202      	movs	r2, #2
 800410a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800410c:	f001 fb36 	bl	800577c <vTaskStartScheduler>
      stat = osOK;
 8004110:	2300      	movs	r3, #0
 8004112:	607b      	str	r3, [r7, #4]
 8004114:	e002      	b.n	800411c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004116:	f04f 33ff 	mov.w	r3, #4294967295
 800411a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800411c:	687b      	ldr	r3, [r7, #4]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20000318 	.word	0x20000318

0800412c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800412c:	b580      	push	{r7, lr}
 800412e:	b08e      	sub	sp, #56	@ 0x38
 8004130:	af04      	add	r7, sp, #16
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004138:	2300      	movs	r3, #0
 800413a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800413c:	f3ef 8305 	mrs	r3, IPSR
 8004140:	617b      	str	r3, [r7, #20]
  return(result);
 8004142:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004144:	2b00      	cmp	r3, #0
 8004146:	d17e      	bne.n	8004246 <osThreadNew+0x11a>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d07b      	beq.n	8004246 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800414e:	2380      	movs	r3, #128	@ 0x80
 8004150:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004152:	2318      	movs	r3, #24
 8004154:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004156:	2300      	movs	r3, #0
 8004158:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800415a:	f04f 33ff 	mov.w	r3, #4294967295
 800415e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d045      	beq.n	80041f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <osThreadNew+0x48>
        name = attr->name;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <osThreadNew+0x6e>
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	2b38      	cmp	r3, #56	@ 0x38
 800418c:	d805      	bhi.n	800419a <osThreadNew+0x6e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <osThreadNew+0x72>
        return (NULL);
 800419a:	2300      	movs	r3, #0
 800419c:	e054      	b.n	8004248 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	089b      	lsrs	r3, r3, #2
 80041ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00e      	beq.n	80041d4 <osThreadNew+0xa8>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	2ba7      	cmp	r3, #167	@ 0xa7
 80041bc:	d90a      	bls.n	80041d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d006      	beq.n	80041d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <osThreadNew+0xa8>
        mem = 1;
 80041ce:	2301      	movs	r3, #1
 80041d0:	61bb      	str	r3, [r7, #24]
 80041d2:	e010      	b.n	80041f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10c      	bne.n	80041f6 <osThreadNew+0xca>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d108      	bne.n	80041f6 <osThreadNew+0xca>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d104      	bne.n	80041f6 <osThreadNew+0xca>
          mem = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	e001      	b.n	80041f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d110      	bne.n	800421e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004204:	9202      	str	r2, [sp, #8]
 8004206:	9301      	str	r3, [sp, #4]
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	6a3a      	ldr	r2, [r7, #32]
 8004210:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f001 f912 	bl	800543c <xTaskCreateStatic>
 8004218:	4603      	mov	r3, r0
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	e013      	b.n	8004246 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d110      	bne.n	8004246 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	b29a      	uxth	r2, r3
 8004228:	f107 0310 	add.w	r3, r7, #16
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f001 f930 	bl	800549c <xTaskCreate>
 800423c:	4603      	mov	r3, r0
 800423e:	2b01      	cmp	r3, #1
 8004240:	d001      	beq.n	8004246 <osThreadNew+0x11a>
            hTask = NULL;
 8004242:	2300      	movs	r3, #0
 8004244:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004246:	693b      	ldr	r3, [r7, #16]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3728      	adds	r7, #40	@ 0x28
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004258:	f3ef 8305 	mrs	r3, IPSR
 800425c:	60bb      	str	r3, [r7, #8]
  return(result);
 800425e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <osDelay+0x1c>
    stat = osErrorISR;
 8004264:	f06f 0305 	mvn.w	r3, #5
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	e007      	b.n	800427c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f001 fa5c 	bl	8005734 <vTaskDelay>
    }
  }

  return (stat);
 800427c:	68fb      	ldr	r3, [r7, #12]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004286:	b580      	push	{r7, lr}
 8004288:	b088      	sub	sp, #32
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800428e:	2300      	movs	r3, #0
 8004290:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004292:	f3ef 8305 	mrs	r3, IPSR
 8004296:	60bb      	str	r3, [r7, #8]
  return(result);
 8004298:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800429a:	2b00      	cmp	r3, #0
 800429c:	d174      	bne.n	8004388 <osMutexNew+0x102>
    if (attr != NULL) {
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <osMutexNew+0x26>
      type = attr->attr_bits;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	e001      	b.n	80042b0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <osMutexNew+0x3a>
      rmtx = 1U;
 80042ba:	2301      	movs	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	e001      	b.n	80042c4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d15c      	bne.n	8004388 <osMutexNew+0x102>
      mem = -1;
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
 80042d2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d015      	beq.n	8004306 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d006      	beq.n	80042f0 <osMutexNew+0x6a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	2b4f      	cmp	r3, #79	@ 0x4f
 80042e8:	d902      	bls.n	80042f0 <osMutexNew+0x6a>
          mem = 1;
 80042ea:	2301      	movs	r3, #1
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	e00c      	b.n	800430a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d108      	bne.n	800430a <osMutexNew+0x84>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d104      	bne.n	800430a <osMutexNew+0x84>
            mem = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	e001      	b.n	800430a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d112      	bne.n	8004336 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	4619      	mov	r1, r3
 800431c:	2004      	movs	r0, #4
 800431e:	f000 fbd3 	bl	8004ac8 <xQueueCreateMutexStatic>
 8004322:	61f8      	str	r0, [r7, #28]
 8004324:	e016      	b.n	8004354 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	4619      	mov	r1, r3
 800432c:	2001      	movs	r0, #1
 800432e:	f000 fbcb 	bl	8004ac8 <xQueueCreateMutexStatic>
 8004332:	61f8      	str	r0, [r7, #28]
 8004334:	e00e      	b.n	8004354 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10b      	bne.n	8004354 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d004      	beq.n	800434c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004342:	2004      	movs	r0, #4
 8004344:	f000 fba8 	bl	8004a98 <xQueueCreateMutex>
 8004348:	61f8      	str	r0, [r7, #28]
 800434a:	e003      	b.n	8004354 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800434c:	2001      	movs	r0, #1
 800434e:	f000 fba3 	bl	8004a98 <xQueueCreateMutex>
 8004352:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00c      	beq.n	8004374 <osMutexNew+0xee>
        if (attr != NULL) {
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <osMutexNew+0xe2>
          name = attr->name;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	e001      	b.n	800436c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800436c:	68f9      	ldr	r1, [r7, #12]
 800436e:	69f8      	ldr	r0, [r7, #28]
 8004370:	f001 f806 	bl	8005380 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d006      	beq.n	8004388 <osMutexNew+0x102>
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004388:	69fb      	ldr	r3, [r7, #28]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004392:	b580      	push	{r7, lr}
 8004394:	b086      	sub	sp, #24
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043b0:	f3ef 8305 	mrs	r3, IPSR
 80043b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80043b6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80043bc:	f06f 0305 	mvn.w	r3, #5
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	e02c      	b.n	800441e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d103      	bne.n	80043d2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80043ca:	f06f 0303 	mvn.w	r3, #3
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	e025      	b.n	800441e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d011      	beq.n	80043fc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80043d8:	6839      	ldr	r1, [r7, #0]
 80043da:	6938      	ldr	r0, [r7, #16]
 80043dc:	f000 fbb5 	bl	8004b4a <xQueueTakeMutexRecursive>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d01b      	beq.n	800441e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80043ec:	f06f 0301 	mvn.w	r3, #1
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	e014      	b.n	800441e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80043f4:	f06f 0302 	mvn.w	r3, #2
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	e010      	b.n	800441e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80043fc:	6839      	ldr	r1, [r7, #0]
 80043fe:	6938      	ldr	r0, [r7, #16]
 8004400:	f000 fd76 	bl	8004ef0 <xQueueSemaphoreTake>
 8004404:	4603      	mov	r3, r0
 8004406:	2b01      	cmp	r3, #1
 8004408:	d009      	beq.n	800441e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004410:	f06f 0301 	mvn.w	r3, #1
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	e002      	b.n	800441e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004418:	f06f 0302 	mvn.w	r3, #2
 800441c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800441e:	697b      	ldr	r3, [r7, #20]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004444:	f3ef 8305 	mrs	r3, IPSR
 8004448:	60bb      	str	r3, [r7, #8]
  return(result);
 800444a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004450:	f06f 0305 	mvn.w	r3, #5
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	e01f      	b.n	8004498 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d103      	bne.n	8004466 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800445e:	f06f 0303 	mvn.w	r3, #3
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	e018      	b.n	8004498 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d009      	beq.n	8004480 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800446c:	6938      	ldr	r0, [r7, #16]
 800446e:	f000 fb46 	bl	8004afe <xQueueGiveMutexRecursive>
 8004472:	4603      	mov	r3, r0
 8004474:	2b01      	cmp	r3, #1
 8004476:	d00f      	beq.n	8004498 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004478:	f06f 0302 	mvn.w	r3, #2
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	e00b      	b.n	8004498 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004480:	2300      	movs	r3, #0
 8004482:	2200      	movs	r2, #0
 8004484:	2100      	movs	r1, #0
 8004486:	6938      	ldr	r0, [r7, #16]
 8004488:	f000 fb88 	bl	8004b9c <xQueueGenericSend>
 800448c:	4603      	mov	r3, r0
 800448e:	2b01      	cmp	r3, #1
 8004490:	d002      	beq.n	8004498 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004492:	f06f 0302 	mvn.w	r3, #2
 8004496:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004498:	697b      	ldr	r3, [r7, #20]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b08a      	sub	sp, #40	@ 0x28
 80044a6:	af02      	add	r7, sp, #8
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044b2:	f3ef 8305 	mrs	r3, IPSR
 80044b6:	613b      	str	r3, [r7, #16]
  return(result);
 80044b8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d15f      	bne.n	800457e <osMessageQueueNew+0xdc>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d05c      	beq.n	800457e <osMessageQueueNew+0xdc>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d059      	beq.n	800457e <osMessageQueueNew+0xdc>
    mem = -1;
 80044ca:	f04f 33ff 	mov.w	r3, #4294967295
 80044ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d029      	beq.n	800452a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d012      	beq.n	8004504 <osMessageQueueNew+0x62>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2b4f      	cmp	r3, #79	@ 0x4f
 80044e4:	d90e      	bls.n	8004504 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	fb01 f303 	mul.w	r3, r1, r3
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d302      	bcc.n	8004504 <osMessageQueueNew+0x62>
        mem = 1;
 80044fe:	2301      	movs	r3, #1
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	e014      	b.n	800452e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d110      	bne.n	800452e <osMessageQueueNew+0x8c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10c      	bne.n	800452e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004518:	2b00      	cmp	r3, #0
 800451a:	d108      	bne.n	800452e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d104      	bne.n	800452e <osMessageQueueNew+0x8c>
          mem = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	61bb      	str	r3, [r7, #24]
 8004528:	e001      	b.n	800452e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800452a:	2300      	movs	r3, #0
 800452c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d10b      	bne.n	800454c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2100      	movs	r1, #0
 800453e:	9100      	str	r1, [sp, #0]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fa20 	bl	8004988 <xQueueGenericCreateStatic>
 8004548:	61f8      	str	r0, [r7, #28]
 800454a:	e008      	b.n	800455e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d105      	bne.n	800455e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004552:	2200      	movs	r2, #0
 8004554:	68b9      	ldr	r1, [r7, #8]
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fa35 	bl	80049c6 <xQueueGenericCreate>
 800455c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00c      	beq.n	800457e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <osMessageQueueNew+0xd0>
        name = attr->name;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	e001      	b.n	8004576 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004576:	6979      	ldr	r1, [r7, #20]
 8004578:	69f8      	ldr	r0, [r7, #28]
 800457a:	f000 ff01 	bl	8005380 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800457e:	69fb      	ldr	r3, [r7, #28]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3720      	adds	r7, #32
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	4613      	mov	r3, r2
 8004596:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800459c:	2300      	movs	r3, #0
 800459e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045a0:	f3ef 8305 	mrs	r3, IPSR
 80045a4:	617b      	str	r3, [r7, #20]
  return(result);
 80045a6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d028      	beq.n	80045fe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <osMessageQueuePut+0x36>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <osMessageQueuePut+0x36>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80045be:	f06f 0303 	mvn.w	r3, #3
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	e038      	b.n	8004638 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80045c6:	2300      	movs	r3, #0
 80045c8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80045ca:	f107 0210 	add.w	r2, r7, #16
 80045ce:	2300      	movs	r3, #0
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	69b8      	ldr	r0, [r7, #24]
 80045d4:	f000 fb8c 	bl	8004cf0 <xQueueGenericSendFromISR>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d003      	beq.n	80045e6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80045de:	f06f 0302 	mvn.w	r3, #2
 80045e2:	61fb      	str	r3, [r7, #28]
 80045e4:	e028      	b.n	8004638 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d025      	beq.n	8004638 <osMessageQueuePut+0xb0>
 80045ec:	4b15      	ldr	r3, [pc, #84]	@ (8004644 <osMessageQueuePut+0xbc>)
 80045ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	e01c      	b.n	8004638 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <osMessageQueuePut+0x82>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d103      	bne.n	8004612 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800460a:	f06f 0303 	mvn.w	r3, #3
 800460e:	61fb      	str	r3, [r7, #28]
 8004610:	e012      	b.n	8004638 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004612:	2300      	movs	r3, #0
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	69b8      	ldr	r0, [r7, #24]
 800461a:	f000 fabf 	bl	8004b9c <xQueueGenericSend>
 800461e:	4603      	mov	r3, r0
 8004620:	2b01      	cmp	r3, #1
 8004622:	d009      	beq.n	8004638 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800462a:	f06f 0301 	mvn.w	r3, #1
 800462e:	61fb      	str	r3, [r7, #28]
 8004630:	e002      	b.n	8004638 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004632:	f06f 0302 	mvn.w	r3, #2
 8004636:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004638:	69fb      	ldr	r3, [r7, #28]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	e000ed04 	.word	0xe000ed04

08004648 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800465e:	f3ef 8305 	mrs	r3, IPSR
 8004662:	617b      	str	r3, [r7, #20]
  return(result);
 8004664:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004666:	2b00      	cmp	r3, #0
 8004668:	d028      	beq.n	80046bc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <osMessageQueueGet+0x34>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <osMessageQueueGet+0x34>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800467c:	f06f 0303 	mvn.w	r3, #3
 8004680:	61fb      	str	r3, [r7, #28]
 8004682:	e037      	b.n	80046f4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004684:	2300      	movs	r3, #0
 8004686:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004688:	f107 0310 	add.w	r3, r7, #16
 800468c:	461a      	mov	r2, r3
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	69b8      	ldr	r0, [r7, #24]
 8004692:	f000 fcf5 	bl	8005080 <xQueueReceiveFromISR>
 8004696:	4603      	mov	r3, r0
 8004698:	2b01      	cmp	r3, #1
 800469a:	d003      	beq.n	80046a4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800469c:	f06f 0302 	mvn.w	r3, #2
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	e027      	b.n	80046f4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d024      	beq.n	80046f4 <osMessageQueueGet+0xac>
 80046aa:	4b15      	ldr	r3, [pc, #84]	@ (8004700 <osMessageQueueGet+0xb8>)
 80046ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	e01b      	b.n	80046f4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <osMessageQueueGet+0x80>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d103      	bne.n	80046d0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80046c8:	f06f 0303 	mvn.w	r3, #3
 80046cc:	61fb      	str	r3, [r7, #28]
 80046ce:	e011      	b.n	80046f4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	68b9      	ldr	r1, [r7, #8]
 80046d4:	69b8      	ldr	r0, [r7, #24]
 80046d6:	f000 fb69 	bl	8004dac <xQueueReceive>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d009      	beq.n	80046f4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80046e6:	f06f 0301 	mvn.w	r3, #1
 80046ea:	61fb      	str	r3, [r7, #28]
 80046ec:	e002      	b.n	80046f4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80046ee:	f06f 0302 	mvn.w	r3, #2
 80046f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80046f4:	69fb      	ldr	r3, [r7, #28]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3720      	adds	r7, #32
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	e000ed04 	.word	0xe000ed04

08004704 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4a07      	ldr	r2, [pc, #28]	@ (8004730 <vApplicationGetIdleTaskMemory+0x2c>)
 8004714:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4a06      	ldr	r2, [pc, #24]	@ (8004734 <vApplicationGetIdleTaskMemory+0x30>)
 800471a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2280      	movs	r2, #128	@ 0x80
 8004720:	601a      	str	r2, [r3, #0]
}
 8004722:	bf00      	nop
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	2000031c 	.word	0x2000031c
 8004734:	200003c4 	.word	0x200003c4

08004738 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4a07      	ldr	r2, [pc, #28]	@ (8004764 <vApplicationGetTimerTaskMemory+0x2c>)
 8004748:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	4a06      	ldr	r2, [pc, #24]	@ (8004768 <vApplicationGetTimerTaskMemory+0x30>)
 800474e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004756:	601a      	str	r2, [r3, #0]
}
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	200005c4 	.word	0x200005c4
 8004768:	2000066c 	.word	0x2000066c

0800476c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f103 0208 	add.w	r2, r3, #8
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f04f 32ff 	mov.w	r2, #4294967295
 8004784:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f103 0208 	add.w	r2, r3, #8
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f103 0208 	add.w	r2, r3, #8
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	601a      	str	r2, [r3, #0]
}
 8004802:	bf00      	nop
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004824:	d103      	bne.n	800482e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	e00c      	b.n	8004848 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3308      	adds	r3, #8
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	e002      	b.n	800483c <vListInsert+0x2e>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	429a      	cmp	r2, r3
 8004846:	d2f6      	bcs.n	8004836 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	601a      	str	r2, [r3, #0]
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6892      	ldr	r2, [r2, #8]
 8004896:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6852      	ldr	r2, [r2, #4]
 80048a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d103      	bne.n	80048b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	1e5a      	subs	r2, r3, #1
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 80048e2:	f002 f84f 	bl	8006984 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ee:	68f9      	ldr	r1, [r7, #12]
 80048f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048f2:	fb01 f303 	mul.w	r3, r1, r3
 80048f6:	441a      	add	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004912:	3b01      	subs	r3, #1
 8004914:	68f9      	ldr	r1, [r7, #12]
 8004916:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004918:	fb01 f303 	mul.w	r3, r1, r3
 800491c:	441a      	add	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	22ff      	movs	r2, #255	@ 0xff
 8004926:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	22ff      	movs	r2, #255	@ 0xff
 800492e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d114      	bne.n	8004962 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01a      	beq.n	8004976 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3310      	adds	r3, #16
 8004944:	4618      	mov	r0, r3
 8004946:	f001 f957 	bl	8005bf8 <xTaskRemoveFromEventList>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d012      	beq.n	8004976 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004950:	4b0c      	ldr	r3, [pc, #48]	@ (8004984 <xQueueGenericReset+0xb0>)
 8004952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	e009      	b.n	8004976 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3310      	adds	r3, #16
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff ff00 	bl	800476c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3324      	adds	r3, #36	@ 0x24
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff fefb 	bl	800476c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004976:	f002 f81f 	bl	80069b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800497a:	2301      	movs	r3, #1
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	e000ed04 	.word	0xe000ed04

08004988 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00d      	beq.n	80049bc <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	4613      	mov	r3, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f831 	bl	8004a1e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049bc:	697b      	ldr	r3, [r7, #20]
	}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b08a      	sub	sp, #40	@ 0x28
 80049ca:	af02      	add	r7, sp, #8
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	4613      	mov	r3, r2
 80049d2:	71fb      	strb	r3, [r7, #7]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	fb02 f303 	mul.w	r3, r2, r3
 80049dc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	3350      	adds	r3, #80	@ 0x50
 80049e2:	4618      	mov	r0, r3
 80049e4:	f002 f888 	bl	8006af8 <pvPortMalloc>
 80049e8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d011      	beq.n	8004a14 <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	3350      	adds	r3, #80	@ 0x50
 80049f8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a02:	79fa      	ldrb	r2, [r7, #7]
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 f805 	bl	8004a1e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a14:	69bb      	ldr	r3, [r7, #24]
	}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3720      	adds	r7, #32
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d103      	bne.n	8004a3a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	e002      	b.n	8004a40 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	69b8      	ldr	r0, [r7, #24]
 8004a50:	f7ff ff40 	bl	80048d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	78fa      	ldrb	r2, [r7, #3]
 8004a58:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00e      	beq.n	8004a90 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004a84:	2300      	movs	r3, #0
 8004a86:	2200      	movs	r2, #0
 8004a88:	2100      	movs	r1, #0
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f886 	bl	8004b9c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	461a      	mov	r2, r3
 8004aae:	6939      	ldr	r1, [r7, #16]
 8004ab0:	6978      	ldr	r0, [r7, #20]
 8004ab2:	f7ff ff88 	bl	80049c6 <xQueueGenericCreate>
 8004ab6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f7ff ffd3 	bl	8004a64 <prvInitialiseMutex>

		return xNewQueue;
 8004abe:	68fb      	ldr	r3, [r7, #12]
	}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	4603      	mov	r3, r0
 8004ad0:	6039      	str	r1, [r7, #0]
 8004ad2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	6939      	ldr	r1, [r7, #16]
 8004ae6:	6978      	ldr	r0, [r7, #20]
 8004ae8:	f7ff ff4e 	bl	8004988 <xQueueGenericCreateStatic>
 8004aec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f7ff ffb8 	bl	8004a64 <prvInitialiseMutex>

		return xNewQueue;
 8004af4:	68fb      	ldr	r3, [r7, #12]
	}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004afe:	b590      	push	{r4, r7, lr}
 8004b00:	b085      	sub	sp, #20
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	60bb      	str	r3, [r7, #8]
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	689c      	ldr	r4, [r3, #8]
 8004b0e:	f001 f9fb 	bl	8005f08 <xTaskGetCurrentTaskHandle>
 8004b12:	4603      	mov	r3, r0
 8004b14:	429c      	cmp	r4, r3
 8004b16:	d111      	bne.n	8004b3c <xQueueGiveMutexRecursive+0x3e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	1e5a      	subs	r2, r3, #1
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d105      	bne.n	8004b36 <xQueueGiveMutexRecursive+0x38>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2100      	movs	r1, #0
 8004b30:	68b8      	ldr	r0, [r7, #8]
 8004b32:	f000 f833 	bl	8004b9c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004b36:	2301      	movs	r3, #1
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	e001      	b.n	8004b40 <xQueueGiveMutexRecursive+0x42>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004b40:	68fb      	ldr	r3, [r7, #12]
	}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd90      	pop	{r4, r7, pc}

08004b4a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004b4a:	b590      	push	{r4, r7, lr}
 8004b4c:	b085      	sub	sp, #20
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	60bb      	str	r3, [r7, #8]
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	689c      	ldr	r4, [r3, #8]
 8004b5c:	f001 f9d4 	bl	8005f08 <xTaskGetCurrentTaskHandle>
 8004b60:	4603      	mov	r3, r0
 8004b62:	429c      	cmp	r4, r3
 8004b64:	d107      	bne.n	8004b76 <xQueueTakeMutexRecursive+0x2c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004b70:	2301      	movs	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	e00c      	b.n	8004b90 <xQueueTakeMutexRecursive+0x46>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004b76:	6839      	ldr	r1, [r7, #0]
 8004b78:	68b8      	ldr	r0, [r7, #8]
 8004b7a:	f000 f9b9 	bl	8004ef0 <xQueueSemaphoreTake>
 8004b7e:	60f8      	str	r0, [r7, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d004      	beq.n	8004b90 <xQueueTakeMutexRecursive+0x46>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004b90:	68fb      	ldr	r3, [r7, #12]
	}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd90      	pop	{r4, r7, pc}
	...

08004b9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08a      	sub	sp, #40	@ 0x28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004baa:	2300      	movs	r3, #0
 8004bac:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bb2:	f001 fee7 	bl	8006984 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d302      	bcc.n	8004bc8 <xQueueGenericSend+0x2c>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d129      	bne.n	8004c1c <xQueueGenericSend+0x80>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	68b9      	ldr	r1, [r7, #8]
 8004bcc:	6a38      	ldr	r0, [r7, #32]
 8004bce:	f000 fac6 	bl	800515e <prvCopyDataToQueue>
 8004bd2:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d010      	beq.n	8004bfe <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	3324      	adds	r3, #36	@ 0x24
 8004be0:	4618      	mov	r0, r3
 8004be2:	f001 f809 	bl	8005bf8 <xTaskRemoveFromEventList>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d013      	beq.n	8004c14 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004bec:	4b3f      	ldr	r3, [pc, #252]	@ (8004cec <xQueueGenericSend+0x150>)
 8004bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	e00a      	b.n	8004c14 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d007      	beq.n	8004c14 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c04:	4b39      	ldr	r3, [pc, #228]	@ (8004cec <xQueueGenericSend+0x150>)
 8004c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c14:	f001 fed0 	bl	80069b8 <vPortExitCritical>
				return pdPASS;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e063      	b.n	8004ce4 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d103      	bne.n	8004c2a <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c22:	f001 fec9 	bl	80069b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	e05c      	b.n	8004ce4 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d106      	bne.n	8004c3e <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c30:	f107 0314 	add.w	r3, r7, #20
 8004c34:	4618      	mov	r0, r3
 8004c36:	f001 f835 	bl	8005ca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c3e:	f001 febb 	bl	80069b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c42:	f000 fdfb 	bl	800583c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c46:	f001 fe9d 	bl	8006984 <vPortEnterCritical>
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c50:	b25b      	sxtb	r3, r3
 8004c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c56:	d103      	bne.n	8004c60 <xQueueGenericSend+0xc4>
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c66:	b25b      	sxtb	r3, r3
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d103      	bne.n	8004c76 <xQueueGenericSend+0xda>
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c76:	f001 fe9f 	bl	80069b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c7a:	1d3a      	adds	r2, r7, #4
 8004c7c:	f107 0314 	add.w	r3, r7, #20
 8004c80:	4611      	mov	r1, r2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f001 f824 	bl	8005cd0 <xTaskCheckForTimeOut>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d124      	bne.n	8004cd8 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c8e:	6a38      	ldr	r0, [r7, #32]
 8004c90:	f000 fb5d 	bl	800534e <prvIsQueueFull>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d018      	beq.n	8004ccc <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	3310      	adds	r3, #16
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 ff74 	bl	8005b90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ca8:	6a38      	ldr	r0, [r7, #32]
 8004caa:	f000 fae8 	bl	800527e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004cae:	f000 fdd3 	bl	8005858 <xTaskResumeAll>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f47f af7c 	bne.w	8004bb2 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8004cba:	4b0c      	ldr	r3, [pc, #48]	@ (8004cec <xQueueGenericSend+0x150>)
 8004cbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	e772      	b.n	8004bb2 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ccc:	6a38      	ldr	r0, [r7, #32]
 8004cce:	f000 fad6 	bl	800527e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cd2:	f000 fdc1 	bl	8005858 <xTaskResumeAll>
 8004cd6:	e76c      	b.n	8004bb2 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004cd8:	6a38      	ldr	r0, [r7, #32]
 8004cda:	f000 fad0 	bl	800527e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cde:	f000 fdbb 	bl	8005858 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ce2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3728      	adds	r7, #40	@ 0x28
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	e000ed04 	.word	0xe000ed04

08004cf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08c      	sub	sp, #48	@ 0x30
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	62bb      	str	r3, [r7, #40]	@ 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d02:	f3ef 8211 	mrs	r2, BASEPRI
 8004d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	61ba      	str	r2, [r7, #24]
 8004d18:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d1a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d1c:	627b      	str	r3, [r7, #36]	@ 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d302      	bcc.n	8004d30 <xQueueGenericSendFromISR+0x40>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d12f      	bne.n	8004d90 <xQueueGenericSendFromISR+0xa0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3e:	61fb      	str	r3, [r7, #28]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d46:	f000 fa0a 	bl	800515e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d4a:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8004d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d52:	d112      	bne.n	8004d7a <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d016      	beq.n	8004d8a <xQueueGenericSendFromISR+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5e:	3324      	adds	r3, #36	@ 0x24
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 ff49 	bl	8005bf8 <xTaskRemoveFromEventList>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00e      	beq.n	8004d8a <xQueueGenericSendFromISR+0x9a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00b      	beq.n	8004d8a <xQueueGenericSendFromISR+0x9a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	e007      	b.n	8004d8a <xQueueGenericSendFromISR+0x9a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d7e:	3301      	adds	r3, #1
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	b25a      	sxtb	r2, r3
 8004d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
 8004d8e:	e001      	b.n	8004d94 <xQueueGenericSendFromISR+0xa4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d90:	2300      	movs	r3, #0
 8004d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d96:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3730      	adds	r7, #48	@ 0x30
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08a      	sub	sp, #40	@ 0x28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	623b      	str	r3, [r7, #32]
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dc0:	f001 fde0 	bl	8006984 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc8:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d01f      	beq.n	8004e10 <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dd0:	68b9      	ldr	r1, [r7, #8]
 8004dd2:	6a38      	ldr	r0, [r7, #32]
 8004dd4:	f000 fa2d 	bl	8005232 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	1e5a      	subs	r2, r3, #1
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00f      	beq.n	8004e08 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	3310      	adds	r3, #16
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 ff03 	bl	8005bf8 <xTaskRemoveFromEventList>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d007      	beq.n	8004e08 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004df8:	4b3c      	ldr	r3, [pc, #240]	@ (8004eec <xQueueReceive+0x140>)
 8004dfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e08:	f001 fdd6 	bl	80069b8 <vPortExitCritical>
				return pdPASS;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e069      	b.n	8004ee4 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d103      	bne.n	8004e1e <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e16:	f001 fdcf 	bl	80069b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e062      	b.n	8004ee4 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d106      	bne.n	8004e32 <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e24:	f107 0314 	add.w	r3, r7, #20
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 ff3b 	bl	8005ca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e32:	f001 fdc1 	bl	80069b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e36:	f000 fd01 	bl	800583c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e3a:	f001 fda3 	bl	8006984 <vPortEnterCritical>
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e44:	b25b      	sxtb	r3, r3
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4a:	d103      	bne.n	8004e54 <xQueueReceive+0xa8>
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e5a:	b25b      	sxtb	r3, r3
 8004e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e60:	d103      	bne.n	8004e6a <xQueueReceive+0xbe>
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e6a:	f001 fda5 	bl	80069b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e6e:	1d3a      	adds	r2, r7, #4
 8004e70:	f107 0314 	add.w	r3, r7, #20
 8004e74:	4611      	mov	r1, r2
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 ff2a 	bl	8005cd0 <xTaskCheckForTimeOut>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d123      	bne.n	8004eca <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e82:	6a38      	ldr	r0, [r7, #32]
 8004e84:	f000 fa4d 	bl	8005322 <prvIsQueueEmpty>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d017      	beq.n	8004ebe <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	3324      	adds	r3, #36	@ 0x24
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	4611      	mov	r1, r2
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fe7a 	bl	8005b90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e9c:	6a38      	ldr	r0, [r7, #32]
 8004e9e:	f000 f9ee 	bl	800527e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ea2:	f000 fcd9 	bl	8005858 <xTaskResumeAll>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d189      	bne.n	8004dc0 <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 8004eac:	4b0f      	ldr	r3, [pc, #60]	@ (8004eec <xQueueReceive+0x140>)
 8004eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	e780      	b.n	8004dc0 <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ebe:	6a38      	ldr	r0, [r7, #32]
 8004ec0:	f000 f9dd 	bl	800527e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ec4:	f000 fcc8 	bl	8005858 <xTaskResumeAll>
 8004ec8:	e77a      	b.n	8004dc0 <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004eca:	6a38      	ldr	r0, [r7, #32]
 8004ecc:	f000 f9d7 	bl	800527e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ed0:	f000 fcc2 	bl	8005858 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ed4:	6a38      	ldr	r0, [r7, #32]
 8004ed6:	f000 fa24 	bl	8005322 <prvIsQueueEmpty>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f43f af6f 	beq.w	8004dc0 <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ee2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3728      	adds	r7, #40	@ 0x28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	e000ed04 	.word	0xe000ed04

08004ef0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	@ 0x28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004efa:	2300      	movs	r3, #0
 8004efc:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004f02:	2300      	movs	r3, #0
 8004f04:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f06:	f001 fd3d 	bl	8006984 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0e:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d024      	beq.n	8004f60 <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	1e5a      	subs	r2, r3, #1
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d104      	bne.n	8004f30 <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004f26:	f001 f931 	bl	800618c <pvTaskIncrementMutexHeldCount>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00f      	beq.n	8004f58 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	3310      	adds	r3, #16
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fe5b 	bl	8005bf8 <xTaskRemoveFromEventList>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d007      	beq.n	8004f58 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f48:	4b4c      	ldr	r3, [pc, #304]	@ (800507c <xQueueSemaphoreTake+0x18c>)
 8004f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f58:	f001 fd2e 	bl	80069b8 <vPortExitCritical>
				return pdPASS;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e089      	b.n	8005074 <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d103      	bne.n	8004f6e <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004f66:	f001 fd27 	bl	80069b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e082      	b.n	8005074 <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f74:	f107 030c 	add.w	r3, r7, #12
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fe93 	bl	8005ca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f82:	f001 fd19 	bl	80069b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f86:	f000 fc59 	bl	800583c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f8a:	f001 fcfb 	bl	8006984 <vPortEnterCritical>
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f94:	b25b      	sxtb	r3, r3
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9a:	d103      	bne.n	8004fa4 <xQueueSemaphoreTake+0xb4>
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004faa:	b25b      	sxtb	r3, r3
 8004fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb0:	d103      	bne.n	8004fba <xQueueSemaphoreTake+0xca>
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fba:	f001 fcfd 	bl	80069b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fbe:	463a      	mov	r2, r7
 8004fc0:	f107 030c 	add.w	r3, r7, #12
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fe82 	bl	8005cd0 <xTaskCheckForTimeOut>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d132      	bne.n	8005038 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fd2:	69f8      	ldr	r0, [r7, #28]
 8004fd4:	f000 f9a5 	bl	8005322 <prvIsQueueEmpty>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d026      	beq.n	800502c <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d109      	bne.n	8004ffa <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 8004fe6:	f001 fccd 	bl	8006984 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 ffb8 	bl	8005f64 <xTaskPriorityInherit>
 8004ff4:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8004ff6:	f001 fcdf 	bl	80069b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3324      	adds	r3, #36	@ 0x24
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	4611      	mov	r1, r2
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fdc4 	bl	8005b90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005008:	69f8      	ldr	r0, [r7, #28]
 800500a:	f000 f938 	bl	800527e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800500e:	f000 fc23 	bl	8005858 <xTaskResumeAll>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	f47f af76 	bne.w	8004f06 <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 800501a:	4b18      	ldr	r3, [pc, #96]	@ (800507c <xQueueSemaphoreTake+0x18c>)
 800501c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	e76c      	b.n	8004f06 <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800502c:	69f8      	ldr	r0, [r7, #28]
 800502e:	f000 f926 	bl	800527e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005032:	f000 fc11 	bl	8005858 <xTaskResumeAll>
 8005036:	e766      	b.n	8004f06 <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005038:	69f8      	ldr	r0, [r7, #28]
 800503a:	f000 f920 	bl	800527e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800503e:	f000 fc0b 	bl	8005858 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005042:	69f8      	ldr	r0, [r7, #28]
 8005044:	f000 f96d 	bl	8005322 <prvIsQueueEmpty>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	f43f af5b 	beq.w	8004f06 <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00d      	beq.n	8005072 <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 8005056:	f001 fc95 	bl	8006984 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800505a:	69f8      	ldr	r0, [r7, #28]
 800505c:	f000 f867 	bl	800512e <prvGetDisinheritPriorityAfterTimeout>
 8005060:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	6979      	ldr	r1, [r7, #20]
 8005068:	4618      	mov	r0, r3
 800506a:	f001 f82f 	bl	80060cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800506e:	f001 fca3 	bl	80069b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005072:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005074:	4618      	mov	r0, r3
 8005076:	3728      	adds	r7, #40	@ 0x28
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	e000ed04 	.word	0xe000ed04

08005080 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08c      	sub	sp, #48	@ 0x30
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	62bb      	str	r3, [r7, #40]	@ 0x28
	__asm volatile
 8005090:	f3ef 8211 	mrs	r2, BASEPRI
 8005094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	61ba      	str	r2, [r7, #24]
 80050a6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80050a8:	69bb      	ldr	r3, [r7, #24]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050aa:	627b      	str	r3, [r7, #36]	@ 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b0:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d02d      	beq.n	8005114 <xQueueReceiveFromISR+0x94>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80050b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050be:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050c4:	f000 f8b5 	bl	8005232 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	1e5a      	subs	r2, r3, #1
 80050cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80050d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80050d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d8:	d112      	bne.n	8005100 <xQueueReceiveFromISR+0x80>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d015      	beq.n	800510e <xQueueReceiveFromISR+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e4:	3310      	adds	r3, #16
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fd86 	bl	8005bf8 <xTaskRemoveFromEventList>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00d      	beq.n	800510e <xQueueReceiveFromISR+0x8e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <xQueueReceiveFromISR+0x8e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e006      	b.n	800510e <xQueueReceiveFromISR+0x8e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005100:	7ffb      	ldrb	r3, [r7, #31]
 8005102:	3301      	adds	r3, #1
 8005104:	b2db      	uxtb	r3, r3
 8005106:	b25a      	sxtb	r2, r3
 8005108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800510e:	2301      	movs	r3, #1
 8005110:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005112:	e001      	b.n	8005118 <xQueueReceiveFromISR+0x98>
		}
		else
		{
			xReturn = pdFAIL;
 8005114:	2300      	movs	r3, #0
 8005116:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f383 8811 	msr	BASEPRI, r3
}
 8005122:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005126:	4618      	mov	r0, r3
 8005128:	3730      	adds	r7, #48	@ 0x30
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	2b00      	cmp	r3, #0
 800513c:	d006      	beq.n	800514c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e001      	b.n	8005150 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005150:	68fb      	ldr	r3, [r7, #12]
	}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b086      	sub	sp, #24
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005172:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10d      	bne.n	8005198 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d14d      	bne.n	8005220 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 ff53 	bl	8006034 <xTaskPriorityDisinherit>
 800518e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	609a      	str	r2, [r3, #8]
 8005196:	e043      	b.n	8005220 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d119      	bne.n	80051d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6858      	ldr	r0, [r3, #4]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a6:	461a      	mov	r2, r3
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	f001 febf 	bl	8006f2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b6:	441a      	add	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d32b      	bcc.n	8005220 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	605a      	str	r2, [r3, #4]
 80051d0:	e026      	b.n	8005220 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	68d8      	ldr	r0, [r3, #12]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051da:	461a      	mov	r2, r3
 80051dc:	68b9      	ldr	r1, [r7, #8]
 80051de:	f001 fea5 	bl	8006f2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ea:	425b      	negs	r3, r3
 80051ec:	441a      	add	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d207      	bcs.n	800520e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005206:	425b      	negs	r3, r3
 8005208:	441a      	add	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b02      	cmp	r3, #2
 8005212:	d105      	bne.n	8005220 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	3b01      	subs	r3, #1
 800521e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005228:	697b      	ldr	r3, [r7, #20]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	d018      	beq.n	8005276 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524c:	441a      	add	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	429a      	cmp	r2, r3
 800525c:	d303      	bcc.n	8005266 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68d9      	ldr	r1, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526e:	461a      	mov	r2, r3
 8005270:	6838      	ldr	r0, [r7, #0]
 8005272:	f001 fe5b 	bl	8006f2c <memcpy>
	}
}
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b084      	sub	sp, #16
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005286:	f001 fb7d 	bl	8006984 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005290:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005292:	e011      	b.n	80052b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	2b00      	cmp	r3, #0
 800529a:	d012      	beq.n	80052c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3324      	adds	r3, #36	@ 0x24
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fca9 	bl	8005bf8 <xTaskRemoveFromEventList>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052ac:	f000 fd56 	bl	8005d5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	dce9      	bgt.n	8005294 <prvUnlockQueue+0x16>
 80052c0:	e000      	b.n	80052c4 <prvUnlockQueue+0x46>
					break;
 80052c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	22ff      	movs	r2, #255	@ 0xff
 80052c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80052cc:	f001 fb74 	bl	80069b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052d0:	f001 fb58 	bl	8006984 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052dc:	e011      	b.n	8005302 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d012      	beq.n	800530c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3310      	adds	r3, #16
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fc84 	bl	8005bf8 <xTaskRemoveFromEventList>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052f6:	f000 fd31 	bl	8005d5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052fa:	7bbb      	ldrb	r3, [r7, #14]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005306:	2b00      	cmp	r3, #0
 8005308:	dce9      	bgt.n	80052de <prvUnlockQueue+0x60>
 800530a:	e000      	b.n	800530e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800530c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	22ff      	movs	r2, #255	@ 0xff
 8005312:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005316:	f001 fb4f 	bl	80069b8 <vPortExitCritical>
}
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800532a:	f001 fb2b 	bl	8006984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005332:	2b00      	cmp	r3, #0
 8005334:	d102      	bne.n	800533c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005336:	2301      	movs	r3, #1
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	e001      	b.n	8005340 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005340:	f001 fb3a 	bl	80069b8 <vPortExitCritical>

	return xReturn;
 8005344:	68fb      	ldr	r3, [r7, #12]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b084      	sub	sp, #16
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005356:	f001 fb15 	bl	8006984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005362:	429a      	cmp	r2, r3
 8005364:	d102      	bne.n	800536c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005366:	2301      	movs	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	e001      	b.n	8005370 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800536c:	2300      	movs	r3, #0
 800536e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005370:	f001 fb22 	bl	80069b8 <vPortExitCritical>

	return xReturn;
 8005374:	68fb      	ldr	r3, [r7, #12]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	e014      	b.n	80053ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005390:	4a0f      	ldr	r2, [pc, #60]	@ (80053d0 <vQueueAddToRegistry+0x50>)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10b      	bne.n	80053b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800539c:	490c      	ldr	r1, [pc, #48]	@ (80053d0 <vQueueAddToRegistry+0x50>)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053a6:	4a0a      	ldr	r2, [pc, #40]	@ (80053d0 <vQueueAddToRegistry+0x50>)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	4413      	add	r3, r2
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053b2:	e006      	b.n	80053c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3301      	adds	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b07      	cmp	r3, #7
 80053be:	d9e7      	bls.n	8005390 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	20000a6c 	.word	0x20000a6c

080053d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80053e4:	f001 face 	bl	8006984 <vPortEnterCritical>
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053ee:	b25b      	sxtb	r3, r3
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f4:	d103      	bne.n	80053fe <vQueueWaitForMessageRestricted+0x2a>
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005404:	b25b      	sxtb	r3, r3
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540a:	d103      	bne.n	8005414 <vQueueWaitForMessageRestricted+0x40>
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005414:	f001 fad0 	bl	80069b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541c:	2b00      	cmp	r3, #0
 800541e:	d106      	bne.n	800542e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	3324      	adds	r3, #36	@ 0x24
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fbc7 	bl	8005bbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800542e:	6978      	ldr	r0, [r7, #20]
 8005430:	f7ff ff25 	bl	800527e <prvUnlockQueue>
	}
 8005434:	bf00      	nop
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08a      	sub	sp, #40	@ 0x28
 8005440:	af04      	add	r7, sp, #16
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01e      	beq.n	800548e <xTaskCreateStatic+0x52>
 8005450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005452:	2b00      	cmp	r3, #0
 8005454:	d01b      	beq.n	800548e <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005458:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800545e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005468:	2300      	movs	r3, #0
 800546a:	9303      	str	r3, [sp, #12]
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	9302      	str	r3, [sp, #8]
 8005470:	f107 0310 	add.w	r3, r7, #16
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 f851 	bl	8005528 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005486:	6978      	ldr	r0, [r7, #20]
 8005488:	f000 f8e4 	bl	8005654 <prvAddNewTaskToReadyList>
 800548c:	e001      	b.n	8005492 <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 8005492:	693b      	ldr	r3, [r7, #16]
	}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08c      	sub	sp, #48	@ 0x30
 80054a0:	af04      	add	r7, sp, #16
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	4613      	mov	r3, r2
 80054aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054ac:	88fb      	ldrh	r3, [r7, #6]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 fb21 	bl	8006af8 <pvPortMalloc>
 80054b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00e      	beq.n	80054dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054be:	20a8      	movs	r0, #168	@ 0xa8
 80054c0:	f001 fb1a 	bl	8006af8 <pvPortMalloc>
 80054c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80054d2:	e005      	b.n	80054e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054d4:	6978      	ldr	r0, [r7, #20]
 80054d6:	f001 fba9 	bl	8006c2c <vPortFree>
 80054da:	e001      	b.n	80054e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054dc:	2300      	movs	r3, #0
 80054de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d017      	beq.n	8005516 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054ee:	88fa      	ldrh	r2, [r7, #6]
 80054f0:	2300      	movs	r3, #0
 80054f2:	9303      	str	r3, [sp, #12]
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	9302      	str	r3, [sp, #8]
 80054f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054fa:	9301      	str	r3, [sp, #4]
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	68b9      	ldr	r1, [r7, #8]
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f80f 	bl	8005528 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800550a:	69f8      	ldr	r0, [r7, #28]
 800550c:	f000 f8a2 	bl	8005654 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005510:	2301      	movs	r3, #1
 8005512:	61bb      	str	r3, [r7, #24]
 8005514:	e002      	b.n	800551c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005516:	f04f 33ff 	mov.w	r3, #4294967295
 800551a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800551c:	69bb      	ldr	r3, [r7, #24]
	}
 800551e:	4618      	mov	r0, r3
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005538:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	461a      	mov	r2, r3
 8005540:	21a5      	movs	r1, #165	@ 0xa5
 8005542:	f001 fc6f 	bl	8006e24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005548:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005550:	3b01      	subs	r3, #1
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f023 0307 	bic.w	r3, r3, #7
 800555e:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01f      	beq.n	80055a6 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	e012      	b.n	8005592 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	4413      	add	r3, r2
 8005572:	7819      	ldrb	r1, [r3, #0]
 8005574:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	4413      	add	r3, r2
 800557a:	3334      	adds	r3, #52	@ 0x34
 800557c:	460a      	mov	r2, r1
 800557e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	4413      	add	r3, r2
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d006      	beq.n	800559a <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	3301      	adds	r3, #1
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b0f      	cmp	r3, #15
 8005596:	d9e9      	bls.n	800556c <prvInitialiseNewTask+0x44>
 8005598:	e000      	b.n	800559c <prvInitialiseNewTask+0x74>
			{
				break;
 800559a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800559c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055a4:	e003      	b.n	80055ae <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	2b37      	cmp	r3, #55	@ 0x37
 80055b2:	d901      	bls.n	80055b8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055b4:	2337      	movs	r3, #55	@ 0x37
 80055b6:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ba:	6a3a      	ldr	r2, [r7, #32]
 80055bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c0:	6a3a      	ldr	r2, [r7, #32]
 80055c2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80055c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c6:	2200      	movs	r2, #0
 80055c8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055cc:	3304      	adds	r3, #4
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff f8ec 	bl	80047ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d6:	3318      	adds	r3, #24
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff f8e7 	bl	80047ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80055ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055f2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005606:	3354      	adds	r3, #84	@ 0x54
 8005608:	224c      	movs	r2, #76	@ 0x4c
 800560a:	2100      	movs	r1, #0
 800560c:	4618      	mov	r0, r3
 800560e:	f001 fc09 	bl	8006e24 <memset>
 8005612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005614:	4a0c      	ldr	r2, [pc, #48]	@ (8005648 <prvInitialiseNewTask+0x120>)
 8005616:	659a      	str	r2, [r3, #88]	@ 0x58
 8005618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561a:	4a0c      	ldr	r2, [pc, #48]	@ (800564c <prvInitialiseNewTask+0x124>)
 800561c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800561e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005620:	4a0b      	ldr	r2, [pc, #44]	@ (8005650 <prvInitialiseNewTask+0x128>)
 8005622:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	68f9      	ldr	r1, [r7, #12]
 8005628:	6938      	ldr	r0, [r7, #16]
 800562a:	f001 f909 	bl	8006840 <pxPortInitialiseStack>
 800562e:	4602      	mov	r2, r0
 8005630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005632:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800563e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005640:	bf00      	nop
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	20004cf8 	.word	0x20004cf8
 800564c:	20004d60 	.word	0x20004d60
 8005650:	20004dc8 	.word	0x20004dc8

08005654 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800565c:	f001 f992 	bl	8006984 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005660:	4b2d      	ldr	r3, [pc, #180]	@ (8005718 <prvAddNewTaskToReadyList+0xc4>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3301      	adds	r3, #1
 8005666:	4a2c      	ldr	r2, [pc, #176]	@ (8005718 <prvAddNewTaskToReadyList+0xc4>)
 8005668:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800566a:	4b2c      	ldr	r3, [pc, #176]	@ (800571c <prvAddNewTaskToReadyList+0xc8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d109      	bne.n	8005686 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005672:	4a2a      	ldr	r2, [pc, #168]	@ (800571c <prvAddNewTaskToReadyList+0xc8>)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005678:	4b27      	ldr	r3, [pc, #156]	@ (8005718 <prvAddNewTaskToReadyList+0xc4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d110      	bne.n	80056a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005680:	f000 fb90 	bl	8005da4 <prvInitialiseTaskLists>
 8005684:	e00d      	b.n	80056a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005686:	4b26      	ldr	r3, [pc, #152]	@ (8005720 <prvAddNewTaskToReadyList+0xcc>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d109      	bne.n	80056a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800568e:	4b23      	ldr	r3, [pc, #140]	@ (800571c <prvAddNewTaskToReadyList+0xc8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005698:	429a      	cmp	r2, r3
 800569a:	d802      	bhi.n	80056a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800569c:	4a1f      	ldr	r2, [pc, #124]	@ (800571c <prvAddNewTaskToReadyList+0xc8>)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056a2:	4b20      	ldr	r3, [pc, #128]	@ (8005724 <prvAddNewTaskToReadyList+0xd0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3301      	adds	r3, #1
 80056a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005724 <prvAddNewTaskToReadyList+0xd0>)
 80056aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005724 <prvAddNewTaskToReadyList+0xd0>)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005728 <prvAddNewTaskToReadyList+0xd4>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d903      	bls.n	80056c8 <prvAddNewTaskToReadyList+0x74>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c4:	4a18      	ldr	r2, [pc, #96]	@ (8005728 <prvAddNewTaskToReadyList+0xd4>)
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4a15      	ldr	r2, [pc, #84]	@ (800572c <prvAddNewTaskToReadyList+0xd8>)
 80056d6:	441a      	add	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3304      	adds	r3, #4
 80056dc:	4619      	mov	r1, r3
 80056de:	4610      	mov	r0, r2
 80056e0:	f7ff f871 	bl	80047c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056e4:	f001 f968 	bl	80069b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005720 <prvAddNewTaskToReadyList+0xcc>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00e      	beq.n	800570e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056f0:	4b0a      	ldr	r3, [pc, #40]	@ (800571c <prvAddNewTaskToReadyList+0xc8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d207      	bcs.n	800570e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005730 <prvAddNewTaskToReadyList+0xdc>)
 8005700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800570e:	bf00      	nop
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000f80 	.word	0x20000f80
 800571c:	20000aac 	.word	0x20000aac
 8005720:	20000f8c 	.word	0x20000f8c
 8005724:	20000f9c 	.word	0x20000f9c
 8005728:	20000f88 	.word	0x20000f88
 800572c:	20000ab0 	.word	0x20000ab0
 8005730:	e000ed04 	.word	0xe000ed04

08005734 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800573c:	2300      	movs	r3, #0
 800573e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d008      	beq.n	8005758 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8005746:	f000 f879 	bl	800583c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800574a:	2100      	movs	r1, #0
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fd31 	bl	80061b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005752:	f000 f881 	bl	8005858 <xTaskResumeAll>
 8005756:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d107      	bne.n	800576e <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 800575e:	4b06      	ldr	r3, [pc, #24]	@ (8005778 <vTaskDelay+0x44>)
 8005760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800576e:	bf00      	nop
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	e000ed04 	.word	0xe000ed04

0800577c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08a      	sub	sp, #40	@ 0x28
 8005780:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005786:	2300      	movs	r3, #0
 8005788:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800578a:	1d3a      	adds	r2, r7, #4
 800578c:	f107 0108 	add.w	r1, r7, #8
 8005790:	f107 030c 	add.w	r3, r7, #12
 8005794:	4618      	mov	r0, r3
 8005796:	f7fe ffb5 	bl	8004704 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	9202      	str	r2, [sp, #8]
 80057a2:	9301      	str	r3, [sp, #4]
 80057a4:	2300      	movs	r3, #0
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	2300      	movs	r3, #0
 80057aa:	460a      	mov	r2, r1
 80057ac:	491b      	ldr	r1, [pc, #108]	@ (800581c <vTaskStartScheduler+0xa0>)
 80057ae:	481c      	ldr	r0, [pc, #112]	@ (8005820 <vTaskStartScheduler+0xa4>)
 80057b0:	f7ff fe44 	bl	800543c <xTaskCreateStatic>
 80057b4:	4603      	mov	r3, r0
 80057b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005824 <vTaskStartScheduler+0xa8>)
 80057b8:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80057ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005824 <vTaskStartScheduler+0xa8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 80057c2:	2301      	movs	r3, #1
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	e001      	b.n	80057cc <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 80057c8:	2300      	movs	r3, #0
 80057ca:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d102      	bne.n	80057d8 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80057d2:	f000 fd43 	bl	800625c <xTimerCreateTimerTask>
 80057d6:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d11a      	bne.n	8005814 <vTaskStartScheduler+0x98>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	613b      	str	r3, [r7, #16]
}
 80057f0:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005828 <vTaskStartScheduler+0xac>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3354      	adds	r3, #84	@ 0x54
 80057f8:	4a0c      	ldr	r2, [pc, #48]	@ (800582c <vTaskStartScheduler+0xb0>)
 80057fa:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005830 <vTaskStartScheduler+0xb4>)
 80057fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005802:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005804:	4b0b      	ldr	r3, [pc, #44]	@ (8005834 <vTaskStartScheduler+0xb8>)
 8005806:	2201      	movs	r2, #1
 8005808:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800580a:	4b0b      	ldr	r3, [pc, #44]	@ (8005838 <vTaskStartScheduler+0xbc>)
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005810:	f001 f88e 	bl	8006930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005814:	bf00      	nop
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	0800705c 	.word	0x0800705c
 8005820:	08005d75 	.word	0x08005d75
 8005824:	20000fa4 	.word	0x20000fa4
 8005828:	20000aac 	.word	0x20000aac
 800582c:	200000c4 	.word	0x200000c4
 8005830:	20000fa0 	.word	0x20000fa0
 8005834:	20000f8c 	.word	0x20000f8c
 8005838:	20000f84 	.word	0x20000f84

0800583c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005840:	4b04      	ldr	r3, [pc, #16]	@ (8005854 <vTaskSuspendAll+0x18>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3301      	adds	r3, #1
 8005846:	4a03      	ldr	r2, [pc, #12]	@ (8005854 <vTaskSuspendAll+0x18>)
 8005848:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800584a:	bf00      	nop
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	20000fa8 	.word	0x20000fa8

08005858 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800585e:	2300      	movs	r3, #0
 8005860:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005862:	2300      	movs	r3, #0
 8005864:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005866:	f001 f88d 	bl	8006984 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800586a:	4b39      	ldr	r3, [pc, #228]	@ (8005950 <xTaskResumeAll+0xf8>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3b01      	subs	r3, #1
 8005870:	4a37      	ldr	r2, [pc, #220]	@ (8005950 <xTaskResumeAll+0xf8>)
 8005872:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005874:	4b36      	ldr	r3, [pc, #216]	@ (8005950 <xTaskResumeAll+0xf8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d162      	bne.n	8005942 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800587c:	4b35      	ldr	r3, [pc, #212]	@ (8005954 <xTaskResumeAll+0xfc>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d05e      	beq.n	8005942 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005884:	e02f      	b.n	80058e6 <xTaskResumeAll+0x8e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005886:	4b34      	ldr	r3, [pc, #208]	@ (8005958 <xTaskResumeAll+0x100>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3318      	adds	r3, #24
 8005892:	4618      	mov	r0, r3
 8005894:	f7fe fff4 	bl	8004880 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	3304      	adds	r3, #4
 800589c:	4618      	mov	r0, r3
 800589e:	f7fe ffef 	bl	8004880 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a6:	4b2d      	ldr	r3, [pc, #180]	@ (800595c <xTaskResumeAll+0x104>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d903      	bls.n	80058b6 <xTaskResumeAll+0x5e>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b2:	4a2a      	ldr	r2, [pc, #168]	@ (800595c <xTaskResumeAll+0x104>)
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4a27      	ldr	r2, [pc, #156]	@ (8005960 <xTaskResumeAll+0x108>)
 80058c4:	441a      	add	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3304      	adds	r3, #4
 80058ca:	4619      	mov	r1, r3
 80058cc:	4610      	mov	r0, r2
 80058ce:	f7fe ff7a 	bl	80047c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d6:	4b23      	ldr	r3, [pc, #140]	@ (8005964 <xTaskResumeAll+0x10c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058dc:	429a      	cmp	r2, r3
 80058de:	d302      	bcc.n	80058e6 <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 80058e0:	4b21      	ldr	r3, [pc, #132]	@ (8005968 <xTaskResumeAll+0x110>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058e6:	4b1c      	ldr	r3, [pc, #112]	@ (8005958 <xTaskResumeAll+0x100>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1cb      	bne.n	8005886 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058f4:	f000 fae8 	bl	8005ec8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058f8:	4b1c      	ldr	r3, [pc, #112]	@ (800596c <xTaskResumeAll+0x114>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d010      	beq.n	8005926 <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005904:	f000 f846 	bl	8005994 <xTaskIncrementTick>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 800590e:	4b16      	ldr	r3, [pc, #88]	@ (8005968 <xTaskResumeAll+0x110>)
 8005910:	2201      	movs	r2, #1
 8005912:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3b01      	subs	r3, #1
 8005918:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f1      	bne.n	8005904 <xTaskResumeAll+0xac>

						xPendedTicks = 0;
 8005920:	4b12      	ldr	r3, [pc, #72]	@ (800596c <xTaskResumeAll+0x114>)
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005926:	4b10      	ldr	r3, [pc, #64]	@ (8005968 <xTaskResumeAll+0x110>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800592e:	2301      	movs	r3, #1
 8005930:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005932:	4b0f      	ldr	r3, [pc, #60]	@ (8005970 <xTaskResumeAll+0x118>)
 8005934:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005942:	f001 f839 	bl	80069b8 <vPortExitCritical>

	return xAlreadyYielded;
 8005946:	68bb      	ldr	r3, [r7, #8]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20000fa8 	.word	0x20000fa8
 8005954:	20000f80 	.word	0x20000f80
 8005958:	20000f40 	.word	0x20000f40
 800595c:	20000f88 	.word	0x20000f88
 8005960:	20000ab0 	.word	0x20000ab0
 8005964:	20000aac 	.word	0x20000aac
 8005968:	20000f94 	.word	0x20000f94
 800596c:	20000f90 	.word	0x20000f90
 8005970:	e000ed04 	.word	0xe000ed04

08005974 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800597a:	4b05      	ldr	r3, [pc, #20]	@ (8005990 <xTaskGetTickCount+0x1c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005980:	687b      	ldr	r3, [r7, #4]
}
 8005982:	4618      	mov	r0, r3
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20000f84 	.word	0x20000f84

08005994 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800599e:	4b46      	ldr	r3, [pc, #280]	@ (8005ab8 <xTaskIncrementTick+0x124>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d17e      	bne.n	8005aa4 <xTaskIncrementTick+0x110>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059a6:	4b45      	ldr	r3, [pc, #276]	@ (8005abc <xTaskIncrementTick+0x128>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3301      	adds	r3, #1
 80059ac:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059ae:	4a43      	ldr	r2, [pc, #268]	@ (8005abc <xTaskIncrementTick+0x128>)
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d110      	bne.n	80059dc <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80059ba:	4b41      	ldr	r3, [pc, #260]	@ (8005ac0 <xTaskIncrementTick+0x12c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	4b40      	ldr	r3, [pc, #256]	@ (8005ac4 <xTaskIncrementTick+0x130>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a3e      	ldr	r2, [pc, #248]	@ (8005ac0 <xTaskIncrementTick+0x12c>)
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	4a3e      	ldr	r2, [pc, #248]	@ (8005ac4 <xTaskIncrementTick+0x130>)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	4b3e      	ldr	r3, [pc, #248]	@ (8005ac8 <xTaskIncrementTick+0x134>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3301      	adds	r3, #1
 80059d4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ac8 <xTaskIncrementTick+0x134>)
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	f000 fa76 	bl	8005ec8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059dc:	4b3b      	ldr	r3, [pc, #236]	@ (8005acc <xTaskIncrementTick+0x138>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d349      	bcc.n	8005a7a <xTaskIncrementTick+0xe6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059e6:	4b36      	ldr	r3, [pc, #216]	@ (8005ac0 <xTaskIncrementTick+0x12c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d104      	bne.n	80059fa <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f0:	4b36      	ldr	r3, [pc, #216]	@ (8005acc <xTaskIncrementTick+0x138>)
 80059f2:	f04f 32ff 	mov.w	r2, #4294967295
 80059f6:	601a      	str	r2, [r3, #0]
					break;
 80059f8:	e03f      	b.n	8005a7a <xTaskIncrementTick+0xe6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059fa:	4b31      	ldr	r3, [pc, #196]	@ (8005ac0 <xTaskIncrementTick+0x12c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d203      	bcs.n	8005a1a <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a12:	4a2e      	ldr	r2, [pc, #184]	@ (8005acc <xTaskIncrementTick+0x138>)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a18:	e02f      	b.n	8005a7a <xTaskIncrementTick+0xe6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fe ff2e 	bl	8004880 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d004      	beq.n	8005a36 <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	3318      	adds	r3, #24
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fe ff25 	bl	8004880 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a3a:	4b25      	ldr	r3, [pc, #148]	@ (8005ad0 <xTaskIncrementTick+0x13c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d903      	bls.n	8005a4a <xTaskIncrementTick+0xb6>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a46:	4a22      	ldr	r2, [pc, #136]	@ (8005ad0 <xTaskIncrementTick+0x13c>)
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad4 <xTaskIncrementTick+0x140>)
 8005a58:	441a      	add	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f7fe feb0 	bl	80047c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad8 <xTaskIncrementTick+0x144>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d3b8      	bcc.n	80059e6 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8005a74:	2301      	movs	r3, #1
 8005a76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a78:	e7b5      	b.n	80059e6 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a7a:	4b17      	ldr	r3, [pc, #92]	@ (8005ad8 <xTaskIncrementTick+0x144>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a80:	4914      	ldr	r1, [pc, #80]	@ (8005ad4 <xTaskIncrementTick+0x140>)
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d901      	bls.n	8005a96 <xTaskIncrementTick+0x102>
			{
				xSwitchRequired = pdTRUE;
 8005a92:	2301      	movs	r3, #1
 8005a94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a96:	4b11      	ldr	r3, [pc, #68]	@ (8005adc <xTaskIncrementTick+0x148>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d007      	beq.n	8005aae <xTaskIncrementTick+0x11a>
			{
				xSwitchRequired = pdTRUE;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	e004      	b.n	8005aae <xTaskIncrementTick+0x11a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8005ae0 <xTaskIncrementTick+0x14c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	4a0d      	ldr	r2, [pc, #52]	@ (8005ae0 <xTaskIncrementTick+0x14c>)
 8005aac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005aae:	697b      	ldr	r3, [r7, #20]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20000fa8 	.word	0x20000fa8
 8005abc:	20000f84 	.word	0x20000f84
 8005ac0:	20000f38 	.word	0x20000f38
 8005ac4:	20000f3c 	.word	0x20000f3c
 8005ac8:	20000f98 	.word	0x20000f98
 8005acc:	20000fa0 	.word	0x20000fa0
 8005ad0:	20000f88 	.word	0x20000f88
 8005ad4:	20000ab0 	.word	0x20000ab0
 8005ad8:	20000aac 	.word	0x20000aac
 8005adc:	20000f94 	.word	0x20000f94
 8005ae0:	20000f90 	.word	0x20000f90

08005ae4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005aea:	4b23      	ldr	r3, [pc, #140]	@ (8005b78 <vTaskSwitchContext+0x94>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005af2:	4b22      	ldr	r3, [pc, #136]	@ (8005b7c <vTaskSwitchContext+0x98>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005af8:	e038      	b.n	8005b6c <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8005afa:	4b20      	ldr	r3, [pc, #128]	@ (8005b7c <vTaskSwitchContext+0x98>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b00:	4b1f      	ldr	r3, [pc, #124]	@ (8005b80 <vTaskSwitchContext+0x9c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	607b      	str	r3, [r7, #4]
 8005b06:	e002      	b.n	8005b0e <vTaskSwitchContext+0x2a>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	607b      	str	r3, [r7, #4]
 8005b0e:	491d      	ldr	r1, [pc, #116]	@ (8005b84 <vTaskSwitchContext+0xa0>)
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0f2      	beq.n	8005b08 <vTaskSwitchContext+0x24>
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4a15      	ldr	r2, [pc, #84]	@ (8005b84 <vTaskSwitchContext+0xa0>)
 8005b2e:	4413      	add	r3, r2
 8005b30:	603b      	str	r3, [r7, #0]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	605a      	str	r2, [r3, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	3308      	adds	r3, #8
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d104      	bne.n	8005b52 <vTaskSwitchContext+0x6e>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	605a      	str	r2, [r3, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	4a0b      	ldr	r2, [pc, #44]	@ (8005b88 <vTaskSwitchContext+0xa4>)
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	4a08      	ldr	r2, [pc, #32]	@ (8005b80 <vTaskSwitchContext+0x9c>)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b62:	4b09      	ldr	r3, [pc, #36]	@ (8005b88 <vTaskSwitchContext+0xa4>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3354      	adds	r3, #84	@ 0x54
 8005b68:	4a08      	ldr	r2, [pc, #32]	@ (8005b8c <vTaskSwitchContext+0xa8>)
 8005b6a:	6013      	str	r3, [r2, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	20000fa8 	.word	0x20000fa8
 8005b7c:	20000f94 	.word	0x20000f94
 8005b80:	20000f88 	.word	0x20000f88
 8005b84:	20000ab0 	.word	0x20000ab0
 8005b88:	20000aac 	.word	0x20000aac
 8005b8c:	200000c4 	.word	0x200000c4

08005b90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b9a:	4b07      	ldr	r3, [pc, #28]	@ (8005bb8 <vTaskPlaceOnEventList+0x28>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3318      	adds	r3, #24
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fe fe33 	bl	800480e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ba8:	2101      	movs	r1, #1
 8005baa:	6838      	ldr	r0, [r7, #0]
 8005bac:	f000 fb02 	bl	80061b4 <prvAddCurrentTaskToDelayedList>
}
 8005bb0:	bf00      	nop
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	20000aac 	.word	0x20000aac

08005bbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf4 <vTaskPlaceOnEventListRestricted+0x38>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3318      	adds	r3, #24
 8005bce:	4619      	mov	r1, r3
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f7fe fdf8 	bl	80047c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 8005bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8005be0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	68b8      	ldr	r0, [r7, #8]
 8005be6:	f000 fae5 	bl	80061b4 <prvAddCurrentTaskToDelayedList>
	}
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000aac 	.word	0x20000aac

08005bf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	3318      	adds	r3, #24
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fe fe37 	bl	8004880 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c12:	4b1e      	ldr	r3, [pc, #120]	@ (8005c8c <xTaskRemoveFromEventList+0x94>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d11d      	bne.n	8005c56 <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe fe2e 	bl	8004880 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c28:	4b19      	ldr	r3, [pc, #100]	@ (8005c90 <xTaskRemoveFromEventList+0x98>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d903      	bls.n	8005c38 <xTaskRemoveFromEventList+0x40>
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c34:	4a16      	ldr	r2, [pc, #88]	@ (8005c90 <xTaskRemoveFromEventList+0x98>)
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4a13      	ldr	r2, [pc, #76]	@ (8005c94 <xTaskRemoveFromEventList+0x9c>)
 8005c46:	441a      	add	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f7fe fdb9 	bl	80047c6 <vListInsertEnd>
 8005c54:	e005      	b.n	8005c62 <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	3318      	adds	r3, #24
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	480e      	ldr	r0, [pc, #56]	@ (8005c98 <xTaskRemoveFromEventList+0xa0>)
 8005c5e:	f7fe fdb2 	bl	80047c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c66:	4b0d      	ldr	r3, [pc, #52]	@ (8005c9c <xTaskRemoveFromEventList+0xa4>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d905      	bls.n	8005c7c <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c70:	2301      	movs	r3, #1
 8005c72:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c74:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca0 <xTaskRemoveFromEventList+0xa8>)
 8005c76:	2201      	movs	r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	e001      	b.n	8005c80 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8005c80:	68fb      	ldr	r3, [r7, #12]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000fa8 	.word	0x20000fa8
 8005c90:	20000f88 	.word	0x20000f88
 8005c94:	20000ab0 	.word	0x20000ab0
 8005c98:	20000f40 	.word	0x20000f40
 8005c9c:	20000aac 	.word	0x20000aac
 8005ca0:	20000f94 	.word	0x20000f94

08005ca4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cac:	4b06      	ldr	r3, [pc, #24]	@ (8005cc8 <vTaskInternalSetTimeOutState+0x24>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005cb4:	4b05      	ldr	r3, [pc, #20]	@ (8005ccc <vTaskInternalSetTimeOutState+0x28>)
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	605a      	str	r2, [r3, #4]
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	20000f98 	.word	0x20000f98
 8005ccc:	20000f84 	.word	0x20000f84

08005cd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8005cda:	f000 fe53 	bl	8006984 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cde:	4b1d      	ldr	r3, [pc, #116]	@ (8005d54 <xTaskCheckForTimeOut+0x84>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf6:	d102      	bne.n	8005cfe <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	e023      	b.n	8005d46 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4b15      	ldr	r3, [pc, #84]	@ (8005d58 <xTaskCheckForTimeOut+0x88>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d007      	beq.n	8005d1a <xTaskCheckForTimeOut+0x4a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d302      	bcc.n	8005d1a <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d14:	2301      	movs	r3, #1
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	e015      	b.n	8005d46 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d20b      	bcs.n	8005d3c <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	1ad2      	subs	r2, r2, r3
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff ffb7 	bl	8005ca4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	e004      	b.n	8005d46 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d42:	2301      	movs	r3, #1
 8005d44:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8005d46:	f000 fe37 	bl	80069b8 <vPortExitCritical>

	return xReturn;
 8005d4a:	697b      	ldr	r3, [r7, #20]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	20000f84 	.word	0x20000f84
 8005d58:	20000f98 	.word	0x20000f98

08005d5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d60:	4b03      	ldr	r3, [pc, #12]	@ (8005d70 <vTaskMissedYield+0x14>)
 8005d62:	2201      	movs	r2, #1
 8005d64:	601a      	str	r2, [r3, #0]
}
 8005d66:	bf00      	nop
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	20000f94 	.word	0x20000f94

08005d74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d7c:	f000 f852 	bl	8005e24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d80:	4b06      	ldr	r3, [pc, #24]	@ (8005d9c <prvIdleTask+0x28>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d9f9      	bls.n	8005d7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d88:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <prvIdleTask+0x2c>)
 8005d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d98:	e7f0      	b.n	8005d7c <prvIdleTask+0x8>
 8005d9a:	bf00      	nop
 8005d9c:	20000ab0 	.word	0x20000ab0
 8005da0:	e000ed04 	.word	0xe000ed04

08005da4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005daa:	2300      	movs	r3, #0
 8005dac:	607b      	str	r3, [r7, #4]
 8005dae:	e00c      	b.n	8005dca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	4613      	mov	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4a12      	ldr	r2, [pc, #72]	@ (8005e04 <prvInitialiseTaskLists+0x60>)
 8005dbc:	4413      	add	r3, r2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fe fcd4 	bl	800476c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	607b      	str	r3, [r7, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b37      	cmp	r3, #55	@ 0x37
 8005dce:	d9ef      	bls.n	8005db0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005dd0:	480d      	ldr	r0, [pc, #52]	@ (8005e08 <prvInitialiseTaskLists+0x64>)
 8005dd2:	f7fe fccb 	bl	800476c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005dd6:	480d      	ldr	r0, [pc, #52]	@ (8005e0c <prvInitialiseTaskLists+0x68>)
 8005dd8:	f7fe fcc8 	bl	800476c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ddc:	480c      	ldr	r0, [pc, #48]	@ (8005e10 <prvInitialiseTaskLists+0x6c>)
 8005dde:	f7fe fcc5 	bl	800476c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005de2:	480c      	ldr	r0, [pc, #48]	@ (8005e14 <prvInitialiseTaskLists+0x70>)
 8005de4:	f7fe fcc2 	bl	800476c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005de8:	480b      	ldr	r0, [pc, #44]	@ (8005e18 <prvInitialiseTaskLists+0x74>)
 8005dea:	f7fe fcbf 	bl	800476c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dee:	4b0b      	ldr	r3, [pc, #44]	@ (8005e1c <prvInitialiseTaskLists+0x78>)
 8005df0:	4a05      	ldr	r2, [pc, #20]	@ (8005e08 <prvInitialiseTaskLists+0x64>)
 8005df2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005df4:	4b0a      	ldr	r3, [pc, #40]	@ (8005e20 <prvInitialiseTaskLists+0x7c>)
 8005df6:	4a05      	ldr	r2, [pc, #20]	@ (8005e0c <prvInitialiseTaskLists+0x68>)
 8005df8:	601a      	str	r2, [r3, #0]
}
 8005dfa:	bf00      	nop
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20000ab0 	.word	0x20000ab0
 8005e08:	20000f10 	.word	0x20000f10
 8005e0c:	20000f24 	.word	0x20000f24
 8005e10:	20000f40 	.word	0x20000f40
 8005e14:	20000f54 	.word	0x20000f54
 8005e18:	20000f6c 	.word	0x20000f6c
 8005e1c:	20000f38 	.word	0x20000f38
 8005e20:	20000f3c 	.word	0x20000f3c

08005e24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e2a:	e019      	b.n	8005e60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e2c:	f000 fdaa 	bl	8006984 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e30:	4b10      	ldr	r3, [pc, #64]	@ (8005e74 <prvCheckTasksWaitingTermination+0x50>)
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fe fd1f 	bl	8004880 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e42:	4b0d      	ldr	r3, [pc, #52]	@ (8005e78 <prvCheckTasksWaitingTermination+0x54>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	4a0b      	ldr	r2, [pc, #44]	@ (8005e78 <prvCheckTasksWaitingTermination+0x54>)
 8005e4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e7c <prvCheckTasksWaitingTermination+0x58>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3b01      	subs	r3, #1
 8005e52:	4a0a      	ldr	r2, [pc, #40]	@ (8005e7c <prvCheckTasksWaitingTermination+0x58>)
 8005e54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e56:	f000 fdaf 	bl	80069b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f810 	bl	8005e80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e60:	4b06      	ldr	r3, [pc, #24]	@ (8005e7c <prvCheckTasksWaitingTermination+0x58>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1e1      	bne.n	8005e2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e68:	bf00      	nop
 8005e6a:	bf00      	nop
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000f54 	.word	0x20000f54
 8005e78:	20000f80 	.word	0x20000f80
 8005e7c:	20000f68 	.word	0x20000f68

08005e80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3354      	adds	r3, #84	@ 0x54
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 ffd1 	bl	8006e34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d108      	bne.n	8005eae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fec3 	bl	8006c2c <vPortFree>
				vPortFree( pxTCB );
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fec0 	bl	8006c2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005eac:	e007      	b.n	8005ebe <prvDeleteTCB+0x3e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d102      	bne.n	8005ebe <prvDeleteTCB+0x3e>
				vPortFree( pxTCB );
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 feb7 	bl	8006c2c <vPortFree>
	}
 8005ebe:	bf00      	nop
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
	...

08005ec8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ece:	4b0c      	ldr	r3, [pc, #48]	@ (8005f00 <prvResetNextTaskUnblockTime+0x38>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d104      	bne.n	8005ee2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8005f04 <prvResetNextTaskUnblockTime+0x3c>)
 8005eda:	f04f 32ff 	mov.w	r2, #4294967295
 8005ede:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ee0:	e008      	b.n	8005ef4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee2:	4b07      	ldr	r3, [pc, #28]	@ (8005f00 <prvResetNextTaskUnblockTime+0x38>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	4a04      	ldr	r2, [pc, #16]	@ (8005f04 <prvResetNextTaskUnblockTime+0x3c>)
 8005ef2:	6013      	str	r3, [r2, #0]
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	20000f38 	.word	0x20000f38
 8005f04:	20000fa0 	.word	0x20000fa0

08005f08 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005f0e:	4b05      	ldr	r3, [pc, #20]	@ (8005f24 <xTaskGetCurrentTaskHandle+0x1c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005f14:	687b      	ldr	r3, [r7, #4]
	}
 8005f16:	4618      	mov	r0, r3
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	20000aac 	.word	0x20000aac

08005f28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f5c <xTaskGetSchedulerState+0x34>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d102      	bne.n	8005f3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f36:	2301      	movs	r3, #1
 8005f38:	607b      	str	r3, [r7, #4]
 8005f3a:	e008      	b.n	8005f4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f3c:	4b08      	ldr	r3, [pc, #32]	@ (8005f60 <xTaskGetSchedulerState+0x38>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d102      	bne.n	8005f4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f44:	2302      	movs	r3, #2
 8005f46:	607b      	str	r3, [r7, #4]
 8005f48:	e001      	b.n	8005f4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f4e:	687b      	ldr	r3, [r7, #4]
	}
 8005f50:	4618      	mov	r0, r3
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	20000f8c 	.word	0x20000f8c
 8005f60:	20000fa8 	.word	0x20000fa8

08005f64 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005f70:	2300      	movs	r3, #0
 8005f72:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d051      	beq.n	800601e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8006028 <xTaskPriorityInherit+0xc4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d241      	bcs.n	800600c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	db06      	blt.n	8005f9e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f90:	4b25      	ldr	r3, [pc, #148]	@ (8006028 <xTaskPriorityInherit+0xc4>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	6959      	ldr	r1, [r3, #20]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4a1f      	ldr	r2, [pc, #124]	@ (800602c <xTaskPriorityInherit+0xc8>)
 8005fb0:	4413      	add	r3, r2
 8005fb2:	4299      	cmp	r1, r3
 8005fb4:	d122      	bne.n	8005ffc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fe fc60 	bl	8004880 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005fc0:	4b19      	ldr	r3, [pc, #100]	@ (8006028 <xTaskPriorityInherit+0xc4>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fce:	4b18      	ldr	r3, [pc, #96]	@ (8006030 <xTaskPriorityInherit+0xcc>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d903      	bls.n	8005fde <xTaskPriorityInherit+0x7a>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fda:	4a15      	ldr	r2, [pc, #84]	@ (8006030 <xTaskPriorityInherit+0xcc>)
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4a10      	ldr	r2, [pc, #64]	@ (800602c <xTaskPriorityInherit+0xc8>)
 8005fec:	441a      	add	r2, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	f7fe fbe6 	bl	80047c6 <vListInsertEnd>
 8005ffa:	e004      	b.n	8006006 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8006028 <xTaskPriorityInherit+0xc4>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006006:	2301      	movs	r3, #1
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	e008      	b.n	800601e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006010:	4b05      	ldr	r3, [pc, #20]	@ (8006028 <xTaskPriorityInherit+0xc4>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006016:	429a      	cmp	r2, r3
 8006018:	d201      	bcs.n	800601e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800601a:	2301      	movs	r3, #1
 800601c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800601e:	68fb      	ldr	r3, [r7, #12]
	}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	20000aac 	.word	0x20000aac
 800602c:	20000ab0 	.word	0x20000ab0
 8006030:	20000f88 	.word	0x20000f88

08006034 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d037      	beq.n	80060ba <xTaskPriorityDisinherit+0x86>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800604e:	1e5a      	subs	r2, r3, #1
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800605c:	429a      	cmp	r2, r3
 800605e:	d02c      	beq.n	80060ba <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006064:	2b00      	cmp	r3, #0
 8006066:	d128      	bne.n	80060ba <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	3304      	adds	r3, #4
 800606c:	4618      	mov	r0, r3
 800606e:	f7fe fc07 	bl	8004880 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800608a:	4b0e      	ldr	r3, [pc, #56]	@ (80060c4 <xTaskPriorityDisinherit+0x90>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d903      	bls.n	800609a <xTaskPriorityDisinherit+0x66>
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006096:	4a0b      	ldr	r2, [pc, #44]	@ (80060c4 <xTaskPriorityDisinherit+0x90>)
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800609e:	4613      	mov	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4a08      	ldr	r2, [pc, #32]	@ (80060c8 <xTaskPriorityDisinherit+0x94>)
 80060a8:	441a      	add	r2, r3
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	3304      	adds	r3, #4
 80060ae:	4619      	mov	r1, r3
 80060b0:	4610      	mov	r0, r2
 80060b2:	f7fe fb88 	bl	80047c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060b6:	2301      	movs	r3, #1
 80060b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060ba:	68fb      	ldr	r3, [r7, #12]
	}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	20000f88 	.word	0x20000f88
 80060c8:	20000ab0 	.word	0x20000ab0

080060cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80060da:	2301      	movs	r3, #1
 80060dc:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d04b      	beq.n	800617c <vTaskPriorityDisinheritAfterTimeout+0xb0>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d902      	bls.n	80060f4 <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	e002      	b.n	80060fa <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060f8:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	429a      	cmp	r2, r3
 8006102:	d03b      	beq.n	800617c <vTaskPriorityDisinheritAfterTimeout+0xb0>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	429a      	cmp	r2, r3
 800610c:	d136      	bne.n	800617c <vTaskPriorityDisinheritAfterTimeout+0xb0>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006112:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	2b00      	cmp	r3, #0
 8006120:	db04      	blt.n	800612c <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	6959      	ldr	r1, [r3, #20]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4a12      	ldr	r2, [pc, #72]	@ (8006184 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800613c:	4413      	add	r3, r2
 800613e:	4299      	cmp	r1, r3
 8006140:	d11c      	bne.n	800617c <vTaskPriorityDisinheritAfterTimeout+0xb0>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	3304      	adds	r3, #4
 8006146:	4618      	mov	r0, r3
 8006148:	f7fe fb9a 	bl	8004880 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006150:	4b0d      	ldr	r3, [pc, #52]	@ (8006188 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d903      	bls.n	8006160 <vTaskPriorityDisinheritAfterTimeout+0x94>
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615c:	4a0a      	ldr	r2, [pc, #40]	@ (8006188 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4a05      	ldr	r2, [pc, #20]	@ (8006184 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800616e:	441a      	add	r2, r3
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	3304      	adds	r3, #4
 8006174:	4619      	mov	r1, r3
 8006176:	4610      	mov	r0, r2
 8006178:	f7fe fb25 	bl	80047c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800617c:	bf00      	nop
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000ab0 	.word	0x20000ab0
 8006188:	20000f88 	.word	0x20000f88

0800618c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006190:	4b07      	ldr	r3, [pc, #28]	@ (80061b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d004      	beq.n	80061a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006198:	4b05      	ldr	r3, [pc, #20]	@ (80061b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800619e:	3201      	adds	r2, #1
 80061a0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80061a2:	4b03      	ldr	r3, [pc, #12]	@ (80061b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80061a4:	681b      	ldr	r3, [r3, #0]
	}
 80061a6:	4618      	mov	r0, r3
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	20000aac 	.word	0x20000aac

080061b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061be:	4b21      	ldr	r3, [pc, #132]	@ (8006244 <prvAddCurrentTaskToDelayedList+0x90>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061c4:	4b20      	ldr	r3, [pc, #128]	@ (8006248 <prvAddCurrentTaskToDelayedList+0x94>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fb58 	bl	8004880 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d10a      	bne.n	80061ee <prvAddCurrentTaskToDelayedList+0x3a>
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061de:	4b1a      	ldr	r3, [pc, #104]	@ (8006248 <prvAddCurrentTaskToDelayedList+0x94>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3304      	adds	r3, #4
 80061e4:	4619      	mov	r1, r3
 80061e6:	4819      	ldr	r0, [pc, #100]	@ (800624c <prvAddCurrentTaskToDelayedList+0x98>)
 80061e8:	f7fe faed 	bl	80047c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061ec:	e026      	b.n	800623c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4413      	add	r3, r2
 80061f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061f6:	4b14      	ldr	r3, [pc, #80]	@ (8006248 <prvAddCurrentTaskToDelayedList+0x94>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	429a      	cmp	r2, r3
 8006204:	d209      	bcs.n	800621a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006206:	4b12      	ldr	r3, [pc, #72]	@ (8006250 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4b0f      	ldr	r3, [pc, #60]	@ (8006248 <prvAddCurrentTaskToDelayedList+0x94>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3304      	adds	r3, #4
 8006210:	4619      	mov	r1, r3
 8006212:	4610      	mov	r0, r2
 8006214:	f7fe fafb 	bl	800480e <vListInsert>
}
 8006218:	e010      	b.n	800623c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800621a:	4b0e      	ldr	r3, [pc, #56]	@ (8006254 <prvAddCurrentTaskToDelayedList+0xa0>)
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4b0a      	ldr	r3, [pc, #40]	@ (8006248 <prvAddCurrentTaskToDelayedList+0x94>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3304      	adds	r3, #4
 8006224:	4619      	mov	r1, r3
 8006226:	4610      	mov	r0, r2
 8006228:	f7fe faf1 	bl	800480e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800622c:	4b0a      	ldr	r3, [pc, #40]	@ (8006258 <prvAddCurrentTaskToDelayedList+0xa4>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	429a      	cmp	r2, r3
 8006234:	d202      	bcs.n	800623c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006236:	4a08      	ldr	r2, [pc, #32]	@ (8006258 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	6013      	str	r3, [r2, #0]
}
 800623c:	bf00      	nop
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	20000f84 	.word	0x20000f84
 8006248:	20000aac 	.word	0x20000aac
 800624c:	20000f6c 	.word	0x20000f6c
 8006250:	20000f3c 	.word	0x20000f3c
 8006254:	20000f38 	.word	0x20000f38
 8006258:	20000fa0 	.word	0x20000fa0

0800625c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b088      	sub	sp, #32
 8006260:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006262:	2300      	movs	r3, #0
 8006264:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006266:	f000 faab 	bl	80067c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800626a:	4b15      	ldr	r3, [pc, #84]	@ (80062c0 <xTimerCreateTimerTask+0x64>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d020      	beq.n	80062b4 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006272:	2300      	movs	r3, #0
 8006274:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006276:	2300      	movs	r3, #0
 8006278:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800627a:	463a      	mov	r2, r7
 800627c:	1d39      	adds	r1, r7, #4
 800627e:	f107 0308 	add.w	r3, r7, #8
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe fa58 	bl	8004738 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	9202      	str	r2, [sp, #8]
 8006290:	9301      	str	r3, [sp, #4]
 8006292:	2302      	movs	r3, #2
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	2300      	movs	r3, #0
 8006298:	460a      	mov	r2, r1
 800629a:	490a      	ldr	r1, [pc, #40]	@ (80062c4 <xTimerCreateTimerTask+0x68>)
 800629c:	480a      	ldr	r0, [pc, #40]	@ (80062c8 <xTimerCreateTimerTask+0x6c>)
 800629e:	f7ff f8cd 	bl	800543c <xTaskCreateStatic>
 80062a2:	4603      	mov	r3, r0
 80062a4:	4a09      	ldr	r2, [pc, #36]	@ (80062cc <xTimerCreateTimerTask+0x70>)
 80062a6:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062a8:	4b08      	ldr	r3, [pc, #32]	@ (80062cc <xTimerCreateTimerTask+0x70>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80062b0:	2301      	movs	r3, #1
 80062b2:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 80062b4:	68fb      	ldr	r3, [r7, #12]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000fdc 	.word	0x20000fdc
 80062c4:	08007064 	.word	0x08007064
 80062c8:	080063d1 	.word	0x080063d1
 80062cc:	20000fe0 	.word	0x20000fe0

080062d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08a      	sub	sp, #40	@ 0x28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80062de:	2300      	movs	r3, #0
 80062e0:	627b      	str	r3, [r7, #36]	@ 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062e2:	4b1a      	ldr	r3, [pc, #104]	@ (800634c <xTimerGenericCommand+0x7c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d02a      	beq.n	8006340 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b05      	cmp	r3, #5
 80062fa:	dc18      	bgt.n	800632e <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062fc:	f7ff fe14 	bl	8005f28 <xTaskGetSchedulerState>
 8006300:	4603      	mov	r3, r0
 8006302:	2b02      	cmp	r3, #2
 8006304:	d109      	bne.n	800631a <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006306:	4b11      	ldr	r3, [pc, #68]	@ (800634c <xTimerGenericCommand+0x7c>)
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	f107 0114 	add.w	r1, r7, #20
 800630e:	2300      	movs	r3, #0
 8006310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006312:	f7fe fc43 	bl	8004b9c <xQueueGenericSend>
 8006316:	6278      	str	r0, [r7, #36]	@ 0x24
 8006318:	e012      	b.n	8006340 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800631a:	4b0c      	ldr	r3, [pc, #48]	@ (800634c <xTimerGenericCommand+0x7c>)
 800631c:	6818      	ldr	r0, [r3, #0]
 800631e:	f107 0114 	add.w	r1, r7, #20
 8006322:	2300      	movs	r3, #0
 8006324:	2200      	movs	r2, #0
 8006326:	f7fe fc39 	bl	8004b9c <xQueueGenericSend>
 800632a:	6278      	str	r0, [r7, #36]	@ 0x24
 800632c:	e008      	b.n	8006340 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800632e:	4b07      	ldr	r3, [pc, #28]	@ (800634c <xTimerGenericCommand+0x7c>)
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	f107 0114 	add.w	r1, r7, #20
 8006336:	2300      	movs	r3, #0
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	f7fe fcd9 	bl	8004cf0 <xQueueGenericSendFromISR>
 800633e:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006342:	4618      	mov	r0, r3
 8006344:	3728      	adds	r7, #40	@ 0x28
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20000fdc 	.word	0x20000fdc

08006350 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af02      	add	r7, sp, #8
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800635a:	4b1c      	ldr	r3, [pc, #112]	@ (80063cc <prvProcessExpiredTimer+0x7c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3304      	adds	r3, #4
 8006368:	4618      	mov	r0, r3
 800636a:	f7fe fa89 	bl	8004880 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d015      	beq.n	80063a8 <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	699a      	ldr	r2, [r3, #24]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	18d1      	adds	r1, r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f8c7 	bl	800651c <prvInsertTimerInActiveList>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d012      	beq.n	80063ba <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006394:	2300      	movs	r3, #0
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	2300      	movs	r3, #0
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	2100      	movs	r1, #0
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f7ff ff96 	bl	80062d0 <xTimerGenericCommand>
 80063a4:	60b8      	str	r0, [r7, #8]
 80063a6:	e008      	b.n	80063ba <prvProcessExpiredTimer+0x6a>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063ae:	f023 0301 	bic.w	r3, r3, #1
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	4798      	blx	r3
}
 80063c2:	bf00      	nop
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20000fd4 	.word	0x20000fd4

080063d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063d8:	f107 0308 	add.w	r3, r7, #8
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 f859 	bl	8006494 <prvGetNextExpireTime>
 80063e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	4619      	mov	r1, r3
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 f805 	bl	80063f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063ee:	f000 f8d7 	bl	80065a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063f2:	bf00      	nop
 80063f4:	e7f0      	b.n	80063d8 <prvTimerTask+0x8>
	...

080063f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006402:	f7ff fa1b 	bl	800583c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006406:	f107 0308 	add.w	r3, r7, #8
 800640a:	4618      	mov	r0, r3
 800640c:	f000 f866 	bl	80064dc <prvSampleTimeNow>
 8006410:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d130      	bne.n	800647a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10a      	bne.n	8006434 <prvProcessTimerOrBlockTask+0x3c>
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	429a      	cmp	r2, r3
 8006424:	d806      	bhi.n	8006434 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006426:	f7ff fa17 	bl	8005858 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800642a:	68f9      	ldr	r1, [r7, #12]
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f7ff ff8f 	bl	8006350 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006432:	e024      	b.n	800647e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d008      	beq.n	800644c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800643a:	4b13      	ldr	r3, [pc, #76]	@ (8006488 <prvProcessTimerOrBlockTask+0x90>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <prvProcessTimerOrBlockTask+0x50>
 8006444:	2301      	movs	r3, #1
 8006446:	e000      	b.n	800644a <prvProcessTimerOrBlockTask+0x52>
 8006448:	2300      	movs	r3, #0
 800644a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800644c:	4b0f      	ldr	r3, [pc, #60]	@ (800648c <prvProcessTimerOrBlockTask+0x94>)
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	4619      	mov	r1, r3
 800645a:	f7fe ffbb 	bl	80053d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800645e:	f7ff f9fb 	bl	8005858 <xTaskResumeAll>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10a      	bne.n	800647e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006468:	4b09      	ldr	r3, [pc, #36]	@ (8006490 <prvProcessTimerOrBlockTask+0x98>)
 800646a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	f3bf 8f6f 	isb	sy
}
 8006478:	e001      	b.n	800647e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800647a:	f7ff f9ed 	bl	8005858 <xTaskResumeAll>
}
 800647e:	bf00      	nop
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20000fd8 	.word	0x20000fd8
 800648c:	20000fdc 	.word	0x20000fdc
 8006490:	e000ed04 	.word	0xe000ed04

08006494 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800649c:	4b0e      	ldr	r3, [pc, #56]	@ (80064d8 <prvGetNextExpireTime+0x44>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <prvGetNextExpireTime+0x16>
 80064a6:	2201      	movs	r2, #1
 80064a8:	e000      	b.n	80064ac <prvGetNextExpireTime+0x18>
 80064aa:	2200      	movs	r2, #0
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d105      	bne.n	80064c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064b8:	4b07      	ldr	r3, [pc, #28]	@ (80064d8 <prvGetNextExpireTime+0x44>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	e001      	b.n	80064c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80064c8:	68fb      	ldr	r3, [r7, #12]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	20000fd4 	.word	0x20000fd4

080064dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064e4:	f7ff fa46 	bl	8005974 <xTaskGetTickCount>
 80064e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006518 <prvSampleTimeNow+0x3c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d205      	bcs.n	8006500 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064f4:	f000 f90e 	bl	8006714 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	e002      	b.n	8006506 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006506:	4a04      	ldr	r2, [pc, #16]	@ (8006518 <prvSampleTimeNow+0x3c>)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800650c:	68fb      	ldr	r3, [r7, #12]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20000fe4 	.word	0x20000fe4

0800651c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
 8006528:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800652a:	2300      	movs	r3, #0
 800652c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	429a      	cmp	r2, r3
 8006540:	d812      	bhi.n	8006568 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	1ad2      	subs	r2, r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	429a      	cmp	r2, r3
 800654e:	d302      	bcc.n	8006556 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006550:	2301      	movs	r3, #1
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	e01b      	b.n	800658e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006556:	4b10      	ldr	r3, [pc, #64]	@ (8006598 <prvInsertTimerInActiveList+0x7c>)
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3304      	adds	r3, #4
 800655e:	4619      	mov	r1, r3
 8006560:	4610      	mov	r0, r2
 8006562:	f7fe f954 	bl	800480e <vListInsert>
 8006566:	e012      	b.n	800658e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	429a      	cmp	r2, r3
 800656e:	d206      	bcs.n	800657e <prvInsertTimerInActiveList+0x62>
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d302      	bcc.n	800657e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006578:	2301      	movs	r3, #1
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	e007      	b.n	800658e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800657e:	4b07      	ldr	r3, [pc, #28]	@ (800659c <prvInsertTimerInActiveList+0x80>)
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	3304      	adds	r3, #4
 8006586:	4619      	mov	r1, r3
 8006588:	4610      	mov	r0, r2
 800658a:	f7fe f940 	bl	800480e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800658e:	697b      	ldr	r3, [r7, #20]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	20000fd8 	.word	0x20000fd8
 800659c:	20000fd4 	.word	0x20000fd4

080065a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08c      	sub	sp, #48	@ 0x30
 80065a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065a6:	e0a2      	b.n	80066ee <prvProcessReceivedCommands+0x14e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	da0b      	bge.n	80065c6 <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80065ae:	f107 0308 	add.w	r3, r7, #8
 80065b2:	3304      	adds	r3, #4
 80065b4:	627b      	str	r3, [r7, #36]	@ 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065bc:	6850      	ldr	r0, [r2, #4]
 80065be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065c0:	6892      	ldr	r2, [r2, #8]
 80065c2:	4611      	mov	r1, r2
 80065c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f2c0 8090 	blt.w	80066ee <prvProcessReceivedCommands+0x14e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d004      	beq.n	80065e4 <prvProcessReceivedCommands+0x44>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	3304      	adds	r3, #4
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fe f94e 	bl	8004880 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065e4:	1d3b      	adds	r3, r7, #4
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff ff78 	bl	80064dc <prvSampleTimeNow>
 80065ec:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2b09      	cmp	r3, #9
 80065f2:	d879      	bhi.n	80066e8 <prvProcessReceivedCommands+0x148>
 80065f4:	a201      	add	r2, pc, #4	@ (adr r2, 80065fc <prvProcessReceivedCommands+0x5c>)
 80065f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fa:	bf00      	nop
 80065fc:	08006625 	.word	0x08006625
 8006600:	08006625 	.word	0x08006625
 8006604:	08006625 	.word	0x08006625
 8006608:	0800667f 	.word	0x0800667f
 800660c:	08006693 	.word	0x08006693
 8006610:	080066bf 	.word	0x080066bf
 8006614:	08006625 	.word	0x08006625
 8006618:	08006625 	.word	0x08006625
 800661c:	0800667f 	.word	0x0800667f
 8006620:	08006693 	.word	0x08006693
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800662a:	f043 0301 	orr.w	r3, r3, #1
 800662e:	b2da      	uxtb	r2, r3
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	18d1      	adds	r1, r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	69fa      	ldr	r2, [r7, #28]
 8006642:	6a38      	ldr	r0, [r7, #32]
 8006644:	f7ff ff6a 	bl	800651c <prvInsertTimerInActiveList>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d04e      	beq.n	80066ec <prvProcessReceivedCommands+0x14c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	6a38      	ldr	r0, [r7, #32]
 8006654:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d043      	beq.n	80066ec <prvProcessReceivedCommands+0x14c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	441a      	add	r2, r3
 800666c:	2300      	movs	r3, #0
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	2300      	movs	r3, #0
 8006672:	2100      	movs	r1, #0
 8006674:	6a38      	ldr	r0, [r7, #32]
 8006676:	f7ff fe2b 	bl	80062d0 <xTimerGenericCommand>
 800667a:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 800667c:	e036      	b.n	80066ec <prvProcessReceivedCommands+0x14c>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006684:	f023 0301 	bic.w	r3, r3, #1
 8006688:	b2da      	uxtb	r2, r3
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006690:	e02d      	b.n	80066ee <prvProcessReceivedCommands+0x14e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006698:	f043 0301 	orr.w	r3, r3, #1
 800669c:	b2da      	uxtb	r2, r3
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	18d1      	adds	r1, r2, r3
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	69fa      	ldr	r2, [r7, #28]
 80066b6:	6a38      	ldr	r0, [r7, #32]
 80066b8:	f7ff ff30 	bl	800651c <prvInsertTimerInActiveList>
					break;
 80066bc:	e017      	b.n	80066ee <prvProcessReceivedCommands+0x14e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d103      	bne.n	80066d4 <prvProcessReceivedCommands+0x134>
						{
							vPortFree( pxTimer );
 80066cc:	6a38      	ldr	r0, [r7, #32]
 80066ce:	f000 faad 	bl	8006c2c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066d2:	e00c      	b.n	80066ee <prvProcessReceivedCommands+0x14e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066da:	f023 0301 	bic.w	r3, r3, #1
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80066e6:	e002      	b.n	80066ee <prvProcessReceivedCommands+0x14e>

				default	:
					/* Don't expect to get here. */
					break;
 80066e8:	bf00      	nop
 80066ea:	e000      	b.n	80066ee <prvProcessReceivedCommands+0x14e>
					break;
 80066ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066ee:	4b08      	ldr	r3, [pc, #32]	@ (8006710 <prvProcessReceivedCommands+0x170>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f107 0108 	add.w	r1, r7, #8
 80066f6:	2200      	movs	r2, #0
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fe fb57 	bl	8004dac <xQueueReceive>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	f47f af51 	bne.w	80065a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006706:	bf00      	nop
 8006708:	bf00      	nop
 800670a:	3728      	adds	r7, #40	@ 0x28
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20000fdc 	.word	0x20000fdc

08006714 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800671a:	e03a      	b.n	8006792 <prvSwitchTimerLists+0x7e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800671c:	4b26      	ldr	r3, [pc, #152]	@ (80067b8 <prvSwitchTimerLists+0xa4>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006726:	4b24      	ldr	r3, [pc, #144]	@ (80067b8 <prvSwitchTimerLists+0xa4>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	3304      	adds	r3, #4
 8006734:	4618      	mov	r0, r3
 8006736:	f7fe f8a3 	bl	8004880 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	d020      	beq.n	8006792 <prvSwitchTimerLists+0x7e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4413      	add	r3, r2
 8006758:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	429a      	cmp	r2, r3
 8006760:	d90e      	bls.n	8006780 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800676e:	4b12      	ldr	r3, [pc, #72]	@ (80067b8 <prvSwitchTimerLists+0xa4>)
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3304      	adds	r3, #4
 8006776:	4619      	mov	r1, r3
 8006778:	4610      	mov	r0, r2
 800677a:	f7fe f848 	bl	800480e <vListInsert>
 800677e:	e008      	b.n	8006792 <prvSwitchTimerLists+0x7e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006780:	2300      	movs	r3, #0
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	2300      	movs	r3, #0
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	2100      	movs	r1, #0
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f7ff fda0 	bl	80062d0 <xTimerGenericCommand>
 8006790:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006792:	4b09      	ldr	r3, [pc, #36]	@ (80067b8 <prvSwitchTimerLists+0xa4>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1bf      	bne.n	800671c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800679c:	4b06      	ldr	r3, [pc, #24]	@ (80067b8 <prvSwitchTimerLists+0xa4>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80067a2:	4b06      	ldr	r3, [pc, #24]	@ (80067bc <prvSwitchTimerLists+0xa8>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a04      	ldr	r2, [pc, #16]	@ (80067b8 <prvSwitchTimerLists+0xa4>)
 80067a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067aa:	4a04      	ldr	r2, [pc, #16]	@ (80067bc <prvSwitchTimerLists+0xa8>)
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	6013      	str	r3, [r2, #0]
}
 80067b0:	bf00      	nop
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	20000fd4 	.word	0x20000fd4
 80067bc:	20000fd8 	.word	0x20000fd8

080067c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80067c6:	f000 f8dd 	bl	8006984 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067ca:	4b15      	ldr	r3, [pc, #84]	@ (8006820 <prvCheckForValidListAndQueue+0x60>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d120      	bne.n	8006814 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067d2:	4814      	ldr	r0, [pc, #80]	@ (8006824 <prvCheckForValidListAndQueue+0x64>)
 80067d4:	f7fd ffca 	bl	800476c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067d8:	4813      	ldr	r0, [pc, #76]	@ (8006828 <prvCheckForValidListAndQueue+0x68>)
 80067da:	f7fd ffc7 	bl	800476c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067de:	4b13      	ldr	r3, [pc, #76]	@ (800682c <prvCheckForValidListAndQueue+0x6c>)
 80067e0:	4a10      	ldr	r2, [pc, #64]	@ (8006824 <prvCheckForValidListAndQueue+0x64>)
 80067e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067e4:	4b12      	ldr	r3, [pc, #72]	@ (8006830 <prvCheckForValidListAndQueue+0x70>)
 80067e6:	4a10      	ldr	r2, [pc, #64]	@ (8006828 <prvCheckForValidListAndQueue+0x68>)
 80067e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067ea:	2300      	movs	r3, #0
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	4b11      	ldr	r3, [pc, #68]	@ (8006834 <prvCheckForValidListAndQueue+0x74>)
 80067f0:	4a11      	ldr	r2, [pc, #68]	@ (8006838 <prvCheckForValidListAndQueue+0x78>)
 80067f2:	2110      	movs	r1, #16
 80067f4:	200a      	movs	r0, #10
 80067f6:	f7fe f8c7 	bl	8004988 <xQueueGenericCreateStatic>
 80067fa:	4603      	mov	r3, r0
 80067fc:	4a08      	ldr	r2, [pc, #32]	@ (8006820 <prvCheckForValidListAndQueue+0x60>)
 80067fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006800:	4b07      	ldr	r3, [pc, #28]	@ (8006820 <prvCheckForValidListAndQueue+0x60>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d005      	beq.n	8006814 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006808:	4b05      	ldr	r3, [pc, #20]	@ (8006820 <prvCheckForValidListAndQueue+0x60>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	490b      	ldr	r1, [pc, #44]	@ (800683c <prvCheckForValidListAndQueue+0x7c>)
 800680e:	4618      	mov	r0, r3
 8006810:	f7fe fdb6 	bl	8005380 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006814:	f000 f8d0 	bl	80069b8 <vPortExitCritical>
}
 8006818:	bf00      	nop
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20000fdc 	.word	0x20000fdc
 8006824:	20000fac 	.word	0x20000fac
 8006828:	20000fc0 	.word	0x20000fc0
 800682c:	20000fd4 	.word	0x20000fd4
 8006830:	20000fd8 	.word	0x20000fd8
 8006834:	20001088 	.word	0x20001088
 8006838:	20000fe8 	.word	0x20000fe8
 800683c:	0800706c 	.word	0x0800706c

08006840 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3b04      	subs	r3, #4
 8006850:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3b04      	subs	r3, #4
 800685e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f023 0201 	bic.w	r2, r3, #1
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3b04      	subs	r3, #4
 800686e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006870:	4a0c      	ldr	r2, [pc, #48]	@ (80068a4 <pxPortInitialiseStack+0x64>)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3b14      	subs	r3, #20
 800687a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3b04      	subs	r3, #4
 8006886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f06f 0202 	mvn.w	r2, #2
 800688e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	3b20      	subs	r3, #32
 8006894:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006896:	68fb      	ldr	r3, [r7, #12]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	080068a9 	.word	0x080068a9

080068a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80068ae:	2300      	movs	r3, #0
 80068b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	607b      	str	r3, [r7, #4]
}
 80068c4:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068c6:	bf00      	nop
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0fc      	beq.n	80068c8 <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068ce:	bf00      	nop
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	0000      	movs	r0, r0
	...

080068e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068e0:	4b07      	ldr	r3, [pc, #28]	@ (8006900 <pxCurrentTCBConst2>)
 80068e2:	6819      	ldr	r1, [r3, #0]
 80068e4:	6808      	ldr	r0, [r1, #0]
 80068e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ea:	f380 8809 	msr	PSP, r0
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f04f 0000 	mov.w	r0, #0
 80068f6:	f380 8811 	msr	BASEPRI, r0
 80068fa:	4770      	bx	lr
 80068fc:	f3af 8000 	nop.w

08006900 <pxCurrentTCBConst2>:
 8006900:	20000aac 	.word	0x20000aac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop

08006908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006908:	4808      	ldr	r0, [pc, #32]	@ (800692c <prvPortStartFirstTask+0x24>)
 800690a:	6800      	ldr	r0, [r0, #0]
 800690c:	6800      	ldr	r0, [r0, #0]
 800690e:	f380 8808 	msr	MSP, r0
 8006912:	f04f 0000 	mov.w	r0, #0
 8006916:	f380 8814 	msr	CONTROL, r0
 800691a:	b662      	cpsie	i
 800691c:	b661      	cpsie	f
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	df00      	svc	0
 8006928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800692a:	bf00      	nop
 800692c:	e000ed08 	.word	0xe000ed08

08006930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006934:	4b10      	ldr	r3, [pc, #64]	@ (8006978 <xPortStartScheduler+0x48>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a0f      	ldr	r2, [pc, #60]	@ (8006978 <xPortStartScheduler+0x48>)
 800693a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800693e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006940:	4b0d      	ldr	r3, [pc, #52]	@ (8006978 <xPortStartScheduler+0x48>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a0c      	ldr	r2, [pc, #48]	@ (8006978 <xPortStartScheduler+0x48>)
 8006946:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800694a:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800694c:	f000 f8a6 	bl	8006a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006950:	4b0a      	ldr	r3, [pc, #40]	@ (800697c <xPortStartScheduler+0x4c>)
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006956:	f000 f8c5 	bl	8006ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800695a:	4b09      	ldr	r3, [pc, #36]	@ (8006980 <xPortStartScheduler+0x50>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a08      	ldr	r2, [pc, #32]	@ (8006980 <xPortStartScheduler+0x50>)
 8006960:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006964:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006966:	f7ff ffcf 	bl	8006908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800696a:	f7ff f8bb 	bl	8005ae4 <vTaskSwitchContext>
	prvTaskExitError();
 800696e:	f7ff ff9b 	bl	80068a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	bd80      	pop	{r7, pc}
 8006978:	e000ed20 	.word	0xe000ed20
 800697c:	200000c0 	.word	0x200000c0
 8006980:	e000ef34 	.word	0xe000ef34

08006984 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	607b      	str	r3, [r7, #4]
}
 800699c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800699e:	4b05      	ldr	r3, [pc, #20]	@ (80069b4 <vPortEnterCritical+0x30>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3301      	adds	r3, #1
 80069a4:	4a03      	ldr	r2, [pc, #12]	@ (80069b4 <vPortEnterCritical+0x30>)
 80069a6:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	200000c0 	.word	0x200000c0

080069b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 80069be:	4b0a      	ldr	r3, [pc, #40]	@ (80069e8 <vPortExitCritical+0x30>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3b01      	subs	r3, #1
 80069c4:	4a08      	ldr	r2, [pc, #32]	@ (80069e8 <vPortExitCritical+0x30>)
 80069c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069c8:	4b07      	ldr	r3, [pc, #28]	@ (80069e8 <vPortExitCritical+0x30>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d105      	bne.n	80069dc <vPortExitCritical+0x24>
 80069d0:	2300      	movs	r3, #0
 80069d2:	607b      	str	r3, [r7, #4]
	__asm volatile
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f383 8811 	msr	BASEPRI, r3
}
 80069da:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	200000c0 	.word	0x200000c0
 80069ec:	00000000 	.word	0x00000000

080069f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069f0:	f3ef 8009 	mrs	r0, PSP
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	4b15      	ldr	r3, [pc, #84]	@ (8006a50 <pxCurrentTCBConst>)
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	f01e 0f10 	tst.w	lr, #16
 8006a00:	bf08      	it	eq
 8006a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0a:	6010      	str	r0, [r2, #0]
 8006a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a14:	f380 8811 	msr	BASEPRI, r0
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f7ff f860 	bl	8005ae4 <vTaskSwitchContext>
 8006a24:	f04f 0000 	mov.w	r0, #0
 8006a28:	f380 8811 	msr	BASEPRI, r0
 8006a2c:	bc09      	pop	{r0, r3}
 8006a2e:	6819      	ldr	r1, [r3, #0]
 8006a30:	6808      	ldr	r0, [r1, #0]
 8006a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a36:	f01e 0f10 	tst.w	lr, #16
 8006a3a:	bf08      	it	eq
 8006a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a40:	f380 8809 	msr	PSP, r0
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	f3af 8000 	nop.w

08006a50 <pxCurrentTCBConst>:
 8006a50:	20000aac 	.word	0x20000aac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop

08006a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	607b      	str	r3, [r7, #4]
}
 8006a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a72:	f7fe ff8f 	bl	8005994 <xTaskIncrementTick>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a7c:	4b06      	ldr	r3, [pc, #24]	@ (8006a98 <xPortSysTickHandler+0x40>)
 8006a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	2300      	movs	r3, #0
 8006a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	f383 8811 	msr	BASEPRI, r3
}
 8006a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a90:	bf00      	nop
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	e000ed04 	.word	0xe000ed04

08006a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <vPortSetupTimerInterrupt+0x34>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad4 <vPortSetupTimerInterrupt+0x38>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006aac:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad8 <vPortSetupTimerInterrupt+0x3c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8006adc <vPortSetupTimerInterrupt+0x40>)
 8006ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab6:	099b      	lsrs	r3, r3, #6
 8006ab8:	4a09      	ldr	r2, [pc, #36]	@ (8006ae0 <vPortSetupTimerInterrupt+0x44>)
 8006aba:	3b01      	subs	r3, #1
 8006abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006abe:	4b04      	ldr	r3, [pc, #16]	@ (8006ad0 <vPortSetupTimerInterrupt+0x34>)
 8006ac0:	2207      	movs	r2, #7
 8006ac2:	601a      	str	r2, [r3, #0]
}
 8006ac4:	bf00      	nop
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	e000e010 	.word	0xe000e010
 8006ad4:	e000e018 	.word	0xe000e018
 8006ad8:	20000000 	.word	0x20000000
 8006adc:	10624dd3 	.word	0x10624dd3
 8006ae0:	e000e014 	.word	0xe000e014

08006ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006af4 <vPortEnableVFP+0x10>
 8006ae8:	6801      	ldr	r1, [r0, #0]
 8006aea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006aee:	6001      	str	r1, [r0, #0]
 8006af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006af2:	bf00      	nop
 8006af4:	e000ed88 	.word	0xe000ed88

08006af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8006b04:	f7fe fe9a 	bl	800583c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b08:	4b42      	ldr	r3, [pc, #264]	@ (8006c14 <pvPortMalloc+0x11c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b10:	f000 f8cc 	bl	8006cac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b14:	4b40      	ldr	r3, [pc, #256]	@ (8006c18 <pvPortMalloc+0x120>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d172      	bne.n	8006c06 <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00d      	beq.n	8006b42 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8006b26:	2208      	movs	r2, #8
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f003 0307 	and.w	r3, r3, #7
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d004      	beq.n	8006b42 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f023 0307 	bic.w	r3, r3, #7
 8006b3e:	3308      	adds	r3, #8
 8006b40:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d05e      	beq.n	8006c06 <pvPortMalloc+0x10e>
 8006b48:	4b34      	ldr	r3, [pc, #208]	@ (8006c1c <pvPortMalloc+0x124>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d859      	bhi.n	8006c06 <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b52:	4b33      	ldr	r3, [pc, #204]	@ (8006c20 <pvPortMalloc+0x128>)
 8006b54:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006b56:	4b32      	ldr	r3, [pc, #200]	@ (8006c20 <pvPortMalloc+0x128>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b5c:	e004      	b.n	8006b68 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d903      	bls.n	8006b7a <pvPortMalloc+0x82>
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1f1      	bne.n	8006b5e <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b7a:	4b26      	ldr	r3, [pc, #152]	@ (8006c14 <pvPortMalloc+0x11c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d040      	beq.n	8006c06 <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2208      	movs	r2, #8
 8006b8a:	4413      	add	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	1ad2      	subs	r2, r2, r3
 8006b9e:	2308      	movs	r3, #8
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d90f      	bls.n	8006bc6 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4413      	add	r3, r2
 8006bac:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	1ad2      	subs	r2, r2, r3
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bc0:	68b8      	ldr	r0, [r7, #8]
 8006bc2:	f000 f8d5 	bl	8006d70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bc6:	4b15      	ldr	r3, [pc, #84]	@ (8006c1c <pvPortMalloc+0x124>)
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	4a12      	ldr	r2, [pc, #72]	@ (8006c1c <pvPortMalloc+0x124>)
 8006bd2:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bd4:	4b11      	ldr	r3, [pc, #68]	@ (8006c1c <pvPortMalloc+0x124>)
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	4b12      	ldr	r3, [pc, #72]	@ (8006c24 <pvPortMalloc+0x12c>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d203      	bcs.n	8006be8 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006be0:	4b0e      	ldr	r3, [pc, #56]	@ (8006c1c <pvPortMalloc+0x124>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a0f      	ldr	r2, [pc, #60]	@ (8006c24 <pvPortMalloc+0x12c>)
 8006be6:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	4b0a      	ldr	r3, [pc, #40]	@ (8006c18 <pvPortMalloc+0x120>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006c28 <pvPortMalloc+0x130>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3301      	adds	r3, #1
 8006c02:	4a09      	ldr	r2, [pc, #36]	@ (8006c28 <pvPortMalloc+0x130>)
 8006c04:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c06:	f7fe fe27 	bl	8005858 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	20004ce0 	.word	0x20004ce0
 8006c18:	20004cf4 	.word	0x20004cf4
 8006c1c:	20004ce4 	.word	0x20004ce4
 8006c20:	20004cd8 	.word	0x20004cd8
 8006c24:	20004ce8 	.word	0x20004ce8
 8006c28:	20004cec 	.word	0x20004cec

08006c2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d02c      	beq.n	8006c98 <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c3e:	2308      	movs	r3, #8
 8006c40:	425b      	negs	r3, r3
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	4413      	add	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	4b13      	ldr	r3, [pc, #76]	@ (8006ca0 <vPortFree+0x74>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4013      	ands	r3, r2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d01e      	beq.n	8006c98 <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d11a      	bne.n	8006c98 <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	4b0e      	ldr	r3, [pc, #56]	@ (8006ca0 <vPortFree+0x74>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	43db      	mvns	r3, r3
 8006c6c:	401a      	ands	r2, r3
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c72:	f7fe fde3 	bl	800583c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ca4 <vPortFree+0x78>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4413      	add	r3, r2
 8006c80:	4a08      	ldr	r2, [pc, #32]	@ (8006ca4 <vPortFree+0x78>)
 8006c82:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c84:	68b8      	ldr	r0, [r7, #8]
 8006c86:	f000 f873 	bl	8006d70 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c8a:	4b07      	ldr	r3, [pc, #28]	@ (8006ca8 <vPortFree+0x7c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	4a05      	ldr	r2, [pc, #20]	@ (8006ca8 <vPortFree+0x7c>)
 8006c92:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c94:	f7fe fde0 	bl	8005858 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c98:	bf00      	nop
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20004cf4 	.word	0x20004cf4
 8006ca4:	20004ce4 	.word	0x20004ce4
 8006ca8:	20004cf0 	.word	0x20004cf0

08006cac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cb2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006cb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cb8:	4b27      	ldr	r3, [pc, #156]	@ (8006d58 <prvHeapInit+0xac>)
 8006cba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f003 0307 	and.w	r3, r3, #7
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00c      	beq.n	8006ce0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	3307      	adds	r3, #7
 8006cca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 0307 	bic.w	r3, r3, #7
 8006cd2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	4a1f      	ldr	r2, [pc, #124]	@ (8006d58 <prvHeapInit+0xac>)
 8006cdc:	4413      	add	r3, r2
 8006cde:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8006d5c <prvHeapInit+0xb0>)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cea:	4b1c      	ldr	r3, [pc, #112]	@ (8006d5c <prvHeapInit+0xb0>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cf8:	2208      	movs	r2, #8
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	1a9b      	subs	r3, r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 0307 	bic.w	r3, r3, #7
 8006d06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	4a15      	ldr	r2, [pc, #84]	@ (8006d60 <prvHeapInit+0xb4>)
 8006d0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d0e:	4b14      	ldr	r3, [pc, #80]	@ (8006d60 <prvHeapInit+0xb4>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2200      	movs	r2, #0
 8006d14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d16:	4b12      	ldr	r3, [pc, #72]	@ (8006d60 <prvHeapInit+0xb4>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	1ad2      	subs	r2, r2, r3
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d60 <prvHeapInit+0xb4>)
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	4a0a      	ldr	r2, [pc, #40]	@ (8006d64 <prvHeapInit+0xb8>)
 8006d3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	4a09      	ldr	r2, [pc, #36]	@ (8006d68 <prvHeapInit+0xbc>)
 8006d42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d44:	4b09      	ldr	r3, [pc, #36]	@ (8006d6c <prvHeapInit+0xc0>)
 8006d46:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d4a:	601a      	str	r2, [r3, #0]
}
 8006d4c:	bf00      	nop
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	200010d8 	.word	0x200010d8
 8006d5c:	20004cd8 	.word	0x20004cd8
 8006d60:	20004ce0 	.word	0x20004ce0
 8006d64:	20004ce8 	.word	0x20004ce8
 8006d68:	20004ce4 	.word	0x20004ce4
 8006d6c:	20004cf4 	.word	0x20004cf4

08006d70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d78:	4b28      	ldr	r3, [pc, #160]	@ (8006e1c <prvInsertBlockIntoFreeList+0xac>)
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	e002      	b.n	8006d84 <prvInsertBlockIntoFreeList+0x14>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d8f7      	bhi.n	8006d7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	4413      	add	r3, r2
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d108      	bne.n	8006db2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	441a      	add	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	441a      	add	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d118      	bne.n	8006df8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	4b15      	ldr	r3, [pc, #84]	@ (8006e20 <prvInsertBlockIntoFreeList+0xb0>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d00d      	beq.n	8006dee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	441a      	add	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	e008      	b.n	8006e00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006dee:	4b0c      	ldr	r3, [pc, #48]	@ (8006e20 <prvInsertBlockIntoFreeList+0xb0>)
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	e003      	b.n	8006e00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d002      	beq.n	8006e0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e0e:	bf00      	nop
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	20004cd8 	.word	0x20004cd8
 8006e20:	20004ce0 	.word	0x20004ce0

08006e24 <memset>:
 8006e24:	4402      	add	r2, r0
 8006e26:	4603      	mov	r3, r0
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d100      	bne.n	8006e2e <memset+0xa>
 8006e2c:	4770      	bx	lr
 8006e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e32:	e7f9      	b.n	8006e28 <memset+0x4>

08006e34 <_reclaim_reent>:
 8006e34:	4b29      	ldr	r3, [pc, #164]	@ (8006edc <_reclaim_reent+0xa8>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4283      	cmp	r3, r0
 8006e3a:	b570      	push	{r4, r5, r6, lr}
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	d04b      	beq.n	8006ed8 <_reclaim_reent+0xa4>
 8006e40:	69c3      	ldr	r3, [r0, #28]
 8006e42:	b1ab      	cbz	r3, 8006e70 <_reclaim_reent+0x3c>
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	b16b      	cbz	r3, 8006e64 <_reclaim_reent+0x30>
 8006e48:	2500      	movs	r5, #0
 8006e4a:	69e3      	ldr	r3, [r4, #28]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	5959      	ldr	r1, [r3, r5]
 8006e50:	2900      	cmp	r1, #0
 8006e52:	d13b      	bne.n	8006ecc <_reclaim_reent+0x98>
 8006e54:	3504      	adds	r5, #4
 8006e56:	2d80      	cmp	r5, #128	@ 0x80
 8006e58:	d1f7      	bne.n	8006e4a <_reclaim_reent+0x16>
 8006e5a:	69e3      	ldr	r3, [r4, #28]
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	68d9      	ldr	r1, [r3, #12]
 8006e60:	f000 f872 	bl	8006f48 <_free_r>
 8006e64:	69e3      	ldr	r3, [r4, #28]
 8006e66:	6819      	ldr	r1, [r3, #0]
 8006e68:	b111      	cbz	r1, 8006e70 <_reclaim_reent+0x3c>
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 f86c 	bl	8006f48 <_free_r>
 8006e70:	6961      	ldr	r1, [r4, #20]
 8006e72:	b111      	cbz	r1, 8006e7a <_reclaim_reent+0x46>
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 f867 	bl	8006f48 <_free_r>
 8006e7a:	69e1      	ldr	r1, [r4, #28]
 8006e7c:	b111      	cbz	r1, 8006e84 <_reclaim_reent+0x50>
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f000 f862 	bl	8006f48 <_free_r>
 8006e84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006e86:	b111      	cbz	r1, 8006e8e <_reclaim_reent+0x5a>
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f000 f85d 	bl	8006f48 <_free_r>
 8006e8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e90:	b111      	cbz	r1, 8006e98 <_reclaim_reent+0x64>
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 f858 	bl	8006f48 <_free_r>
 8006e98:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006e9a:	b111      	cbz	r1, 8006ea2 <_reclaim_reent+0x6e>
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f000 f853 	bl	8006f48 <_free_r>
 8006ea2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006ea4:	b111      	cbz	r1, 8006eac <_reclaim_reent+0x78>
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f000 f84e 	bl	8006f48 <_free_r>
 8006eac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006eae:	b111      	cbz	r1, 8006eb6 <_reclaim_reent+0x82>
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f000 f849 	bl	8006f48 <_free_r>
 8006eb6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006eb8:	b111      	cbz	r1, 8006ec0 <_reclaim_reent+0x8c>
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f000 f844 	bl	8006f48 <_free_r>
 8006ec0:	6a23      	ldr	r3, [r4, #32]
 8006ec2:	b14b      	cbz	r3, 8006ed8 <_reclaim_reent+0xa4>
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006eca:	4718      	bx	r3
 8006ecc:	680e      	ldr	r6, [r1, #0]
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f000 f83a 	bl	8006f48 <_free_r>
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	e7bb      	b.n	8006e50 <_reclaim_reent+0x1c>
 8006ed8:	bd70      	pop	{r4, r5, r6, pc}
 8006eda:	bf00      	nop
 8006edc:	200000c4 	.word	0x200000c4

08006ee0 <__libc_init_array>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	4d0d      	ldr	r5, [pc, #52]	@ (8006f18 <__libc_init_array+0x38>)
 8006ee4:	4c0d      	ldr	r4, [pc, #52]	@ (8006f1c <__libc_init_array+0x3c>)
 8006ee6:	1b64      	subs	r4, r4, r5
 8006ee8:	10a4      	asrs	r4, r4, #2
 8006eea:	2600      	movs	r6, #0
 8006eec:	42a6      	cmp	r6, r4
 8006eee:	d109      	bne.n	8006f04 <__libc_init_array+0x24>
 8006ef0:	4d0b      	ldr	r5, [pc, #44]	@ (8006f20 <__libc_init_array+0x40>)
 8006ef2:	4c0c      	ldr	r4, [pc, #48]	@ (8006f24 <__libc_init_array+0x44>)
 8006ef4:	f000 f87e 	bl	8006ff4 <_init>
 8006ef8:	1b64      	subs	r4, r4, r5
 8006efa:	10a4      	asrs	r4, r4, #2
 8006efc:	2600      	movs	r6, #0
 8006efe:	42a6      	cmp	r6, r4
 8006f00:	d105      	bne.n	8006f0e <__libc_init_array+0x2e>
 8006f02:	bd70      	pop	{r4, r5, r6, pc}
 8006f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f08:	4798      	blx	r3
 8006f0a:	3601      	adds	r6, #1
 8006f0c:	e7ee      	b.n	8006eec <__libc_init_array+0xc>
 8006f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f12:	4798      	blx	r3
 8006f14:	3601      	adds	r6, #1
 8006f16:	e7f2      	b.n	8006efe <__libc_init_array+0x1e>
 8006f18:	080070bc 	.word	0x080070bc
 8006f1c:	080070bc 	.word	0x080070bc
 8006f20:	080070bc 	.word	0x080070bc
 8006f24:	080070c0 	.word	0x080070c0

08006f28 <__retarget_lock_acquire_recursive>:
 8006f28:	4770      	bx	lr

08006f2a <__retarget_lock_release_recursive>:
 8006f2a:	4770      	bx	lr

08006f2c <memcpy>:
 8006f2c:	440a      	add	r2, r1
 8006f2e:	4291      	cmp	r1, r2
 8006f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f34:	d100      	bne.n	8006f38 <memcpy+0xc>
 8006f36:	4770      	bx	lr
 8006f38:	b510      	push	{r4, lr}
 8006f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f42:	4291      	cmp	r1, r2
 8006f44:	d1f9      	bne.n	8006f3a <memcpy+0xe>
 8006f46:	bd10      	pop	{r4, pc}

08006f48 <_free_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4605      	mov	r5, r0
 8006f4c:	2900      	cmp	r1, #0
 8006f4e:	d041      	beq.n	8006fd4 <_free_r+0x8c>
 8006f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f54:	1f0c      	subs	r4, r1, #4
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	bfb8      	it	lt
 8006f5a:	18e4      	addlt	r4, r4, r3
 8006f5c:	f000 f83e 	bl	8006fdc <__malloc_lock>
 8006f60:	4a1d      	ldr	r2, [pc, #116]	@ (8006fd8 <_free_r+0x90>)
 8006f62:	6813      	ldr	r3, [r2, #0]
 8006f64:	b933      	cbnz	r3, 8006f74 <_free_r+0x2c>
 8006f66:	6063      	str	r3, [r4, #4]
 8006f68:	6014      	str	r4, [r2, #0]
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f70:	f000 b83a 	b.w	8006fe8 <__malloc_unlock>
 8006f74:	42a3      	cmp	r3, r4
 8006f76:	d908      	bls.n	8006f8a <_free_r+0x42>
 8006f78:	6820      	ldr	r0, [r4, #0]
 8006f7a:	1821      	adds	r1, r4, r0
 8006f7c:	428b      	cmp	r3, r1
 8006f7e:	bf01      	itttt	eq
 8006f80:	6819      	ldreq	r1, [r3, #0]
 8006f82:	685b      	ldreq	r3, [r3, #4]
 8006f84:	1809      	addeq	r1, r1, r0
 8006f86:	6021      	streq	r1, [r4, #0]
 8006f88:	e7ed      	b.n	8006f66 <_free_r+0x1e>
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	b10b      	cbz	r3, 8006f94 <_free_r+0x4c>
 8006f90:	42a3      	cmp	r3, r4
 8006f92:	d9fa      	bls.n	8006f8a <_free_r+0x42>
 8006f94:	6811      	ldr	r1, [r2, #0]
 8006f96:	1850      	adds	r0, r2, r1
 8006f98:	42a0      	cmp	r0, r4
 8006f9a:	d10b      	bne.n	8006fb4 <_free_r+0x6c>
 8006f9c:	6820      	ldr	r0, [r4, #0]
 8006f9e:	4401      	add	r1, r0
 8006fa0:	1850      	adds	r0, r2, r1
 8006fa2:	4283      	cmp	r3, r0
 8006fa4:	6011      	str	r1, [r2, #0]
 8006fa6:	d1e0      	bne.n	8006f6a <_free_r+0x22>
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	6053      	str	r3, [r2, #4]
 8006fae:	4408      	add	r0, r1
 8006fb0:	6010      	str	r0, [r2, #0]
 8006fb2:	e7da      	b.n	8006f6a <_free_r+0x22>
 8006fb4:	d902      	bls.n	8006fbc <_free_r+0x74>
 8006fb6:	230c      	movs	r3, #12
 8006fb8:	602b      	str	r3, [r5, #0]
 8006fba:	e7d6      	b.n	8006f6a <_free_r+0x22>
 8006fbc:	6820      	ldr	r0, [r4, #0]
 8006fbe:	1821      	adds	r1, r4, r0
 8006fc0:	428b      	cmp	r3, r1
 8006fc2:	bf04      	itt	eq
 8006fc4:	6819      	ldreq	r1, [r3, #0]
 8006fc6:	685b      	ldreq	r3, [r3, #4]
 8006fc8:	6063      	str	r3, [r4, #4]
 8006fca:	bf04      	itt	eq
 8006fcc:	1809      	addeq	r1, r1, r0
 8006fce:	6021      	streq	r1, [r4, #0]
 8006fd0:	6054      	str	r4, [r2, #4]
 8006fd2:	e7ca      	b.n	8006f6a <_free_r+0x22>
 8006fd4:	bd38      	pop	{r3, r4, r5, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20004e34 	.word	0x20004e34

08006fdc <__malloc_lock>:
 8006fdc:	4801      	ldr	r0, [pc, #4]	@ (8006fe4 <__malloc_lock+0x8>)
 8006fde:	f7ff bfa3 	b.w	8006f28 <__retarget_lock_acquire_recursive>
 8006fe2:	bf00      	nop
 8006fe4:	20004e30 	.word	0x20004e30

08006fe8 <__malloc_unlock>:
 8006fe8:	4801      	ldr	r0, [pc, #4]	@ (8006ff0 <__malloc_unlock+0x8>)
 8006fea:	f7ff bf9e 	b.w	8006f2a <__retarget_lock_release_recursive>
 8006fee:	bf00      	nop
 8006ff0:	20004e30 	.word	0x20004e30

08006ff4 <_init>:
 8006ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff6:	bf00      	nop
 8006ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ffa:	bc08      	pop	{r3}
 8006ffc:	469e      	mov	lr, r3
 8006ffe:	4770      	bx	lr

08007000 <_fini>:
 8007000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007002:	bf00      	nop
 8007004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007006:	bc08      	pop	{r3}
 8007008:	469e      	mov	lr, r3
 800700a:	4770      	bx	lr
